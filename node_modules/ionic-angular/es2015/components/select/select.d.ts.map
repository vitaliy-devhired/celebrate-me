{"version":3,"file":"select.d.ts","sources":["select.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnDestroy, QueryList, Renderer } from '@angular/core';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { DeepLinker } from '../../navigation/deep-linker';\nimport { Overlay } from '../../navigation/overlay';\nimport { Form } from '../../util/form';\nimport { BaseInput } from '../../util/base-input';\nimport { Item } from '../item/item';\nimport { Option } from '../option/option';\n/**\n * @name Select\n * @description\n * The `ion-select` component is similar to an HTML `<select>` element, however,\n * Ionic's select component makes it easier for users to sort through and select\n * the preferred option or options. When users tap the select component, a\n * dialog will appear with all of the options in a large, easy to select list\n * for users.\n *\n * The select component takes child `ion-option` components. If `ion-option` is not\n * given a `value` attribute then it will use its text as the value.\n *\n * If `ngModel` is bound to `ion-select`, the selected value will be based on the\n * bound value of the model. Otherwise, the `selected` attribute can be used on\n * `ion-option` components.\n *\n * ### Interfaces\n *\n * By default, the `ion-select` uses the {@link ../../alert/AlertController AlertController API}\n * to open up the overlay of options in an alert. The interface can be changed to use the\n * {@link ../../action-sheet/ActionSheetController ActionSheetController API} or\n * {@link ../../popover/PopoverController PopoverController API} by passing `action-sheet` or `popover`,\n * respectively, to the `interface` property. Read on to the other sections for the limitations\n * of the different interfaces.\n *\n * ### Single Value: Radio Buttons\n *\n * The standard `ion-select` component allows the user to select only one\n * option. When selecting only one option the alert interface presents users with\n * a radio button styled list of options. The action sheet interface can only be\n * used with a single value select. If the number of options exceed 6, it will\n * use the `alert` interface even if `action-sheet` is passed. The `ion-select`\n * component's value receives the value of the selected option's value.\n *\n * ```html\n * <ion-item>\n *   <ion-label>Gender</ion-label>\n *   <ion-select [(ngModel)]=\"gender\">\n *     <ion-option value=\"f\">Female</ion-option>\n *     <ion-option value=\"m\">Male</ion-option>\n *   </ion-select>\n * </ion-item>\n * ```\n *\n * ### Multiple Value: Checkboxes\n *\n * By adding the `multiple=\"true\"` attribute to `ion-select`, users are able\n * to select multiple options. When multiple options can be selected, the alert\n * overlay presents users with a checkbox styled list of options. The\n * `ion-select multiple=\"true\"` component's value receives an array of all the\n * selected option values. In the example below, because each option is not given\n * a `value`, then it'll use its text as the value instead.\n *\n * Note: the `action-sheet` and `popover` interfaces will not work with a multi-value select.\n *\n * ```html\n * <ion-item>\n *   <ion-label>Toppings</ion-label>\n *   <ion-select [(ngModel)]=\"toppings\" multiple=\"true\">\n *     <ion-option>Bacon</ion-option>\n *     <ion-option>Black Olives</ion-option>\n *     <ion-option>Extra Cheese</ion-option>\n *     <ion-option>Mushrooms</ion-option>\n *     <ion-option>Pepperoni</ion-option>\n *     <ion-option>Sausage</ion-option>\n *   </ion-select>\n * </ion-item>\n * ```\n *\n * ### Select Buttons\n * By default, the two buttons read `Cancel` and `OK`. Each button's text\n * can be customized using the `cancelText` and `okText` attributes:\n *\n * ```html\n * <ion-select okText=\"Okay\" cancelText=\"Dismiss\">\n *   ...\n * </ion-select>\n * ```\n *\n * The `action-sheet` and `popover` interfaces do not have an `OK` button, clicking\n * on any of the options will automatically close the overlay and select\n * that value.\n *\n * ### Select Options\n *\n * Since `ion-select` uses the `Alert`, `Action Sheet` and `Popover` interfaces, options can be\n * passed to these components through the `selectOptions` property. This can be used\n * to pass a custom title, subtitle, css class, and more. See the\n * {@link ../../alert/AlertController/#create AlertController API docs},\n * {@link ../../action-sheet/ActionSheetController/#create ActionSheetController API docs}, and\n * {@link ../../popover/PopoverController/#create PopoverController API docs}\n * for the properties that each interface accepts.\n *\n * For example, to change the `mode` of the overlay, pass it into `selectOptions`.\n *\n * ```html\n * <ion-select [selectOptions]=\"selectOptions\">\n *   ...\n * </ion-select>\n * ```\n *\n * ```ts\n * this.selectOptions = {\n *   title: 'Pizza Toppings',\n *   subTitle: 'Select your toppings',\n *   mode: 'md'\n * };\n * ```\n *\n * ### Object Value References\n *\n * When using objects for select values, it is possible for the identities of these objects to\n * change if they are coming from a server or database, while the selected value's identity\n * remains the same. For example, this can occur when an existing record with the desired object value\n * is loaded into the select, but the newly retrieved select options now have different identities. This will\n * result in the select appearing to have no value at all, even though the original selection in still intact.\n *\n * Using the `compareWith` `Input` is the solution to this problem\n *\n * ```html\n * <ion-item>\n *   <ion-label>Employee</ion-label>\n *   <ion-select [(ngModel)]=\"employee\" [compareWith]=\"compareFn\">\n *     <ion-option *ngFor=\"let employee of employees\" [value]=\"employee\">{{employee.name}}</ion-option>\n *   </ion-select>\n * </ion-item>\n * ```\n *\n * ```ts\n * compareFn(e1: Employee, e2: Employee): boolean {\n *   return e1 && e2 ? e1.id === e2.id : e1 === e2;\n * }\n * ```\n *\n * @demo /docs/demos/src/select/\n */\nexport declare class Select extends BaseInput<any> implements OnDestroy {\n    private _app;\n    config: Config;\n    deepLinker: DeepLinker;\n    _multi: boolean;\n    _options: QueryList<Option>;\n    _overlay: Overlay;\n    _texts: string[];\n    _text: string;\n    _compareWith: (o1: any, o2: any) => boolean;\n    /**\n     * @input {string} The text to display on the cancel button. Default: `Cancel`.\n     */\n    cancelText: string;\n    /**\n     * @input {string} The text to display on the ok button. Default: `OK`.\n     */\n    okText: string;\n    /**\n     * @input {string} The text to display when the select is empty.\n     */\n    placeholder: string;\n    /**\n     * @input {any} Any additional options that the `alert` or `action-sheet` interface can take.\n     * See the [AlertController API docs](../../alert/AlertController/#create) and the\n     * [ActionSheetController API docs](../../action-sheet/ActionSheetController/#create) for the\n     * create options for each interface.\n     */\n    selectOptions: any;\n    /**\n     * @input {string} The interface the select should use: `action-sheet`, `popover` or `alert`. Default: `alert`.\n     */\n    interface: string;\n    /**\n     * @input {string} The text to display instead of the selected option's value.\n     */\n    selectedText: string;\n    /**\n     * @input {Function} The function that will be called to compare object values\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /**\n     * @output {any} Emitted when the selection was cancelled.\n     */\n    ionCancel: EventEmitter<Select>;\n    constructor(_app: App, form: Form, config: Config, elementRef: ElementRef, renderer: Renderer, item: Item, deepLinker: DeepLinker);\n    _click(ev: UIEvent): void;\n    _keyup(): void;\n    /**\n     * @hidden\n     */\n    getValues(): any[];\n    /**\n     * Open the select interface.\n     */\n    open(ev?: UIEvent): void;\n    /**\n     * Close the select interface.\n     */\n    close(): Promise<any>;\n    /**\n     * @input {boolean} If true, the element can accept multiple values.\n     */\n    multiple: any;\n    /**\n     * @hidden\n     */\n    readonly text: string | string[];\n    /**\n     * @private\n     */\n    options: QueryList<Option>;\n    _inputShouldChange(val: string[] | string): boolean;\n    /**\n     * TODO: REMOVE THIS\n     * @hidden\n     */\n    _inputChangeEvent(): any;\n    /**\n     * @hidden\n     */\n    _updateText(): void;\n    /**\n     * @hidden\n     */\n    _inputUpdated(): void;\n}\n"]}