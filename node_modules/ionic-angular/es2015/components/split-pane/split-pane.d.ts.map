{"version":3,"file":"split-pane.d.ts","sources":["split-pane.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, NgZone, QueryList, Renderer } from '@angular/core';\nimport { Ion } from '../ion';\nimport { Config } from '../../config/config';\nimport { Platform } from '../../platform/platform';\n/**\n * @hidden\n */\nexport declare abstract class RootNode {\n    abstract getElementRef(): ElementRef;\n    abstract initPane(): boolean;\n    abstract paneChanged?(visible: boolean): void;\n}\n/**\n * @name SplitPane\n *\n * @description\n * SplitPane is a component that makes it possible to create multi-view layout.\n * Similar to iPad apps, SplitPane allows UI elements, like Menus, to be\n * displayed as the viewport increases.\n *\n * If the devices screen size is below a certain size, the SplitPane will\n * collapse and the menu will become hidden again. This is especially useful when\n * creating an app that will be served over a browser or deployed through the app\n * store to phones and tablets.\n *\n * @usage\n * To use SplitPane, simply add the component around your root component.\n * In this example, we'll be using a sidemenu layout, similar to what is\n * provided from the sidemenu starter template.\n *\n *  ```html\n *  <ion-split-pane>\n *    <!--  our side menu  -->\n *    <ion-menu [content]=\"content\">\n *      <ion-header>\n *        <ion-toolbar>\n *          <ion-title>Menu</ion-title>\n *        </ion-toolbar>\n *      </ion-header>\n *    </ion-menu>\n *\n *    <!-- the main content -->\n *    <ion-nav [root]=\"root\" main #content></ion-nav>\n *  </ion-split-pane>\n *  ```\n *\n *  Here, SplitPane will look for the element with the `main` attribute and make\n *  that the central component on larger screens. The `main` component can be any\n *  Ionic component (`ion-nav` or `ion-tabs`) except `ion-menu`.\n *\n *  ### Setting breakpoints\n *\n *  By default, SplitPane will expand when the screen is larger than 768px.\n *  If you want to customize this, use the `when` input. The `when` input can\n *  accept any valid media query, as it uses `matchMedia()` underneath.\n *\n *  ```\n *  <ion-split-pane when=\"(min-width: 475px)\">\n *\n *    <!--  our side menu  -->\n *    <ion-menu [content]=\"content\">\n *    ....\n *    </ion-menu>\n *\n *    <!-- the main content -->\n *    <ion-nav [root]=\"root\" main #content></ion-nav>\n *  </ion-split-pane>\n *  ```\n *\n *  SplitPane also provides some predefined media queries that can be used.\n *\n *  ```html\n *  <!-- could be \"xs\", \"sm\", \"md\", \"lg\", or \"xl\" -->\n *  <ion-split-pane when=\"lg\">\n *  ...\n *  </ion-split-pane>\n *  ```\n *\n *\n *  | Size | Value                 | Description                                                           |\n *  |------|-----------------------|-----------------------------------------------------------------------|\n *  | `xs` | `(min-width: 0px)`    | Show the split-pane when the min-width is 0px (meaning, always)       |\n *  | `sm` | `(min-width: 576px)`  | Show the split-pane when the min-width is 576px                       |\n *  | `md` | `(min-width: 768px)`  | Show the split-pane when the min-width is 768px (default break point) |\n *  | `lg` | `(min-width: 992px)`  | Show the split-pane when the min-width is 992px                       |\n *  | `xl` | `(min-width: 1200px)` | Show the split-pane when the min-width is 1200px                      |\n *\n *  You can also pass in boolean values that will trigger SplitPane when the value\n *  or expression evaluates to true.\n *\n *\n *  ```html\n *  <ion-split-pane [when]=\"isLarge\">\n *  ...\n *  </ion-split-pane>\n *  ```\n *\n *  ```ts\n *  class MyClass {\n *    public isLarge = false;\n *    constructor(){}\n *  }\n *  ```\n *\n *  Or\n *\n *  ```html\n *  <ion-split-pane [when]=\"shouldShow()\">\n *  ...\n *  </ion-split-pane>\n *  ```\n *\n *  ```ts\n *  class MyClass {\n *    constructor(){}\n *    shouldShow(){\n *      if(conditionA){\n *        return true\n *      } else {\n *        return false\n *      }\n *    }\n *  }\n *  ```\n *\n */\nexport declare class SplitPane extends Ion implements RootNode {\n    private _zone;\n    private _plt;\n    _init: boolean;\n    _visible: boolean;\n    _isEnabled: boolean;\n    _rmListener: any;\n    _mediaQuery: string | boolean;\n    _children: RootNode[];\n    /**\n     * @hidden\n     */\n    sideContent: RootNode;\n    /**\n     * @hidden\n     */\n    mainContent: RootNode;\n    /**\n     * @hidden\n     */\n    _setchildren: QueryList<RootNode>;\n    /**\n     * @input {string | boolean} When the split-pane should be shown.\n     * Can be a CSS media query expression, or a shortcut expression.\n     * Can also be a boolean expression.\n     */\n    when: string | boolean;\n    /**\n     * @input {boolean} If `false`, the split-pane is disabled, ie. the side pane will\n     * never be displayed. Default `true`.\n     */\n    enabled: boolean;\n    /**\n     * @output {any} Expression to be called when the split-pane visibility has changed\n     */\n    ionChange: EventEmitter<SplitPane>;\n    constructor(_zone: NgZone, _plt: Platform, config: Config, elementRef: ElementRef, renderer: Renderer);\n    /**\n     * @hidden\n     */\n    _register(node: RootNode, isMain: boolean, callback: Function): boolean;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    _update(): void;\n    /**\n     * @hidden\n     */\n    _updateChildren(): void;\n    /**\n     * @hidden\n     */\n    _setVisible(visible: boolean): void;\n    /**\n     * @hidden\n     */\n    isVisible(): boolean;\n    /**\n     * @hidden\n     */\n    setElementClass(className: string, add: boolean): void;\n    /**\n     * @hidden\n     */\n    _setPaneCSSClass(elementRef: ElementRef, isMain: boolean): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    initPane(): boolean;\n}\n"]}