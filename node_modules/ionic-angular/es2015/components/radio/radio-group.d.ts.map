{"version":3,"file":"radio-group.d.ts","sources":["radio-group.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, Renderer } from '@angular/core';\nimport { RadioButton } from './radio-button';\n/**\n * @name RadioGroup\n * @description\n * A radio group is a group of [radio buttons](../RadioButton). It allows\n * a user to select at most one radio button from a set. Checking one radio\n * button that belongs to a radio group unchecks any previous checked\n * radio button within the same group.\n *\n * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html)\n * for more information on forms and inputs.\n *\n * @usage\n * ```html\n * <ion-list radio-group [(ngModel)]=\"autoManufacturers\">\n *\n *   <ion-list-header>\n *     Auto Manufacturers\n *   </ion-list-header>\n *\n *   <ion-item>\n *     <ion-label>Cord</ion-label>\n *     <ion-radio value=\"cord\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Duesenberg</ion-label>\n *     <ion-radio value=\"duesenberg\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Hudson</ion-label>\n *     <ion-radio value=\"hudson\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Packard</ion-label>\n *     <ion-radio value=\"packard\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Studebaker</ion-label>\n *     <ion-radio value=\"studebaker\"></ion-radio>\n *   </ion-item>\n *\n * </ion-list>\n * ```\n *\n * @demo /docs/demos/src/radio/\n * @see {@link /docs/components#radio Radio Component Docs}\n * @see {@link ../RadioButton RadioButton API Docs}\n*/\nexport declare class RadioGroup {\n    private _renderer;\n    private _elementRef;\n    private _cd;\n    /**\n     * @internal\n     */\n    _disabled: boolean;\n    /**\n     * @hidden\n     */\n    _btns: RadioButton[];\n    /**\n     * @hidden\n     */\n    _fn: Function;\n    /**\n     * @hidden\n     */\n    _ids: number;\n    /**\n     * @hidden\n     */\n    _init: boolean;\n    /**\n     * @hidden\n     */\n    value: any;\n    /**\n     * @hidden\n     */\n    id: number;\n    /**\n     * @input {boolean} If true, the user cannot interact with any of the buttons in the group.\n     */\n    disabled: boolean;\n    /**\n     * @output {any} Emitted when the selected button has changed.\n     */\n    ionChange: EventEmitter<RadioGroup>;\n    constructor(_renderer: Renderer, _elementRef: ElementRef, _cd: ChangeDetectorRef);\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     */\n    writeValue(val: any): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: Function): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    _update(): void;\n    /**\n     * @hidden\n     */\n    _setActive(radioButton: RadioButton): void;\n    /**\n     * @hidden\n     */\n    add(button: RadioButton): string;\n    /**\n     * @hidden\n     */\n    remove(button: RadioButton): void;\n    /**\n     * @hidden\n     */\n    _header: any;\n    /**\n     * @hidden\n     */\n    onChange(val: any): void;\n    /**\n     * @hidden\n     */\n    onTouched(): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n"]}