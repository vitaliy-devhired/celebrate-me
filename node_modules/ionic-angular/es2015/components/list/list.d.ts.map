{"version":3,"file":"list.d.ts","sources":["list.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { DomController } from '../../platform/dom-controller';\nimport { GestureController } from '../../gestures/gesture-controller';\nimport { Ion } from '../ion';\nimport { Platform } from '../../platform/platform';\n/**\n * The List is a widely used interface element in almost any mobile app,\n * and can include content ranging from basic text all the way to\n * buttons, toggles, icons, and thumbnails.\n *\n * Both the list, which contains items, and the list items themselves\n * can be any HTML element.\n *\n * Using the List and Item components make it easy to support various\n * interaction modes such as swipe to edit, drag to reorder, and\n * removing items.\n *\n * @demo /docs/demos/src/list/\n * @see {@link /docs/components#lists List Component Docs}\n * @advanced\n *\n * Enable the sliding items.\n *\n * ```ts\n * import { Component, ViewChild } from '@angular/core';\n * import { List } from 'ionic-angular';\n *\n * @Component({...})\n * export class MyClass {\n *   @ViewChild(List) list: List;\n *\n *   constructor() { }\n *\n *   stopSliding() {\n *     this.list.enableSlidingItems(false);\n *   }\n * }\n * ```\n *\n */\nexport declare class List extends Ion {\n    private _plt;\n    private _gestureCtrl;\n    private _domCtrl;\n    private _enableSliding;\n    private _containsSlidingItems;\n    private _slidingGesture;\n    constructor(config: Config, elementRef: ElementRef, renderer: Renderer, _plt: Platform, _gestureCtrl: GestureController, _domCtrl: DomController);\n    /**\n     * @input {boolean} If true, the sliding items will be enabled.\n     */\n    sliding: boolean;\n    /**\n     * @hidden\n     */\n    containsSlidingItem(contains: boolean): void;\n    private _updateSlidingState();\n    /**\n     * Close any sliding items that are open.\n     */\n    closeSlidingItems(): void;\n    /**\n     * @hidden\n     */\n    destroy(): void;\n}\n"]}