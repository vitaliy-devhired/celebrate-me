{"version":3,"file":"icon.d.ts","sources":["icon.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\n/**\n * @name Icon\n * @description\n * Icons can be used on their own, or inside of a number of Ionic components.\n * For a full list of available icons, check out the\n * [Ionicons docs](../../../../ionicons).\n *\n * One feature of Ionicons in Ionic is when icon names are set, the actual icon\n * which is rendered can change slightly depending on the mode the app is\n * running from. For example, by setting the icon name of `alarm`, on iOS the\n * icon will automatically apply `ios-alarm`, and on Material Design it will\n * automatically apply `md-alarm`. This allows the developer to write the\n * markup once while Ionic applies the appropriate icon based on the mode.\n *\n * @usage\n * ```html\n * <!-- automatically uses the correct \"star\" icon depending on the mode -->\n * <ion-icon name=\"star\"></ion-icon>\n *\n * <!-- explicity set the icon for each mode -->\n * <ion-icon ios=\"ios-home\" md=\"md-home\"></ion-icon>\n *\n * <!-- always use the same icon, no matter what the mode -->\n * <ion-icon name=\"ios-clock\"></ion-icon>\n * <ion-icon name=\"logo-twitter\"></ion-icon>\n * ```\n *\n * @demo /docs/demos/src/icon/\n * @see {@link /docs/components#icons Icon Component Docs}\n *\n */\nexport declare class Icon extends Ion {\n    /** @hidden */\n    _iconMode: string;\n    /** @hidden */\n    _isActive: boolean;\n    /** @hidden */\n    _name: string;\n    /** @hidden */\n    _ios: string;\n    /** @hidden */\n    _md: string;\n    /** @hidden */\n    _css: string;\n    constructor(config: Config, elementRef: ElementRef, renderer: Renderer);\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @input {string} Specifies which icon to use. The appropriate icon will be used based on the mode.\n     * For more information, see [Ionicons](/docs/ionicons/).\n     */\n    name: string;\n    /**\n     * @input {string} Specifies which icon to use on `ios` mode.\n     */\n    ios: string;\n    /**\n     * @input {string} Specifies which icon to use on `md` mode.\n     */\n    md: string;\n    /**\n     * @input {boolean} If true, the icon is styled with an \"active\" appearance.\n     * An active icon is filled in, and an inactive icon is the outline of the icon.\n     * The `isActive` property is largely used by the tabbar. Only affects `ios` icons.\n     */\n    isActive: boolean;\n    /**\n     * @hidden\n     */\n    _hidden: boolean;\n    /**\n     * @hidden\n     */\n    update(): void;\n}\n"]}