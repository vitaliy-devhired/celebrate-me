{"version":3,"file":"input.d.ts","sources":["input.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ElementRef, EventEmitter, Renderer } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/takeUntil';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { Content, ContentDimensions } from '../content/content';\nimport { DomController } from '../../platform/dom-controller';\nimport { Form, IonicFormInput } from '../../util/form';\nimport { BaseInput } from '../../util/base-input';\nimport { Item } from '../item/item';\nimport { Platform } from '../../platform/platform';\n/**\n * @name Input\n * @description\n *\n * `ion-input` is meant for text type inputs only, such as `text`,\n * `password`, `email`, `number`, `search`, `tel`, and `url`. Ionic\n * still uses an actual `<input type=\"text\">` HTML element within the\n * component, however, with Ionic wrapping the native HTML input\n * element it's better able to handle the user experience and\n * interactivity.\n *\n * Similarly, `<ion-textarea>` should be used in place of `<textarea>`.\n *\n * An `ion-input` is **not** used for non-text type inputs, such as a\n * `checkbox`, `radio`, `toggle`, `range`, `select`, etc.\n *\n * Along with the blur/focus events, `input` support all standard text input\n * events like `keyup`, `keydown`, `keypress`, `input`, etc. Any standard event\n * can be attached and will function as expected. Example: `<ion-input (click)=\"someFunction()\"></ion-input>`\n *\n * @usage\n * ```html\n * <ion-list>\n *   <ion-item>\n *     <ion-label color=\"primary\">Inline Label</ion-label>\n *     <ion-input placeholder=\"Text Input\"></ion-input>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label color=\"primary\" fixed>Fixed Label</ion-label>\n *     <ion-input type=\"tel\" placeholder=\"Tel Input\"></ion-input>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-input type=\"number\" placeholder=\"Number Input with no label\"></ion-input>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label color=\"primary\" stacked>Stacked Label</ion-label>\n *     <ion-input type=\"email\" placeholder=\"Email Input\"></ion-input>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label color=\"primary\" stacked>Stacked Label</ion-label>\n *     <ion-input type=\"password\" placeholder=\"Password Input\"></ion-input>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label color=\"primary\" floating>Floating Label</ion-label>\n *     <ion-input></ion-input>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-input placeholder=\"Clear Input\" clearInput></ion-input>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-textarea placeholder=\"Enter a description\"></ion-textarea>\n *   </ion-item>\n * </ion-list>\n * ```\n *\n * @demo /docs/demos/src/input/\n */\nexport declare class TextInput extends BaseInput<string> implements IonicFormInput {\n    private _plt;\n    private _app;\n    private _content;\n    ngControl: NgControl;\n    private _dom;\n    _autoFocusAssist: string;\n    _clearInput: boolean;\n    _clearOnEdit: boolean;\n    _didBlurAfterEdit: boolean;\n    _readonly: boolean;\n    _keyboardHeight: number;\n    _type: string;\n    _scrollData: ScrollData;\n    _isTextarea: boolean;\n    _onDestroy: Subject<void>;\n    _coord: any;\n    _isTouch: boolean;\n    _useAssist: boolean;\n    _relocated: boolean;\n    /**\n     * @input {boolean} If true, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n     */\n    clearInput: any;\n    /**\n     * @input {string} The type of control to display. The default type is text.\n     * Possible values are: `\"text\"`, `\"password\"`, `\"email\"`, `\"number\"`, `\"search\"`, `\"tel\"`, or `\"url\"`.\n     */\n    type: any;\n    /**\n     * @input {boolean} If true, the user cannot modify the value.\n     */\n    readonly: boolean;\n    /**\n     * @input {boolean} If true, the value will be cleared after focus upon edit.\n     * Defaults to `true` when `type` is `\"password\"`, `false` for all other types.\n     */\n    clearOnEdit: any;\n    /**\n     * @hidden\n     */\n    _native: ElementRef;\n    /**\n     * @input {string} Set the input's autocomplete property. Values: `\"on\"`, `\"off\"`. Default `\"off\"`.\n     */\n    autocomplete: string;\n    /**\n     * @input {string} Set the input's autocorrect property. Values: `\"on\"`, `\"off\"`. Default `\"off\"`.\n     */\n    autocorrect: string;\n    /**\n     * @input {string} Instructional text that shows before the input has a value.\n     */\n    placeholder: string;\n    /**\n     * @input {any} The minimum value, which must not be greater than its maximum (max attribute) value.\n     */\n    min: number | string;\n    /**\n     * @input {any} The maximum value, which must not be less than its minimum (min attribute) value.\n     */\n    max: number | string;\n    /**\n     * @input {any} Works with the min and max attributes to limit the increments at which a value can be set.\n     */\n    step: number | string;\n    /**\n     * @hidden\n     */\n    input: EventEmitter<UIEvent>;\n    /**\n     * @hidden\n     */\n    blur: EventEmitter<UIEvent>;\n    /**\n     * @hidden\n     */\n    focus: EventEmitter<UIEvent>;\n    constructor(config: Config, _plt: Platform, _form: Form, _app: App, elementRef: ElementRef, renderer: Renderer, _content: Content, _item: Item, ngControl: NgControl, _dom: DomController);\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    initFocus(): void;\n    /**\n     * @hidden\n     */\n    setFocus(): void;\n    /**\n     * @hidden\n     */\n    setBlur(): void;\n    /**\n     * @hidden\n     */\n    onInput(ev: any): void;\n    /**\n     * @hidden\n     */\n    onBlur(ev: UIEvent): void;\n    /**\n     * @hidden\n     */\n    onFocus(ev: UIEvent): void;\n    /**\n     * @hidden\n     */\n    onKeydown(ev: any): void;\n    /**\n     * @hidden\n     */\n    _inputUpdated(): void;\n    /**\n     * @hidden\n     */\n    clearTextInput(): void;\n    /**\n    * Check if we need to clear the text input if clearOnEdit is enabled\n    * @hidden\n    */\n    checkClearOnEdit(_: string): void;\n    _getScrollData(): ScrollData;\n    _relocateInput(shouldRelocate: boolean): void;\n    _enableScrollPadding(): void;\n    _enableHideCaretOnScroll(): void;\n    _enableScrollMove(): void;\n    _pointerStart(ev: UIEvent): void;\n    _pointerEnd(ev: UIEvent): void;\n    _jsSetFocus(): void;\n}\n/**\n * @hidden\n */\nexport declare function getScrollData(inputOffsetTop: number, inputOffsetHeight: number, scrollViewDimensions: ContentDimensions, keyboardHeight: number, plaformHeight: number): ScrollData;\nexport interface ScrollData {\n    scrollAmount: number;\n    scrollTo: number;\n    scrollPadding: number;\n    scrollDuration: number;\n    inputSafeY: number;\n}\n"]}