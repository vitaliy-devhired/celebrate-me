{"version":3,"file":"datetime.d.ts","sources":["datetime.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, Renderer } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Config } from '../../config/config';\nimport { Picker } from '../picker/picker';\nimport { PickerController } from '../picker/picker-controller';\nimport { Form } from '../../util/form';\nimport { BaseInput } from '../../util/base-input';\nimport { Item } from '../item/item';\nimport { DateTimeData, LocaleData } from '../../util/datetime-util';\n/**\n * @name DateTime\n * @description\n * The DateTime component is used to present an interface which makes it easy for\n * users to select dates and times. Tapping on `<ion-datetime>` will display a picker\n * interface that slides up from the bottom of the page. The picker then displays\n * scrollable columns that can be used to individually select years, months, days,\n * hours and minute values. The DateTime component is similar to the native\n * `<input type=\"datetime-local\">` element, however, Ionic's DateTime component makes\n * it easy to display the date and time in a preferred format, and manage the datetime\n * values.\n *\n * ```html\n * <ion-item>\n *   <ion-label>Date</ion-label>\n *   <ion-datetime displayFormat=\"MM/DD/YYYY\" [(ngModel)]=\"myDate\"></ion-datetime>\n * </ion-item>\n * ```\n *\n *\n * ## Display and Picker Formats\n *\n * The DateTime component displays the values in two places: in the `<ion-datetime>`\n * component, and in the interface that is presented from the bottom of the screen.\n * The following chart lists all of the formats that can be used.\n *\n * | Format  | Description                    | Example                 |\n * |---------|--------------------------------|-------------------------|\n * | `YYYY`  | Year, 4 digits                 | `2018`                  |\n * | `YY`    | Year, 2 digits                 | `18`                    |\n * | `M`     | Month                          | `1` ... `12`            |\n * | `MM`    | Month, leading zero            | `01` ... `12`           |\n * | `MMM`   | Month, short name              | `Jan`                   |\n * | `MMMM`  | Month, full name               | `January`               |\n * | `D`     | Day                            | `1` ... `31`            |\n * | `DD`    | Day, leading zero              | `01` ... `31`           |\n * | `DDD`   | Day, short name                | `Fri`                   |\n * | `DDDD`  | Day, full name                 | `Friday`                |\n * | `H`     | Hour, 24-hour                  | `0` ... `23`            |\n * | `HH`    | Hour, 24-hour, leading zero    | `00` ... `23`           |\n * | `h`     | Hour, 12-hour                  | `1` ... `12`            |\n * | `hh`    | Hour, 12-hour, leading zero    | `01` ... `12`           |\n * | `a`     | 12-hour time period, lowercase | `am` `pm`               |\n * | `A`     | 12-hour time period, uppercase | `AM` `PM`               |\n * | `m`     | Minute                         | `1` ... `59`            |\n * | `mm`    | Minute, leading zero           | `01` ... `59`           |\n * | `s`     | Second                         | `1` ... `59`            |\n * | `ss`    | Second, leading zero           | `01` ... `59`           |\n * | `Z`     | UTC Timezone Offset            | `Z or +HH:mm or -HH:mm` |\n *\n * **Important**: See the [Month Names and Day of the Week Names](#month-names-and-day-of-the-week-names)\n * section below on how to use different names for the month and day.\n *\n * ### Display Format\n *\n * The `displayFormat` input property specifies how a datetime's value should be\n * printed, as formatted text, within the `ion-datetime` component.\n *\n * In the following example, the display in the `<ion-datetime>` will use the\n * month's short name, the numerical day with a leading zero, a comma and the\n * four-digit year. In addition to the date, it will display the time with the hours\n * in the 24-hour format and the minutes. Any character can be used as a separator.\n * An example display using this format is: `Jun 17, 2005 11:06`.\n *\n * ```html\n * <ion-item>\n *   <ion-label>Date</ion-label>\n *   <ion-datetime displayFormat=\"MMM DD, YYYY HH:mm\" [(ngModel)]=\"myDate\"></ion-datetime>\n * </ion-item>\n * ```\n *\n * ### Picker Format\n *\n * The `pickerFormat` input property determines which columns should be shown in the\n * interface, the order of the columns, and which format to use within each column.\n * If the `pickerFormat` input is not provided then it will default to the `displayFormat`.\n *\n * In the following example, the display in the `<ion-datetime>` will use the\n * `MM/YYYY` format, such as `06/2020`. However, the picker interface\n * will display two columns with the month's long name, and the four-digit year.\n *\n * ```html\n * <ion-item>\n *   <ion-label>Date</ion-label>\n *   <ion-datetime displayFormat=\"MM/YYYY\" pickerFormat=\"MMMM YYYY\" [(ngModel)]=\"myDate\"></ion-datetime>\n * </ion-item>\n * ```\n *\n * ### Datetime Data\n *\n * Historically, handling datetime values within JavaScript, or even within HTML\n * inputs, has always been a challenge. Specifically, JavaScript's `Date` object is\n * notoriously difficult to correctly parse apart datetime strings or to format\n * datetime values. Even worse is how different browsers and JavaScript versions\n * parse various datetime strings differently, especially per locale.\n *\n * But no worries, all is not lost! Ionic's datetime input has been designed so\n * developers can avoid the common pitfalls, allowing developers to easily format\n * datetime values within the input, and give the user a simple datetime picker for a\n * great user experience.\n *\n * ##### ISO 8601 Datetime Format: YYYY-MM-DDTHH:mmZ\n *\n * Ionic uses the [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime)\n * for its value. The value is simply a string, rather than using JavaScript's `Date`\n * object. Additionally, when using the ISO datetime format, it makes it easier\n * to serialize and pass within JSON objects, and sending databases a standardized\n * format which it can be easily parsed if need be.\n *\n * To create an ISO datetime string for the current date and time, e.g. use `const currentDate = (new Date()).toISOString();`.\n *\n * An ISO format can be used as a simple year, or just the hour and minute, or get more\n * detailed down to the millisecond and timezone. Any of the ISO formats below can be used,\n * and after a user selects a new value, Ionic will continue to use the same ISO format\n * which datetime value was originally given as.\n *\n * | Description          | Format                 | Datetime Value Example       |\n * |----------------------|------------------------|------------------------------|\n * | Year                 | YYYY                   | 1994                         |\n * | Year and Month       | YYYY-MM                | 1994-12                      |\n * | Complete Date        | YYYY-MM-DD             | 1994-12-15                   |\n * | Date and Time        | YYYY-MM-DDTHH:mm       | 1994-12-15T13:47             |\n * | UTC Timezone         | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789Z     |\n * | Timezone Offset      | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789+5:00 |\n * | Hour and Minute      | HH:mm                  | 13:47                        |\n * | Hour, Minute, Second | HH:mm:ss               | 13:47:20                     |\n *\n * Note that the year is always four-digits, milliseconds (if it's added) is always\n * three-digits, and all others are always two-digits. So the number representing\n * January always has a leading zero, such as `01`. Additionally, the hour is always\n * in the 24-hour format, so `00` is `12am` on a 12-hour clock, `13` means `1pm`,\n * and `23` means `11pm`.\n *\n * It's also important to note that neither the `displayFormat` or `pickerFormat` can\n * set the datetime value's output, which is the value that is set by the component's\n * `ngModel`. The format's are merely for displaying the value as text and the picker's\n * interface, but the datetime's value is always persisted as a valid ISO 8601 datetime\n * string.\n *\n *\n * ## Min and Max Datetimes\n *\n * Dates are infinite in either direction, so for a user's selection there should be at\n * least some form of restricting the dates that can be selected. By default, the maximum\n * date is to the end of the current year, and the minimum date is from the beginning\n * of the year that was 100 years ago.\n *\n * To customize the minimum and maximum datetime values, the `min` and `max` component\n * inputs can be provided which may make more sense for the app's use-case, rather\n * than the default of the last 100 years. Following the same IS0 8601 format listed\n * in the table above, each component can restrict which dates can be selected by the\n * user. Below is an example of restricting the date selection between the beginning\n * of 2016, and October 31st of 2020:\n *\n * ```html\n * <ion-item>\n *   <ion-label>Date</ion-label>\n *   <ion-datetime displayFormat=\"MMMM YYYY\" min=\"2016\" max=\"2020-10-31\" [(ngModel)]=\"myDate\">\n *   </ion-datetime>\n * </ion-item>\n * ```\n *\n *\n * ## Month Names and Day of the Week Names\n *\n * At this time, there is no one-size-fits-all standard to automatically choose the correct\n * language/spelling for a month name, or day of the week name, depending on the language\n * or locale. Good news is that there is an\n * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)\n * standard which *most* browsers have adopted. However, at this time the standard has not\n * been fully implemented by all popular browsers so Ionic is unavailable to take advantage\n * of it *yet*. Additionally, Angular also provides an internationalization service, but it\n * is still under heavy development so Ionic does not depend on it at this time.\n *\n * All things considered, the by far easiest solution is to just provide an array of names\n * if the app needs to use names other than the default English version of month and day\n * names. The month names and day names can be either configured at the app level, or\n * individual `ion-datetime` level.\n *\n * ### App Config Level\n *\n * ```ts\n * //app.module.ts\n * @NgModule({\n * ...,\n * imports: [\n *   IonicModule.forRoot(MyApp, {\n *   monthNames: ['janeiro', 'fevereiro', 'mar\\u00e7o', ... ],\n *   monthShortNames: ['jan', 'fev', 'mar', ... ],\n *   dayNames: ['domingo', 'segunda-feira', 'ter\\u00e7a-feira', ... ],\n *   dayShortNames: ['dom', 'seg', 'ter', ... ],\n * })\n * ],\n * ...\n * })\n * ```\n *\n * ### Component Input Level\n *\n * ```html\n * <ion-item>\n *   <ion-label>Período</ion-label>\n *   <ion-datetime displayFormat=\"DDDD MMM D, YYYY\" [(ngModel)]=\"myDate\"\n *     monthNames=\"janeiro, fevereiro, mar\\u00e7o, ...\"\n *     monthShortNames=\"jan, fev, mar, ...\"\n *     dayNames=\"domingo, segunda-feira, ter\\u00e7a-feira, ...\"\n *     dayShortNames=\"dom, seg, ter, ...\"></ion-datetime>\n * </ion-item>\n * ```\n *\n *\n * ### Advanced Datetime Validation and Manipulation\n *\n * The datetime picker provides the simplicity of selecting an exact format, and persists\n * the datetime values as a string using the standardized\n * [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime).\n * However, it's important to note that `ion-datetime` does not attempt to solve all\n * situtations when validating and manipulating datetime values. If datetime values need\n * to be parsed from a certain format, or manipulated (such as adding 5 days to a date,\n * subtracting 30 minutes, etc.), or even formatting data to a specific locale, then we highly\n * recommend using [moment.js](http://momentjs.com/) to \"Parse, validate, manipulate, and\n * display dates in JavaScript\". [Moment.js](http://momentjs.com/) has quickly become\n * our goto standard when dealing with datetimes within JavaScript, but Ionic does not\n * prepackage this dependency since most apps will not require it, and its locale\n * configuration should be decided by the end-developer.\n *\n *\n * @usage\n * ```html\n * <ion-item>\n *   <ion-label>Date</ion-label>\n *   <ion-datetime displayFormat=\"MM/DD/YYYY\" [(ngModel)]=\"myDate\">\n *   </ion-datetime>\n * </ion-item>\n * ```\n *\n *\n * @demo /docs/demos/src/datetime/\n */\nexport declare class DateTime extends BaseInput<DateTimeData> implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    private _pickerCtrl;\n    _text: string;\n    _min: DateTimeData;\n    _max: DateTimeData;\n    _locale: LocaleData;\n    _picker: Picker;\n    /**\n     * @input {string} The minimum datetime allowed. Value must be a date string\n     * following the\n     * [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\n     * such as `1996-12-19`. The format does not have to be specific to an exact\n     * datetime. For example, the minimum could just be the year, such as `1994`.\n     * Defaults to the beginning of the year, 100 years ago from today.\n     */\n    min: string;\n    /**\n     * @input {string} The maximum datetime allowed. Value must be a date string\n     * following the\n     * [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\n     * `1996-12-19`. The format does not have to be specific to an exact\n     * datetime. For example, the maximum could just be the year, such as `1994`.\n     * Defaults to the end of this year.\n     */\n    max: string;\n    /**\n     * @input {string} The display format of the date and time as text that shows\n     * within the item. When the `pickerFormat` input is not used, then the\n     * `displayFormat` is used for both display the formatted text, and determining\n     * the datetime picker's columns. See the `pickerFormat` input description for\n     * more info. Defaults to `MMM D, YYYY`.\n     */\n    displayFormat: string;\n    /**\n     * @input {string} The default datetime selected in picker modal if field value is empty.\n     * Value must be a date string following the\n     * [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\n     * `1996-12-19`.\n     */\n    initialValue: string;\n    /**\n     * @input {string} The format of the date and time picker columns the user selects.\n     * A datetime input can have one or many datetime parts, each getting their\n     * own column which allow individual selection of that particular datetime part. For\n     * example, year and month columns are two individually selectable columns which help\n     * choose an exact date from the datetime picker. Each column follows the string\n     * parse format. Defaults to use `displayFormat`.\n     */\n    pickerFormat: string;\n    /**\n     * @input {string} The text to display on the picker's cancel button. Default: `Cancel`.\n     */\n    cancelText: string;\n    /**\n     * @input {string} The text to display on the picker's \"Done\" button. Default: `Done`.\n     */\n    doneText: string;\n    /**\n     * @input {array | string} Values used to create the list of selectable years. By default\n     * the year values range between the `min` and `max` datetime inputs. However, to\n     * control exactly which years to display, the `yearValues` input can take either an array\n     * of numbers, or string of comma separated numbers. For example, to show upcoming and\n     * recent leap years, then this input's value would be `yearValues=\"2024,2020,2016,2012,2008\"`.\n     */\n    yearValues: any;\n    /**\n     * @input {array | string} Values used to create the list of selectable months. By default\n     * the month values range from `1` to `12`. However, to control exactly which months to\n     * display, the `monthValues` input can take either an array of numbers, or string of\n     * comma separated numbers. For example, if only summer months should be shown, then this\n     * input value would be `monthValues=\"6,7,8\"`. Note that month numbers do *not* have a\n     * zero-based index, meaning January's value is `1`, and December's is `12`.\n     */\n    monthValues: any;\n    /**\n     * @input {array | string} Values used to create the list of selectable days. By default\n     * every day is shown for the given month. However, to control exactly which days of\n     * the month to display, the `dayValues` input can take either an array of numbers, or\n     * string of comma separated numbers. Note that even if the array days have an invalid\n     * number for the selected month, like `31` in February, it will correctly not show\n     * days which are not valid for the selected month.\n     */\n    dayValues: any;\n    /**\n     * @input {array | string} Values used to create the list of selectable hours. By default\n     * the hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However,\n     * to control exactly which hours to display, the `hourValues` input can take either an\n     * array of numbers, or string of comma separated numbers.\n     */\n    hourValues: any;\n    /**\n     * @input {array | string} Values used to create the list of selectable minutes. By default\n     * the mintues range from `0` to `59`. However, to control exactly which minutes to display,\n     * the `minuteValues` input can take either an array of numbers, or string of comma separated\n     * numbers. For example, if the minute selections should only be every 15 minutes, then\n     * this input value would be `minuteValues=\"0,15,30,45\"`.\n     */\n    minuteValues: any;\n    /**\n     * @input {array} Full names for each month name. This can be used to provide\n     * locale month names. Defaults to English.\n     */\n    monthNames: any;\n    /**\n     * @input {array} Short abbreviated names for each month name. This can be used to provide\n     * locale month names. Defaults to English.\n     */\n    monthShortNames: any;\n    /**\n     * @input {array} Full day of the week names. This can be used to provide\n     * locale names for each day in the week. Defaults to English.\n     */\n    dayNames: any;\n    /**\n     * @input {array} Short abbreviated day of the week names. This can be used to provide\n     * locale names for each day in the week. Defaults to English.\n     */\n    dayShortNames: any;\n    /**\n     * @input {any} Any additional options that the picker interface can accept.\n     * See the [Picker API docs](../../picker/Picker) for the picker options.\n     */\n    pickerOptions: any;\n    /**\n     * @input {string} The text to display when there's no date selected yet.\n     * Using lowercase to match the input attribute\n     */\n    placeholder: string;\n    /**\n     * @output {any} Emitted when the datetime selection was cancelled.\n     */\n    ionCancel: EventEmitter<any>;\n    constructor(form: Form, config: Config, elementRef: ElementRef, renderer: Renderer, item: Item, _pickerCtrl: PickerController);\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     */\n    _inputNormalize(val: any): DateTimeData;\n    /**\n     * @hidden\n     */\n    _inputUpdated(): void;\n    /**\n     * @hidden\n     */\n    _inputShouldChange(): boolean;\n    /**\n     * TODO: REMOVE THIS\n     * @hidden\n     */\n    _inputChangeEvent(): any;\n    /**\n     * @hidden\n     */\n    _inputNgModelEvent(): any;\n    _click(ev: UIEvent): void;\n    _keyup(): void;\n    /**\n     * @hidden\n     */\n    open(): void;\n    /**\n     * @hidden\n     */\n    generate(): void;\n    /**\n     * @hidden\n     */\n    validateColumn(name: string, index: number, min: number, max: number, lowerBounds: number[], upperBounds: number[]): number;\n    /**\n     * @private\n     */\n    validate(): void;\n    /**\n     * @hidden\n     */\n    divyColumns(): void;\n    /**\n     * @hidden\n     */\n    updateText(): void;\n    /**\n     * @hidden\n     */\n    getValue(): DateTimeData;\n    /**\n     * @hidden\n     */\n    getValueOrDefault(): DateTimeData;\n    /**\n     * Get the default value as a date string\n     * @hidden\n     */\n    getDefaultValueDateString(): string;\n    /**\n     * @hidden\n     */\n    hasValue(): boolean;\n    /**\n     * @hidden\n     */\n    calcMinMax(now?: Date): void;\n}\n"]}