{"version":3,"file":"button.d.ts","sources":["button.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\n/**\n  * @name Button\n  * @module ionic\n  * @description\n  * Buttons are simple components in Ionic. They can consist of text and icons\n  * and be enhanced by a wide range of attributes.\n  *\n  * @usage\n  *\n  * ```html\n  *\n  *  <!-- Colors -->\n  *  <button ion-button>Default</button>\n  *\n  *  <button ion-button color=\"secondary\">Secondary</button>\n  *\n  *  <button ion-button color=\"danger\">Danger</button>\n  *\n  *  <button ion-button color=\"light\">Light</button>\n  *\n  *  <button ion-button color=\"dark\">Dark</button>\n  *\n  *  <!-- Shapes -->\n  *  <button ion-button full>Full Button</button>\n  *\n  *  <button ion-button block>Block Button</button>\n  *\n  *  <button ion-button round>Round Button</button>\n  *\n  *  <!-- Outline -->\n  *  <button ion-button full outline>Outline + Full</button>\n  *\n  *  <button ion-button block outline>Outline + Block</button>\n  *\n  *  <button ion-button round outline>Outline + Round</button>\n  *\n  *  <!-- Icons -->\n  *  <button ion-button icon-start>\n  *    <ion-icon name=\"star\"></ion-icon>\n  *    Left Icon\n  *  </button>\n  *\n  *  <button ion-button icon-end>\n  *    Right Icon\n  *    <ion-icon name=\"star\"></ion-icon>\n  *  </button>\n  *\n  *  <button ion-button icon-only>\n  *    <ion-icon name=\"star\"></ion-icon>\n  *  </button>\n  *\n  *  <!-- Sizes -->\n  *  <button ion-button large>Large</button>\n  *\n  *  <button ion-button>Default</button>\n  *\n  *  <button ion-button small>Small</button>\n  * ```\n  *\n  * @advanced\n  *\n  * ```html\n  *\n  * <!-- Bind the color and outline inputs to an expression -->\n  * <button ion-button [color]=\"isDanger ? 'danger' : 'primary'\" [outline]=\"isOutline\">\n  *   Danger (Solid)\n  * </button>\n  *\n  * <!-- Bind the color and round inputs to an expression -->\n  * <button ion-button [color]=\"myColor\" [round]=\"isRound\">\n  *   Secondary (Round)\n  * </button>\n  *\n  * <!-- Bind the color and clear inputs to an expression -->\n  * <button ion-button [color]=\"isSecondary ? 'secondary' : 'primary'\"  [clear]=\"isClear\">\n  *   Primary (Clear)\n  * </button>\n  *\n  * <!-- Bind the color, outline and round inputs to an expression -->\n  * <button ion-button [color]=\"myColor2\" [outline]=\"isOutline\" [round]=\"isRound\">\n  *   Dark (Solid + Round)\n  * </button>\n  *\n  * <!-- Bind the click event to a method -->\n  * <button ion-button (click)=\"logEvent($event)\">\n  *   Click me!\n  * </button>\n  * ```\n  *\n  * ```ts\n  * @Component({\n  *   templateUrl: 'main.html'\n  * })\n  * class E2EPage {\n  *   isDanger: boolean = true;\n  *   isSecondary: boolean = false;\n  *   isRound: boolean = true;\n  *   isOutline: boolean = false;\n  *   isClear: boolean = true;\n  *   myColor: string = 'secondary';\n  *   myColor2: string = 'dark';\n  *\n  *   logEvent(event) {\n  *     console.log(event)\n  *   }\n  * }\n  *\n  * ```\n  *\n  * @demo /docs/demos/src/button/\n  * @see {@link /docs/components#buttons Button Component Docs}\n  * @see {@link /docs/components#fabs FabButton Docs}\n  * @see {@link ../../fab/FabButton FabButton API Docs}\n  * @see {@link ../../fab/FabContainer FabContainer API Docs}\n */\nexport declare class Button extends Ion {\n    /** @hidden */\n    _role: string;\n    /** @hidden */\n    _size: string;\n    /** @hidden */\n    _style: string;\n    /** @hidden */\n    _shape: string;\n    /** @hidden */\n    _display: string;\n    /** @hidden */\n    _decorator: string;\n    /** @hidden */\n    _init: boolean;\n    /**\n     * @input {boolean} If true, activates the large button size.\n     */\n    large: boolean;\n    /**\n     * @input {boolean} If true, activates the small button size.\n     */\n    small: boolean;\n    /**\n     * @input {boolean} If true, activates the default button size. Normally the default, useful for buttons in an item.\n     */\n    default: boolean;\n    /**\n     * @input {boolean} If true, activates a transparent button style with a border.\n     */\n    outline: boolean;\n    /**\n     * @input {boolean} If true, activates a transparent button style without a border.\n     */\n    clear: boolean;\n    /**\n     * @input {boolean} If true, activates a solid button style. Normally the default, useful for buttons in a toolbar.\n     */\n    solid: boolean;\n    /**\n     * @input {boolean} If true, activates a button with rounded corners.\n     */\n    round: boolean;\n    /**\n     * @input {boolean} If true, activates a button style that fills the available width.\n     */\n    block: boolean;\n    /**\n     * @input {boolean} If true, activates a button style that fills the available width without\n     * a left and right border.\n     */\n    full: boolean;\n    /**\n     * @input {boolean} If true, activates a button with a heavier font weight.\n     */\n    strong: boolean;\n    /**\n     * @input {string} The mode determines which platform styles to use.\n     * Possible values are: `\"ios\"`, `\"md\"`, or `\"wp\"`.\n     * For more information, see [Platform Styles](/docs/theming/platform-specific-styles).\n     */\n    mode: string;\n    /** @hidden */\n    _attr(type: string, attrName: string, attrValue: boolean): void;\n    /**\n     * @input {string} The color to use from your Sass `$colors` map.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"danger\"`, `\"light\"`, and `\"dark\"`.\n     * For more information, see [Theming your App](/docs/theming/theming-your-app).\n     */\n    color: string;\n    constructor(ionButton: string, config: Config, elementRef: ElementRef, renderer: Renderer);\n    /** @hidden */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     */\n    setRole(val: string): void;\n    /**\n     * @hidden\n     */\n    _assignCss(assignCssClass: boolean): void;\n    /**\n     * @hidden\n     */\n    _setClass(type: string, assignCssClass: boolean): void;\n    /**\n     * @hidden\n     */\n    _updateColor(color: string, isAdd: boolean): void;\n}\n"]}