{"version":3,"file":"slides.d.ts","sources":["slides.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, NgZone, Renderer } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\nimport { Platform } from '../../platform/platform';\nimport { SlideContainer, SlideElement, SlideTouchEvents, SlideTouches, SlideZoom } from './swiper/swiper-interfaces';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @name Slides\n * @description\n * The Slides component is a multi-section container. Each section can be swiped\n * or dragged between. It contains any number of [Slide](../Slide) components.\n *\n *\n * ### Creating\n * You should use a template to create slides and listen to slide events. The template\n * should contain the slide container, an `<ion-slides>` element, and any number of\n * [Slide](../Slide) components, written as `<ion-slide>`. Basic configuration\n * values can be set as input properties, which are listed below. Slides events\n * can also be listened to such as the slide changing by placing the event on the\n * `<ion-slides>` element. See [Usage](#usage) below for more information.\n *\n *\n * ### Navigating\n * After creating and configuring the slides, you can navigate between them\n * by swiping or calling methods on the `Slides` instance. You can call `slideTo()` to\n * navigate to a specific slide, or `slideNext()` to change to the slide that follows\n * the active slide. All of the [methods](#instance-members) provided by the `Slides`\n * instance are listed below. See [Usage](#usage) below for more information on\n * navigating between slides.\n *\n *\n * @usage\n *\n * You can add slides to a `@Component` using the following template:\n *\n * ```html\n * <ion-slides>\n *   <ion-slide>\n *     <h1>Slide 1</h1>\n *   </ion-slide>\n *   <ion-slide>\n *     <h1>Slide 2</h1>\n *   </ion-slide>\n *   <ion-slide>\n *     <h1>Slide 3</h1>\n *   </ion-slide>\n * </ion-slides>\n * ```\n *\n * Next, we can use `ViewChild` to assign the Slides instance to\n * your `slides` property. Now we can call any of the `Slides`\n * [methods](#instance-members), for example we can use the Slide's\n * `slideTo()` method in order to navigate to a specific slide on\n * a button click. Below we call the `goToSlide()` method and it\n * navigates to the 3rd slide:\n *\n * ```ts\n * import { ViewChild } from '@angular/core';\n * import { Slides } from 'ionic-angular';\n *\n * class MyPage {\n *   @ViewChild(Slides) slides: Slides;\n *\n *   goToSlide() {\n *     this.slides.slideTo(2, 500);\n *   }\n * }\n * ```\n *\n * We can also add events to listen to on the `<ion-slides>` element.\n * Let's add the `ionSlideDidChange` event and call a method when the slide changes:\n *\n * ```html\n * <ion-slides (ionSlideDidChange)=\"slideChanged()\">\n * ```\n *\n * In our class, we add the `slideChanged()` method which gets the active\n * index and prints it:\n *\n * ```ts\n * class MyPage {\n *   ...\n *\n *   slideChanged() {\n *     let currentIndex = this.slides.getActiveIndex();\n *     console.log('Current index is', currentIndex);\n *   }\n * }\n * ```\n *\n * ### Zooming\n * If your slides contain images, you can enable zooming on them by setting `zoom=\"true\" and\n * wrapping each image in a `div` with the class `swiper-zoom-container`. Zoom supports\n * `img`, `svg`, `canvas`, and `ion-img`.\n *\n * ```html\n * <ion-slides zoom=\"true\">\n *   <ion-slide>\n *     <div class=\"swiper-zoom-container\">\n *       <img src=\"assets/img/dog.jpg\">\n *     </div>\n *     <ion-label>Woof</ion-label>\n *   </ion-slide>\n *   <ion-slide>\n *     <div class=\"swiper-zoom-container\">\n *       <img src=\"assets/img/cat.jpg\">\n *     </div>\n *     <ion-label>Meow</ion-label>\n *   </ion-slide>\n *   <ion-slide>\n *     <div class=\"swiper-zoom-container\">\n *       <img src=\"assets/img/fish.jpg\">\n *     </div>\n *     <ion-label>Just keep swimming</ion-label>\n *   </ion-slide>\n * </ion-slides>\n * ```\n *\n * @advanced\n *\n * There are several options available to create customized slides. Ionic exposes\n * the most commonly used options as [inputs](http://learnangular2.com/inputs/).\n * In order to use an option that isn't exposed as an input the following code\n * should be used, where `freeMode` is the option to change:\n *\n * ```ts\n * import { ViewChild } from '@angular/core';\n * import { Slides } from 'ionic-angular';\n\n * class MyPage {\n *   @ViewChild(Slides) slides: Slides;\n *\n *   ngAfterViewInit() {\n *     this.slides.freeMode = true;\n *   }\n * }\n *\n * ```\n *\n * To see all of the available options, take a look at the\n * [source for slides](https://github.com/ionic-team/ionic/blob/v3/src/components/slides/slides.ts).\n *\n * @demo /docs/demos/src/slides/\n * @see {@link /docs/components#slides Slides Component Docs}\n *\n * Adopted from Swiper.js:\n * The most modern mobile touch slider and framework with\n * hardware accelerated transitions.\n *\n * http://www.idangero.us/swiper/\n *\n * Copyright 2016, Vladimir Kharlampidi\n * The iDangero.us\n * http://www.idangero.us/\n *\n * Licensed under MIT\n */\nexport declare class Slides extends Ion {\n    private _plt;\n    /**\n     * @input {number} Delay between transitions (in milliseconds). If this\n     * parameter is not passed, autoplay is disabled. Default does\n     * not have a value and does not autoplay.\n     * Default: `null`.\n     */\n    autoplay: any;\n    private _autoplayMs;\n    /**\n     * @input {Slides} Pass another Slides instance or array of Slides instances\n     * that should be controlled by this Slides instance.\n     * Default: `null`.\n     */\n    control: Slides | Slides[];\n    private _control;\n    /**\n     * @input {string} The animation effect of the slides.\n     * Possible values are: `slide`, `fade`, `cube`, `coverflow` or `flip`.\n     * Default: `slide`.\n     */\n    effect: string;\n    private _effectName;\n    /**\n     * @input {string}  Swipe direction: 'horizontal' or 'vertical'.\n     * Default: `horizontal`.\n     */\n    direction: string;\n    private _direction;\n    /**\n     * @input {number}  Index number of initial slide. Default: `0`.\n     */\n    initialSlide: any;\n    private _initialSlide;\n    /**\n     * @input {boolean} If true, continuously loop from the last slide to the\n     * first slide.\n     */\n    loop: boolean;\n    private _isLoop;\n    /**\n     * @input {boolean}  If true, show the pager.\n     */\n    pager: boolean;\n    private _pager;\n    /**\n     * @input {string} If dir attribute is equal to rtl, set interal _rtl to true;\n     */\n    dir: string;\n    /**\n     * @input {string}  Type of pagination. Possible values are:\n     * `bullets`, `fraction`, `progress`. Default: `bullets`.\n     * (Note that the pager will not show unless `pager` input\n     * is set to true).\n     */\n    paginationType: string;\n    private _paginationType;\n    /** @hidden */\n    paginationBulletRender: (index?: number, cssClass?: string) => void;\n    /**\n     * @input {boolean} If true, allows you to use \"parallaxed\" elements inside of\n     * slider.\n     */\n    parallax: boolean;\n    private _isParallax;\n    /**\n     * @input {number} Duration of transition between slides\n     * (in milliseconds). Default: `300`.\n     */\n    speed: any;\n    private _speedMs;\n    /**\n     * @input {boolean} If true, enables zooming functionality.\n     */\n    zoom: boolean;\n    private _isZoom;\n    /**\n     * @hidden\n     * Height of container.\n     */\n    height: number;\n    /**\n     * @hidden\n     * Width of container.\n     */\n    width: number;\n    /**\n     * @hidden\n     * Enabled this option and swiper will be operated as usual except it will\n     * not move, real translate values on wrapper will not be set. Useful when\n     * you may need to create custom slide transition.\n     */\n    virtualTranslate: boolean;\n    /**\n     * @hidden\n     * Set to true to round values of slides width and height to prevent blurry\n     * texts on usual resolution screens (if you have such)\n     */\n    roundLengths: boolean;\n    /**\n     * @input {number} Distance between slides in px. Default: `0`.\n     */\n    spaceBetween: any;\n    private _spaceBetween;\n    /**\n     * @input {number} Slides per view. Slides visible at the same time. Default: `1`.\n     */\n    slidesPerView: any;\n    private _slidesPerView;\n    /**\n     * @input {boolean} Center a slide in the middle of the screen.\n     */\n    centeredSlides: boolean;\n    private _centeredSlides;\n    /**\n     * @hidden\n     */\n    slidesPerColumn: number;\n    /**\n     * @hidden\n     */\n    slidesPerColumnFill: string;\n    /**\n     * @hidden\n     */\n    slidesPerGroup: number;\n    /**\n     * @hidden\n     */\n    slidesOffsetBefore: number;\n    /**\n     * @hidden\n     */\n    slidesOffsetAfter: number;\n    /**\n     * @hidden\n     */\n    touchEventsTarget: 'container';\n    /**\n     * @hidden\n     */\n    autoplayDisableOnInteraction: boolean;\n    /**\n     * @hidden\n     */\n    autoplayStopOnLast: boolean;\n    /**\n     * @hidden\n     */\n    freeMode: boolean;\n    /**\n     * @hidden\n     */\n    freeModeMomentum: boolean;\n    /**\n     * @hidden\n     */\n    freeModeMomentumRatio: number;\n    /**\n     * @hidden\n     */\n    freeModeMomentumBounce: boolean;\n    /**\n     * @hidden\n     */\n    freeModeMomentumBounceRatio: number;\n    /**\n     * @hidden\n     */\n    freeModeMomentumVelocityRatio: number;\n    /**\n     * @hidden\n     */\n    freeModeSticky: boolean;\n    /**\n     * @hidden\n     */\n    freeModeMinimumVelocity: number;\n    /**\n     * @hidden\n     */\n    autoHeight: boolean;\n    /**\n     * @hidden\n     */\n    setWrapperSize: boolean;\n    /**\n     * @hidden\n     */\n    zoomMax: number;\n    /**\n     * @hidden\n     */\n    zoomMin: number;\n    /**\n     * @hidden\n     */\n    zoomToggle: boolean;\n    /**\n     * @hidden\n     */\n    touchRatio: number;\n    /**\n     * @hidden\n     */\n    touchAngle: number;\n    /**\n     * @hidden\n     */\n    simulateTouch: boolean;\n    /**\n     * @hidden\n     */\n    shortSwipes: boolean;\n    /**\n     * @hidden\n     */\n    longSwipes: boolean;\n    /**\n     * @hidden\n     */\n    longSwipesRatio: number;\n    /**\n     * @hidden\n     */\n    longSwipesMs: number;\n    /**\n     * @hidden\n     */\n    followFinger: boolean;\n    /**\n     * @hidden\n     */\n    onlyExternal: boolean;\n    /**\n     * @hidden\n     */\n    threshold: number;\n    /**\n     * @hidden\n     */\n    touchMoveStopPropagation: boolean;\n    /**\n     * @hidden\n     */\n    touchReleaseOnEdges: boolean;\n    /**\n     * @hidden\n     */\n    iOSEdgeSwipeDetection: boolean;\n    /**\n     * @hidden\n     */\n    iOSEdgeSwipeThreshold: number;\n    /**\n     * @hidden\n     */\n    paginationClickable: boolean;\n    /**\n     * @hidden\n     */\n    paginationHide: boolean;\n    /** @hidden */\n    resistance: boolean;\n    /** @hidden */\n    resistanceRatio: number;\n    /** @hidden */\n    watchSlidesProgress: boolean;\n    /** @hidden */\n    watchSlidesVisibility: boolean;\n    /**\n     * @hidden\n     */\n    preventClicks: boolean;\n    /**\n     * @hidden\n     */\n    preventClicksPropagation: boolean;\n    /**\n     * @hidden\n     */\n    slideToClickedSlide: boolean;\n    /**\n     * @hidden\n     */\n    loopAdditionalSlides: number;\n    /**\n     * @hidden\n     */\n    loopedSlides: number;\n    /**\n     * @hidden\n     */\n    swipeHandler: any;\n    /**\n     * @hidden\n     */\n    noSwiping: boolean;\n    /** @hidden */\n    runCallbacksOnInit: boolean;\n    controlBy: string;\n    controlInverse: boolean;\n    /**\n     * @hidden\n     */\n    keyboardControl: boolean;\n    /**\n     * @hidden\n     */\n    coverflow: {\n        rotate: number;\n        stretch: number;\n        depth: number;\n        modifier: number;\n        slideShadows: boolean;\n    };\n    /**\n     * @hidden\n     */\n    flip: {\n        slideShadows: boolean;\n        limitRotation: boolean;\n    };\n    /**\n     * @hidden\n     */\n    cube: {\n        slideShadows: boolean;\n        shadow: boolean;\n        shadowOffset: number;\n        shadowScale: number;\n    };\n    /**\n     * @hidden\n     */\n    fade: {\n        crossFade: boolean;\n    };\n    /**\n     * @hidden\n     */\n    prevSlideMessage: string;\n    /**\n     * @hidden\n     */\n    nextSlideMessage: string;\n    /**\n     * @hidden\n     */\n    firstSlideMessage: string;\n    /**\n     * @hidden\n     */\n    lastSlideMessage: string;\n    /**\n     * @hidden\n     */\n    originalEvent: any;\n    /**\n     * @output {Slides} Emitted when a slide change starts.\n     */\n    ionSlideWillChange: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a slide change ends.\n     */\n    ionSlideDidChange: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a slide moves.\n     */\n    ionSlideDrag: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when slides reaches its beginning (initial position).\n     */\n    ionSlideReachStart: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when slides reaches its last slide.\n     */\n    ionSlideReachEnd: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a slide moves.\n     */\n    ionSlideAutoplay: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a autoplay starts.\n     */\n    ionSlideAutoplayStart: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a autoplay stops.\n     */\n    ionSlideAutoplayStop: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a slide change starts with the \"forward\" direction.\n     */\n    ionSlideNextStart: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a slide change starts with the \"backward\" direction.\n     */\n    ionSlidePrevStart: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a slide change ends with the \"forward\" direction.\n     */\n    ionSlideNextEnd: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when a slide change ends with the \"backward\" direction.\n     */\n    ionSlidePrevEnd: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when the user taps/clicks on the slide's container.\n     */\n    ionSlideTap: EventEmitter<Slides>;\n    /**\n     * @output {Slides} Emitted when the user double taps on the slide's container.\n     */\n    ionSlideDoubleTap: EventEmitter<Slides>;\n    /** @hidden */\n    ionSlideProgress: EventEmitter<number>;\n    /** @hidden */\n    ionSlideTransitionStart: EventEmitter<Slides>;\n    /** @hidden */\n    ionSlideTransitionEnd: EventEmitter<Slides>;\n    /** @hidden */\n    ionSlideTouchStart: EventEmitter<TouchEvent>;\n    /** @hidden */\n    ionSlideTouchEnd: EventEmitter<TouchEvent>;\n    /**\n     * Private properties only useful to this class.\n     * ------------------------------------\n     */\n    private _init;\n    private _tmr;\n    private _unregs;\n    /**\n     * Properties that are exposed publically but no docs.\n     * ------------------------------------\n     */\n    /** @hidden */\n    clickedIndex: number;\n    /** @hidden */\n    clickedSlide: SlideElement;\n    /** @hidden */\n    container: SlideContainer;\n    /** @hidden */\n    id: number;\n    /** @hidden */\n    progress: number;\n    /** @hidden */\n    realIndex: number;\n    /** @hidden */\n    renderedHeight: number;\n    /** @hidden */\n    renderedWidth: number;\n    /** @hidden */\n    slideId: string;\n    /** @hidden */\n    swipeDirection: string;\n    /** @hidden */\n    velocity: number;\n    /**\n     * Properties which are for internal use only\n     * and not exposed to the public\n     * ------------------------------------\n     */\n    /** @internal */\n    _activeIndex: number;\n    /** @internal */\n    _allowClick: boolean;\n    /** @internal */\n    _allowSwipeToNext: boolean;\n    /** @internal */\n    _allowSwipeToPrev: boolean;\n    /** @internal */\n    _animating: boolean;\n    /** @internal */\n    _autoplaying: boolean;\n    /** @internal */\n    _autoplayPaused: boolean;\n    /** @internal */\n    _autoplayTimeoutId: number;\n    /** @internal */\n    _bullets: HTMLElement[];\n    /** @internal */\n    _classNames: string[];\n    /** @internal */\n    _isBeginning: boolean;\n    /** @internal */\n    _isEnd: boolean;\n    /** @internal */\n    _keyboardUnReg: Function;\n    /** @internal */\n    _liveRegion: HTMLElement;\n    /** @internal */\n    _paginationContainer: HTMLElement;\n    /** @internal */\n    _previousIndex: number;\n    /** @internal */\n    _renderedSize: number;\n    /** @internal */\n    _rtl: boolean;\n    /** @internal */\n    _slides: SlideElement[];\n    /** @internal */\n    _snapGrid: any;\n    /** @internal */\n    _slidesGrid: any;\n    /** @internal */\n    _snapIndex: number;\n    /** @internal */\n    _slidesSizesGrid: any;\n    /** @internal */\n    _spline: any;\n    /** @internal */\n    _supportTouch: boolean;\n    /** @internal */\n    _supportGestures: boolean;\n    /** @internal */\n    _touches: SlideTouches;\n    /** @internal */\n    _touchEvents: SlideTouchEvents;\n    /** @internal */\n    _touchEventsDesktop: SlideTouchEvents;\n    /** @internal */\n    _translate: number;\n    /** @internal */\n    _virtualSize: any;\n    /** @internal */\n    _wrapper: HTMLElement;\n    /** @internal */\n    _zone: NgZone;\n    /** @internal */\n    _zoom: SlideZoom;\n    /** @hidden */\n    nextButton: HTMLElement;\n    /** @hidden */\n    prevButton: HTMLElement;\n    constructor(config: Config, _plt: Platform, zone: NgZone, viewCtrl: ViewController, elementRef: ElementRef, renderer: Renderer);\n    private _initSlides();\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Update the underlying slider implementation. Call this if you've added or removed\n     * child slides.\n     */\n    update(debounce?: number): void;\n    resize(): void;\n    /**\n     * Transition to the specified slide.\n     *\n     * @param {number} index  The index number of the slide.\n     * @param {number} [speed]  Transition duration (in ms).\n     * @param {boolean} [runCallbacks] Whether or not to emit the `ionSlideWillChange`/`ionSlideDidChange` events. Default true.\n     */\n    slideTo(index: number, speed?: number, runCallbacks?: boolean): void;\n    /**\n     * Transition to the next slide.\n     *\n     * @param {number} [speed]  Transition duration (in ms).\n     * @param {boolean} [runCallbacks]  Whether or not to emit the `ionSlideWillChange`/`ionSlideDidChange` events. Default true.\n     */\n    slideNext(speed?: number, runCallbacks?: boolean): void;\n    /**\n     * Transition to the previous slide.\n     *\n     * @param {number} [speed]  Transition duration (in ms).\n     * @param {boolean} [runCallbacks]  Whether or not to emit the `ionSlideWillChange`/`ionSlideDidChange` events. Default true.\n     */\n    slidePrev(speed?: number, runCallbacks?: boolean): void;\n    /**\n     * Get the index of the active slide.\n     *\n     * @returns {number} The index number of the current slide.\n     */\n    getActiveIndex(): number;\n    /**\n     * Get the index of the previous slide.\n     *\n     * @returns {number} The index number of the previous slide.\n     */\n    getPreviousIndex(): number;\n    /**\n     * Get the total number of slides.\n     *\n     * @returns {number} The total number of slides.\n     */\n    length(): number;\n    /**\n     * Get whether or not the current slide is the last slide.\n     *\n     * @returns {boolean} If the slide is the last slide or not.\n     */\n    isEnd(): boolean;\n    /**\n     * Get whether or not the current slide is the first slide.\n     *\n     * @returns {boolean} If the slide is the first slide or not.\n     */\n    isBeginning(): boolean;\n    /**\n     * Start auto play.\n     */\n    startAutoplay(): void;\n    /**\n     * Stop auto play.\n     */\n    stopAutoplay(): void;\n    /**\n     * Lock or unlock the ability to slide to the next slides.\n     * @param {boolean} shouldLockSwipeToNext If set to true the user will not be able to swipe to the next slide.\n     * Set to false to unlock this behaviour.\n     */\n    lockSwipeToNext(shouldLockSwipeToNext: boolean): void;\n    /**\n     * Lock or unlock the ability to slide to the previous slides.\n     * @param {boolean} shouldLockSwipeToPrev If set to true the user will not be able to swipe to the previous slide.\n     * Set to false to unlock this behaviour.\n     */\n    lockSwipeToPrev(shouldLockSwipeToPrev: boolean): void;\n    /**\n     * Lock or unlock the ability to slide to change slides.\n     * @param {boolean} shouldLockSwipes If set to true user can not swipe in either direction on slide.\n     * False allows swiping in both directions.\n     */\n    lockSwipes(shouldLockSwipes: boolean): void;\n    /**\n     * Enable or disable keyboard control.\n     * @param {boolean} shouldEnableKeyboard If set to true the slider can be controled by a keyboard.\n     */\n    enableKeyboardControl(shouldEnableKeyboard: boolean): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n}\n"]}