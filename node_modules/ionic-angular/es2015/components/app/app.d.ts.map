{"version":3,"file":"app.d.ts","sources":["app.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { IonicApp } from './app-root';\nimport { ClickBlock } from './click-block';\nimport { Config } from '../../config/config';\nimport { NavOptions } from '../../navigation/nav-util';\nimport { MenuController } from './menu-controller';\nimport { NavigationContainer } from '../../navigation/navigation-container';\nimport { NavControllerBase } from '../../navigation/nav-controller-base';\nimport { Platform } from '../../platform/platform';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @name App\n * @description\n * App is a utility class used in Ionic to get information about various aspects of an app\n */\nexport declare class App {\n    private _config;\n    private _plt;\n    private _menuCtrl;\n    private _disTime;\n    private _scrollTime;\n    private _title;\n    private _titleSrv;\n    private _rootNavs;\n    private _disableScrollAssist;\n    private _didScroll;\n    /**\n     * @hidden\n     */\n    _clickBlock: ClickBlock;\n    /**\n     * @hidden\n     */\n    _appRoot: IonicApp;\n    /**\n     * Observable that emits whenever a view loads in the app.\n     * @returns {Observable} Returns an observable\n     */\n    viewDidLoad: EventEmitter<ViewController>;\n    /**\n     * Observable that emits before any view is entered in the app.\n     * @returns {Observable} Returns an observable\n     */\n    viewWillEnter: EventEmitter<ViewController>;\n    /**\n     * Observable that emits after any view is entered in the app.\n     * @returns {Observable} Returns an observable\n     */\n    viewDidEnter: EventEmitter<ViewController>;\n    /**\n     * Observable that emits before any view is exited in the app.\n     * @returns {Observable} Returns an observable\n     */\n    viewWillLeave: EventEmitter<ViewController>;\n    /**\n     * Observable that emits after any view is exited in the app.\n     * @returns {Observable} Returns an observable\n     */\n    viewDidLeave: EventEmitter<ViewController>;\n    /**\n     * Observable that emits before any view unloads in the app.\n     * @returns {Observable} Returns an observable\n     */\n    viewWillUnload: EventEmitter<ViewController>;\n    constructor(_config: Config, _plt: Platform, _menuCtrl?: MenuController);\n    /**\n     * Sets the document title.\n     * @param {string} val  Value to set the document title to.\n     */\n    setTitle(val: string): void;\n    /**\n     * @hidden\n     */\n    setElementClass(className: string, isAdd: boolean): void;\n    /**\n     * @hidden\n     * Sets if the app is currently enabled or not, meaning if it's\n     * available to accept new user commands. For example, this is set to `false`\n     * while views transition, a modal slides up, an action-sheet\n     * slides up, etc. After the transition completes it is set back to `true`.\n     * @param {boolean} isEnabled `true` for enabled, `false` for disabled\n     * @param {number} duration  When `isEnabled` is set to `false`, this argument\n     * is used to set the maximum number of milliseconds that app will wait until\n     * it will automatically enable the app again. It's basically a fallback incase\n     * something goes wrong during a transition and the app wasn't re-enabled correctly.\n     */\n    setEnabled(isEnabled: boolean, duration?: number, minDuration?: number): void;\n    /**\n     * @hidden\n     * Toggles whether an application can be scrolled\n     * @param {boolean} disableScroll when set to `false`, the application's\n     * scrolling is enabled. When set to `true`, scrolling is disabled.\n     */\n    _setDisableScroll(disableScroll: boolean): void;\n    /**\n     * @hidden\n     * Boolean if the app is actively enabled or not.\n     * @return {boolean}\n     */\n    isEnabled(): boolean;\n    /**\n     * @hidden\n     */\n    setScrolling(): void;\n    /**\n     * Boolean if the app is actively scrolling or not.\n     * @return {boolean} returns true or false\n     */\n    isScrolling(): boolean;\n    /**\n     * @return {NavController} Returns the first Active Nav Controller from the list. This method is deprecated\n     */\n    getActiveNav(): NavControllerBase;\n    /**\n     * @return {NavController[]} Returns the active NavControllers. Using this method is preferred when we need access to the top-level navigation controller while on the outside views and handlers like `registerBackButtonAction()`\n     */\n    getActiveNavs(rootNavId?: string): NavControllerBase[];\n    getRootNav(): any;\n    getRootNavs(): any[];\n    /**\n     * @return {NavController} Returns the root NavController\n     */\n    getRootNavById(navId: string): NavigationContainer;\n    /**\n     * @hidden\n     */\n    registerRootNav(nav: NavigationContainer): void;\n    /**\n     * @hidden\n     */\n    unregisterRootNav(nav: NavigationContainer): void;\n    getActiveNavContainers(): NavigationContainer[];\n    /**\n     * @hidden\n     */\n    present(enteringView: ViewController, opts: NavOptions, appPortal?: number): Promise<any>;\n    /**\n     * @hidden\n     */\n    goBack(): Promise<any>;\n    /**\n     * @hidden\n     */\n    navPop(): Promise<any>;\n    /**\n     * @hidden\n     */\n    _enableInputBlurring(): void;\n    getNavByIdOrName(id: string): NavigationContainer;\n}\nexport declare function getNavByIdOrName(nav: NavigationContainer, id: string): NavigationContainer;\nexport declare function findTopNavs(nav: NavigationContainer): NavigationContainer[];\n"]}