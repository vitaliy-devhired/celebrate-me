{"version":3,"file":"popover-controller.d.ts","sources":["popover-controller.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { Popover } from './popover';\nimport { PopoverOptions } from './popover-options';\nimport { DeepLinker } from '../../navigation/deep-linker';\n/**\n * @name PopoverController\n * @description\n * A Popover is a dialog that appears on top of the current page.\n * It can be used for anything, but generally it is used for overflow\n * actions that don't fit in the navigation bar.\n *\n * ### Creating\n * A popover can be created by calling the `create` method. The view\n * to display in the popover should be passed as the first argument.\n * Any data to pass to the popover view can optionally be passed in\n * the second argument. Options for the popover can optionally be\n * passed in the third argument. See the [create](#create) method\n * below for all available options.\n *\n * ### Presenting\n * To present a popover, call the `present` method on a PopoverController instance.\n * In order to position the popover relative to the element clicked, a click event\n * needs to be passed into the options of the the `present method. If the event\n * is not passed, the popover will be positioned in the center of the current\n * view. See the [usage](#usage) section for an example of passing this event.\n *\n * ### Dismissing\n * To dismiss the popover after creation, call the `dismiss()` method on the\n * `Popover` instance. The popover can also be dismissed from within the popover's\n * view by calling the `dismiss()` method on the [ViewController](../../navigation/ViewController).\n * The `dismiss()` call accepts an optional parameter that will be passed to the callback described\n * as follows. The `onDidDismiss(<func>)` function can be called to set up a callback action that will\n * be performed after the popover is dismissed, receiving the parameter passed to `dismiss()`.\n * The popover will dismiss when the backdrop is clicked by implicitly performing `dismiss(null)`,\n * but this can be disabled by setting `enableBackdropDismiss` to `false` in the popover options.\n *\n * > Note that after the component is dismissed, it will not be usable anymore and\n * another one must be created. This can be avoided by wrapping the creation and\n * presentation of the component in a reusable function as shown in the [usage](#usage)\n * section below.\n *\n * @usage\n *\n * To open a popover on the click of a button, pass `$event` to the method\n * which creates and presents the popover:\n *\n * ```html\n * <button ion-button icon-only (click)=\"presentPopover($event)\">\n *   <ion-icon name=\"more\"></ion-icon>\n * </button>\n * ```\n *\n * ```ts\n * import { PopoverController } from 'ionic-angular';\n *\n * @Component({})\n * class MyPage {\n *   constructor(public popoverCtrl: PopoverController) {}\n *\n *   presentPopover(myEvent) {\n *     let popover = this.popoverCtrl.create(PopoverPage);\n *     popover.present({\n *       ev: myEvent\n *     });\n *   }\n * }\n * ```\n *\n * The `PopoverPage` will display inside of the popover, and\n * can be anything. Below is an example of a page with items\n * that close the popover on click.\n *\n * ```ts\n * @Component({\n *   template: `\n *     <ion-list>\n *       <ion-list-header>Ionic</ion-list-header>\n *       <button ion-item (click)=\"close()\">Learn Ionic</button>\n *       <button ion-item (click)=\"close()\">Documentation</button>\n *       <button ion-item (click)=\"close()\">Showcase</button>\n *       <button ion-item (click)=\"close()\">GitHub Repo</button>\n *     </ion-list>\n *   `\n * })\n * class PopoverPage {\n *   constructor(public viewCtrl: ViewController) {}\n *\n *   close() {\n *     this.viewCtrl.dismiss();\n *   }\n * }\n * ```\n * @advanced\n * Popover Options\n *\n * | Option                | Type       | Description                                                                                                      |\n * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|\n * | cssClass              |`string`    | Additional classes for custom styles, separated by spaces.                                                       |\n * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |\n * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |\n *\n *\n *\n * @demo /docs/demos/src/popover/\n */\nexport declare class PopoverController {\n    private _app;\n    config: Config;\n    private _deepLinker;\n    constructor(_app: App, config: Config, _deepLinker: DeepLinker);\n    /**\n     * Present a popover. See below for options\n     * @param {object} component The Popover\n     * @param {object} data Any data to pass to the Popover view\n     * @param {PopoverOptions} opts Popover options\n     */\n    create(component: any, data?: {}, opts?: PopoverOptions): Popover;\n}\n"]}