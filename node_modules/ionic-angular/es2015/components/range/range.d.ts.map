{"version":3,"file":"range.d.ts","sources":["range.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ChangeDetectorRef, ElementRef, OnDestroy, Renderer } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Config } from '../../config/config';\nimport { DomController } from '../../platform/dom-controller';\nimport { Form } from '../../util/form';\nimport { Haptic } from '../../tap-click/haptic';\nimport { BaseInput } from '../../util/base-input';\nimport { Item } from '../item/item';\nimport { Platform } from '../../platform/platform';\nimport { PointerCoordinates } from '../../util/dom';\nimport { UIEventManager } from '../../gestures/ui-event-manager';\n/**\n * @name Range\n * @description\n * The Range slider lets users select from a range of values by moving\n * the slider knob. It can accept dual knobs, but by default one knob\n * controls the value of the range.\n *\n * ### Range Labels\n * Labels can be placed on either side of the range by adding the\n * `range-left` or `range-right` property to the element. The element\n * doesn't have to be an `ion-label`, it can be added to any element\n * to place it to the left or right of the range. See [usage](#usage)\n * below for examples.\n *\n *\n * ### Minimum and Maximum Values\n * Minimum and maximum values can be passed to the range through the `min`\n * and `max` properties, respectively. By default, the range sets the `min`\n * to `0` and the `max` to `100`.\n *\n *\n * ### Steps and Snaps\n * The `step` property specifies the value granularity of the range's value.\n * It can be useful to set the `step` when the value isn't in increments of `1`.\n * Setting the `step` property will show tick marks on the range for each step.\n * The `snaps` property can be set to automatically move the knob to the nearest\n * tick mark based on the step property value.\n *\n *\n * ### Dual Knobs\n * Setting the `dualKnobs` property to `true` on the range component will\n * enable two knobs on the range. If the range has two knobs, the value will\n * be an object containing two properties: `lower` and `upper`.\n *\n *\n * @usage\n * ```html\n * <ion-list>\n *   <ion-item>\n *     <ion-range [(ngModel)]=\"singleValue\" color=\"danger\" pin=\"true\"></ion-range>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-range min=\"-200\" max=\"200\" [(ngModel)]=\"saturation\" color=\"secondary\">\n *       <ion-label range-left>-200</ion-label>\n *       <ion-label range-right>200</ion-label>\n *     </ion-range>\n *   </ion-item>\n *\n *  <ion-item>\n *    <ion-range min=\"20\" max=\"80\" step=\"2\" [(ngModel)]=\"brightness\">\n *      <ion-icon small range-left name=\"sunny\"></ion-icon>\n *      <ion-icon range-right name=\"sunny\"></ion-icon>\n *    </ion-range>\n *  </ion-item>\n *\n *   <ion-item>\n *     <ion-label>step=100, snaps, {{singleValue4}}</ion-label>\n *     <ion-range min=\"1000\" max=\"2000\" step=\"100\" snaps=\"true\" color=\"secondary\" [(ngModel)]=\"singleValue4\"></ion-range>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>dual, step=3, snaps, {{dualValue2 | json}}</ion-label>\n *     <ion-range dualKnobs=\"true\" [(ngModel)]=\"dualValue2\" min=\"21\" max=\"72\" step=\"3\" snaps=\"true\"></ion-range>\n *   </ion-item>\n * </ion-list>\n * ```\n *\n *\n * @demo /docs/demos/src/range/\n */\nexport declare class Range extends BaseInput<any> implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    private _haptic;\n    private _plt;\n    private _dom;\n    private _cd;\n    _dual: boolean;\n    _pin: boolean;\n    _pressed: boolean;\n    _activeB: boolean;\n    _rect: ClientRect;\n    _ticks: any[];\n    _min: number;\n    _max: number;\n    _step: number;\n    _snaps: boolean;\n    _valA: number;\n    _valB: number;\n    _ratioA: number;\n    _ratioB: number;\n    _pressedA: boolean;\n    _pressedB: boolean;\n    _barL: string;\n    _barR: string;\n    _events: UIEventManager;\n    _slider: ElementRef;\n    /**\n     * @input {number} Minimum integer value of the range. Defaults to `0`.\n     */\n    min: number;\n    /**\n     * @input {number} Maximum integer value of the range. Defaults to `100`.\n     */\n    max: number;\n    /**\n     * @input {number} Specifies the value granularity. Defaults to `1`.\n     */\n    step: number;\n    /**\n     * @input {boolean} If true, the knob snaps to tick marks evenly spaced based\n     * on the step property value. Defaults to `false`.\n     */\n    snaps: boolean;\n    /**\n     * @input {boolean} If true, a pin with integer value is shown when the knob\n     * is pressed. Defaults to `false`.\n     */\n    pin: boolean;\n    /**\n     * @input {number} How long, in milliseconds, to wait to trigger the\n     * `ionChange` event after each change in the range value. Default `0`.\n     */\n    debounce: number;\n    /**\n     * @input {boolean} Show two knobs. Defaults to `false`.\n     */\n    dualKnobs: boolean;\n    /**\n     * Returns the ratio of the knob's is current location, which is a number\n     * between `0` and `1`. If two knobs are used, this property represents\n     * the lower value.\n     */\n    readonly ratio: number;\n    /**\n     * Returns the ratio of the upper value's is current location, which is\n     * a number between `0` and `1`. If there is only one knob, then this\n     * will return `null`.\n     */\n    readonly ratioUpper: number;\n    constructor(form: Form, _haptic: Haptic, item: Item, config: Config, _plt: Platform, elementRef: ElementRef, renderer: Renderer, _dom: DomController, _cd: ChangeDetectorRef);\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /** @internal */\n    _pointerDown(ev: UIEvent): boolean;\n    /** @internal */\n    _pointerMove(ev: UIEvent): void;\n    /** @internal */\n    _pointerUp(ev: UIEvent): void;\n    /** @internal */\n    _update(current: PointerCoordinates, rect: ClientRect, isPressed: boolean): boolean;\n    /** @internal */\n    _updateBar(): void;\n    /** @internal */\n    _createTicks(): void;\n    /** @internal */\n    _updateTicks(): void;\n    /** @hidden */\n    _keyChg(isIncrease: boolean, isKnobB: boolean): void;\n    /** @internal */\n    _ratioToValue(ratio: number): number;\n    /** @internal */\n    _valueToRatio(value: number): number;\n    _inputNormalize(val: any): any;\n    /**\n     * @hidden\n     */\n    _inputUpdated(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n}\n"]}