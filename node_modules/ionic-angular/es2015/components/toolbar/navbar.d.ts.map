{"version":3,"file":"navbar.d.ts","sources":["navbar.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer } from '@angular/core';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { NavController } from '../../navigation/nav-controller';\nimport { ToolbarBase } from './toolbar-base';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @name Navbar\n * @description\n * Navbar acts as the navigational toolbar, which also comes with a back\n * button. A navbar can contain a `ion-title`, any number of buttons,\n * a segment, or a searchbar. Navbars must be placed within an\n * `<ion-header>` in order for them to be placed above the content.\n * It's important to note that navbar's are part of the dynamic navigation\n * stack. If you need a static toolbar, use ion-toolbar.\n *\n * @usage\n * ```html\n * <ion-header>\n *\n *   <ion-navbar>\n *     <button ion-button icon-only menuToggle>\n *       <ion-icon name=\"menu\"></ion-icon>\n *     </button>\n *\n *     <ion-title>\n *       Page Title\n *     </ion-title>\n *\n *     <ion-buttons end>\n *       <button ion-button icon-only (click)=\"openModal()\">\n *         <ion-icon name=\"options\"></ion-icon>\n *       </button>\n *     </ion-buttons>\n *   </ion-navbar>\n *\n * </ion-header>\n * ```\n *\n * @demo /docs/demos/src/navbar/\n * @see {@link ../../toolbar/Toolbar/ Toolbar API Docs}\n */\nexport declare class Navbar extends ToolbarBase {\n    _app: App;\n    private navCtrl;\n    /**\n     * @hidden\n     */\n    _backText: string;\n    /**\n     * @hidden\n     */\n    _bbIcon: string;\n    /**\n     * @hidden\n     */\n    _hidden: boolean;\n    /**\n     * @hidden\n     */\n    _hideBb: boolean;\n    /**\n     * @hidden\n     */\n    _sbPadding: boolean;\n    /**\n     * @input {boolean} If true, the back button will be hidden.\n     */\n    hideBackButton: boolean;\n    constructor(_app: App, viewCtrl: ViewController, navCtrl: NavController, config: Config, elementRef: ElementRef, renderer: Renderer);\n    backButtonClick(ev: UIEvent): void;\n    /**\n     * Set the text of the Back Button in the Nav Bar. Defaults to \"Back\".\n     */\n    setBackButtonText(text: string): void;\n    /**\n     * @hidden\n     */\n    didEnter(): void;\n    /**\n     * @hidden\n     */\n    setHidden(isHidden: boolean): void;\n}\n"]}