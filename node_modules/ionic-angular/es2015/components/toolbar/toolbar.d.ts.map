{"version":3,"file":"toolbar.d.ts","sources":["toolbar.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { ToolbarBase } from './toolbar-base';\n/**\n * @name Toolbar\n * @description\n * A Toolbar is a generic bar that is positioned above or below content.\n * Unlike a [Navbar](../Navbar/), a toolbar can be used as a subheader.\n * When toolbars are placed within an `<ion-header>` or `<ion-footer>`,\n * the toolbars stay fixed in their respective location. When placed within\n * `<ion-content>`, toolbars will scroll with the content.\n *\n *\n * ### Buttons in a Toolbar\n * Buttons placed in a toolbar should be placed inside of the `<ion-buttons>`\n * element. An exception to this is a [menuToggle](../../menu/MenuToggle) button.\n * It should not be placed inside of the `<ion-buttons>` element. Both the\n * `<ion-buttons>` element and the `menuToggle` can be positioned inside of the\n * toolbar using different properties. The below chart has a description of each\n * property.\n *\n * | Property    | Description                                                                                                           |\n * |-------------|-----------------------------------------------------------------------------------------------------------------------|\n * | `start`     | Positions element to the left of the content in `ios` mode, and directly to the right in `md` and `wp` mode.    |\n * | `end`       | Positions element to the right of the content in `ios` mode, and to the far right in `md` and `wp` mode.        |\n * | `left`      | Positions element to the left of all other elements.                                                            |\n * | `right`     | Positions element to the right of all other elements.                                                           |\n *\n *\n * ### Header / Footer Box Shadow and Border\n * In `md` mode, the `<ion-header>` will receive a box-shadow on the bottom, and the\n * `<ion-footer>` will receive a box-shadow on the top.  In `ios` mode, the `<ion-header>`\n * will receive a border on the bottom, and the `<ion-footer>` will receive a border on the\n * top. Both the `md` box-shadow and the `ios` border can be removed by adding the `no-border`\n * attribute to the element.\n *\n * ```html\n * <ion-header no-border>\n *   <ion-toolbar>\n *     <ion-title>Header</ion-title>\n *   </ion-toolbar>\n * </ion-header>\n *\n * <ion-content>\n * </ion-content>\n *\n * <ion-footer no-border>\n *   <ion-toolbar>\n *     <ion-title>Footer</ion-title>\n *   </ion-toolbar>\n * </ion-footer>\n * ```\n *\n * @usage\n *\n * ```html\n *\n * <ion-header no-border>\n *\n *   <ion-toolbar>\n *     <ion-title>My Toolbar Title</ion-title>\n *   </ion-toolbar>\n *\n *   <ion-toolbar>\n *     <ion-title>I'm a subheader</ion-title>\n *   </ion-toolbar>\n *\n * <ion-header>\n *\n *\n * <ion-content>\n *\n *   <ion-toolbar>\n *     <ion-title>Scrolls with the content</ion-title>\n *   </ion-toolbar>\n *\n * </ion-content>\n *\n *\n * <ion-footer no-border>\n *\n *   <ion-toolbar>\n *     <ion-title>I'm a footer</ion-title>\n *   </ion-toolbar>\n *\n * </ion-footer>\n *  ```\n *\n * @demo /docs/demos/src/toolbar/\n * @see {@link ../Navbar/ Navbar API Docs}\n */\nexport declare class Toolbar extends ToolbarBase {\n    /** @hidden */\n    _sbPadding: boolean;\n    constructor(config: Config, elementRef: ElementRef, renderer: Renderer);\n}\n"]}