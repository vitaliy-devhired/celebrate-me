{"version":3,"file":"modal-controller.d.ts","sources":["modal-controller.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { Modal } from './modal';\nimport { ModalOptions } from './modal-options';\nimport { DeepLinker } from '../../navigation/deep-linker';\n/**\n * @name ModalController\n * @description\n * A Modal is a content pane that goes over the user's current page.\n * Usually it is used for making a choice or editing an item. A modal uses the\n * `NavController` to\n * {@link /docs/api/components/nav/NavController/#present present}\n * itself in the root nav stack. It is added to the stack similar to how\n * {@link /docs/api/components/nav/NavController/#push NavController.push}\n * works.\n *\n * When a modal (or any other overlay such as an alert or actionsheet) is\n * \"presented\" to a nav controller, the overlay is added to the app's root nav.\n * After the modal has been presented, from within the component instance, the\n * modal can later be closed or \"dismissed\" by using the ViewController's\n * `dismiss` method. Additionally, you can dismiss any overlay by using `pop`\n * on the root nav controller. Modals are not reusable. When a modal is dismissed\n * it is destroyed.\n *\n * Data can be passed to a new modal through `Modal.create()` as the second\n * argument. The data can then be accessed from the opened page by injecting\n * `NavParams`. Note that the page, which opened as a modal, has no special\n * \"modal\" logic within it, but uses `NavParams` no differently than a\n * standard page.\n *\n * @usage\n * ```ts\n * import { ModalController, NavParams } from 'ionic-angular';\n *\n * @Component(...)\n * class HomePage {\n *\n *  constructor(public modalCtrl: ModalController) { }\n *\n *  presentProfileModal() {\n *    const profileModal = this.modalCtrl.create(Profile, { userId: 8675309 });\n *    profileModal.present();\n *  }\n *\n * }\n *\n * @Component(...)\n * class Profile {\n *\n *  constructor(params: NavParams) {\n *    console.log('UserId', params.get('userId'));\n *  }\n *\n * }\n * ```\n *\n * @advanced\n *\n * | Option                | Type       | Description                                                                                                      |\n * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|\n * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |\n * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |\n * | cssClass              |`string`    | Additional classes for custom styles, separated by spaces.                                                       |\n *\n * A modal can also emit data, which is useful when it is used to add or edit\n * data. For example, a profile page could slide up in a modal, and on submit,\n * the submit button could pass the updated profile data, then dismiss the\n * modal.\n *\n * ```ts\n * import { Component } from '@angular/core';\n * import { ModalController, ViewController } from 'ionic-angular';\n *\n * @Component(...)\n * class HomePage {\n *\n *   constructor(public modalCtrl: ModalController) {\n *\n *   }\n *\n *   presentContactModal() {\n *     let contactModal = this.modalCtrl.create(ContactUs);\n *     contactModal.present();\n *   }\n *\n *   presentProfileModal() {\n *     let profileModal = this.modalCtrl.create(Profile, { userId: 8675309 });\n *\n *     // fires after dismiss animation finishes\n *     profileModal.onDidDismiss(data => {\n *       console.log(data);\n *     });\n *\n *     // fires before dismiss animation begins\n *     profileModal.onWillDismiss(data => {\n *       console.log(data);\n *     });\n *\n *     profileModal.present();\n *   }\n * }\n *\n * @Component(...)\n * class Profile {\n *\n *   constructor(public viewCtrl: ViewController) {\n *\n *   }\n *\n *   dismiss() {\n *     let data = { 'foo': 'bar' };\n *     this.viewCtrl.dismiss(data);\n *   }\n * }\n * ```\n *\n * A common issue is that a developer may try to implement navigation in a modal, but when you try NavController.push(),\n * you will notice that the status bar on iOS gets cut off. The proper way to implement navigation in a modal is to\n * make the modal component a navigation container, and set the root page to the page you want to show in your modal.\n *\n * ```ts\n * @Component({\n *   template: '<ion-nav [root]=\"rootPage\" [rootParams]=\"rootParams\"></ion-nav>'\n * })\n * export class MyModalWrapper {\n *   rootPage = 'MyModalContentPage'; // This is the page you want your modal to display\n *   rootParams;\n *\n *   constructor(navParams: NavParams, private viewCtrl: ViewController) {\n *       this.rootParams = Object.assign({}, navParams.data, {viewCtrl: viewCtrl});\n *       // This line will send the view controller into your child views, so you can dismiss the modals from there.\n *   }\n * }\n * ```\n * @demo /docs/demos/src/modal/\n * @see {@link /docs/components#modals Modal Component Docs}\n */\nexport declare class ModalController {\n    private _app;\n    config: Config;\n    private deepLinker;\n    constructor(_app: App, config: Config, deepLinker: DeepLinker);\n    /**\n     * Create a modal to display. See below for options.\n     *\n     * @param {object} component The Modal view\n     * @param {object} data Any data to pass to the Modal view\n     * @param {object} opts Modal options\n     */\n    create(component: any, data?: any, opts?: ModalOptions): Modal;\n}\n"]}