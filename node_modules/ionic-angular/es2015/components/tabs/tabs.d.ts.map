{"version":3,"file":"tabs.d.ts","sources":["tabs.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, Renderer, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/takeUntil';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { DeepLinker } from '../../navigation/deep-linker';\nimport { Ion } from '../ion';\nimport { Keyboard } from '../../platform/keyboard';\nimport { Tabs as ITabs } from '../../navigation/nav-interfaces';\nimport { NavController } from '../../navigation/nav-controller';\nimport { NavControllerBase } from '../../navigation/nav-controller-base';\nimport { NavigationContainer } from '../../navigation/navigation-container';\nimport { NavOptions } from '../../navigation/nav-util';\nimport { RootNode } from '../split-pane/split-pane';\nimport { Platform } from '../../platform/platform';\nimport { Tab } from './tab';\nimport { TabHighlight } from './tab-highlight';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @name Tabs\n * @description\n * Tabs make it easy to navigate between different pages or functional\n * aspects of an app. The Tabs component, written as `<ion-tabs>`, is\n * a container of individual [Tab](../Tab/) components. Each individual `ion-tab`\n * is a declarative component for a [NavController](../../../navigation/NavController/)\n *\n * For more information on using nav controllers like Tab or [Nav](../../nav/Nav/),\n * take a look at the [NavController API Docs](../../../navigation/NavController/).\n *\n * ### Placement\n *\n * The position of the tabs relative to the content varies based on\n * the mode. The tabs are placed at the bottom of the screen\n * for iOS and Android, and at the top for Windows by default. The position can\n * be configured using the `tabsPlacement` attribute on the `<ion-tabs>` component,\n * or in an app's [config](../../config/Config/).\n * See the [Input Properties](#input-properties) below for the available\n * values of `tabsPlacement`.\n *\n * ### Layout\n *\n * The layout for all of the tabs can be defined using the `tabsLayout`\n * property. If the individual tab has a title and icon, the icons will\n * show on top of the title by default. All tabs can be changed by setting\n * the value of `tabsLayout` on the `<ion-tabs>` element, or in your\n * app's [config](../../config/Config/). For example, this is useful if\n * you want to show tabs with a title only on Android, but show icons\n * and a title for iOS. See the [Input Properties](#input-properties)\n * below for the available values of `tabsLayout`.\n *\n * ### Selecting a Tab\n *\n * There are different ways you can select a specific tab from the tabs\n * component. You can use the `selectedIndex` property to set the index\n * on the `<ion-tabs>` element, or you can call `select()` from the `Tabs`\n * instance after creation. See [usage](#usage) below for more information.\n *\n * @usage\n *\n * You can add a basic tabs template to a `@Component` using the following\n * template:\n *\n * ```html\n * <ion-tabs>\n *   <ion-tab [root]=\"tab1Root\"></ion-tab>\n *   <ion-tab [root]=\"tab2Root\"></ion-tab>\n *   <ion-tab [root]=\"tab3Root\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * Where `tab1Root`, `tab2Root`, and `tab3Root` are each a page:\n *\n *```ts\n * @Component({\n *   templateUrl: 'build/pages/tabs/tabs.html'\n * })\n * export class TabsPage {\n *   // this tells the tabs component which Pages\n *   // should be each tab's root Page\n *   tab1Root = Page1;\n *   tab2Root = Page2;\n *   tab3Root = Page3;\n *\n *   constructor() {\n *\n *   }\n * }\n *```\n *\n * By default, the first tab will be selected upon navigation to the\n * Tabs page. We can change the selected tab by using `selectedIndex`\n * on the `<ion-tabs>` element:\n *\n * ```html\n * <ion-tabs selectedIndex=\"2\">\n *   <ion-tab [root]=\"tab1Root\"></ion-tab>\n *   <ion-tab [root]=\"tab2Root\"></ion-tab>\n *   <ion-tab [root]=\"tab3Root\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * Since the index starts at `0`, this will select the 3rd tab which has\n * root set to `tab3Root`. If you wanted to change it dynamically from\n * your class, you could use [property binding](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding).\n *\n * Alternatively, you can grab the `Tabs` instance and call the `select()`\n * method. This requires the `<ion-tabs>` element to have an `id`. For\n * example, set the value of `id` to `myTabs`:\n *\n * ```html\n * <ion-tabs #myTabs>\n *   <ion-tab [root]=\"tab1Root\"></ion-tab>\n *   <ion-tab [root]=\"tab2Root\"></ion-tab>\n *   <ion-tab [root]=\"tab3Root\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * Then in your class you can grab the `Tabs` instance and call `select()`,\n * passing the index of the tab as the argument. Here we're grabbing the tabs\n * by using ViewChild.\n *\n *```ts\n * export class TabsPage {\n *\n * @ViewChild('myTabs') tabRef: Tabs;\n *\n * ionViewDidEnter() {\n *   this.tabRef.select(2);\n *  }\n *\n * }\n *```\n *\n * You can also switch tabs from a child component by calling `select()` on the\n * parent view using the `NavController` instance. For example, assuming you have\n * a `TabsPage` component, you could call the following from any of the child\n * components to switch to `TabsRoot3`:\n *\n *```ts\n * switchTabs() {\n *   this.navCtrl.parent.select(2);\n * }\n *```\n * @demo /docs/demos/src/tabs/\n *\n * @see {@link /docs/components#tabs Tabs Component Docs}\n * @see {@link ../Tab Tab API Docs}\n * @see {@link ../../config/Config Config API Docs}\n *\n */\nexport declare class Tabs extends Ion implements AfterViewInit, RootNode, ITabs, NavigationContainer {\n    viewCtrl: ViewController;\n    private _app;\n    private _plt;\n    private _linker;\n    /** @internal */\n    _ids: number;\n    /** @internal */\n    _tabs: Tab[];\n    /** @internal */\n    _sbPadding: boolean;\n    /** @internal */\n    _top: number;\n    /** @internal */\n    _bottom: number;\n    /** @internal */\n    id: string;\n    /** @internal */\n    _selectHistory: string[];\n    /** @internal */\n    _onDestroy: Subject<void>;\n    /**\n     * @input {string} A unique name for the tabs\n     */\n    name: string;\n    /**\n     * @input {number} The default selected tab index when first loaded. If a selected index isn't provided then it will use `0`, the first tab.\n     */\n    selectedIndex: number;\n    /**\n     * @input {string} Set the tabbar layout: `icon-top`, `icon-start`, `icon-end`, `icon-bottom`, `icon-hide`, `title-hide`.\n     */\n    tabsLayout: string;\n    /**\n     * @input {string} Set position of the tabbar: `top`, `bottom`.\n     */\n    tabsPlacement: string;\n    /**\n     * @input {boolean} If true, show the tab highlight bar under the selected tab.\n     */\n    tabsHighlight: boolean;\n    /**\n     * @output {any} Emitted when the tab changes.\n     */\n    ionChange: EventEmitter<Tab>;\n    /**\n     * @internal\n     */\n    _highlight: TabHighlight;\n    /**\n     * @internal\n     */\n    _tabbar: ElementRef;\n    /**\n     * @internal\n     */\n    portal: ViewContainerRef;\n    /**\n     * @hidden\n     */\n    parent: NavControllerBase;\n    constructor(parent: NavController, viewCtrl: ViewController, _app: App, config: Config, elementRef: ElementRef, _plt: Platform, renderer: Renderer, _linker: DeepLinker, keyboard?: Keyboard);\n    /**\n     * @internal\n     */\n    setTabbarHidden(tabbarHidden: boolean): void;\n    /**\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @internal\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @internal\n     */\n    initTabs(): Promise<any>;\n    /**\n     * @internal\n     */\n    _setConfig(attrKey: string, fallback: any): void;\n    /**\n     * @hidden\n     */\n    add(tab: Tab): string;\n    /**\n     * @param {number|Tab} tabOrIndex Index, or the Tab instance, of the tab to select.\n     */\n    select(tabOrIndex: number | Tab, opts?: NavOptions, fromUrl?: boolean): Promise<any>;\n    _fireChangeEvent(selectedTab: Tab): void;\n    _tabSwitchEnd(selectedTab: Tab, selectedPage: ViewController, currentPage: ViewController): void;\n    /**\n     * Get the previously selected Tab which is currently not disabled or hidden.\n     * @param {boolean} trimHistory If the selection history should be trimmed up to the previous tab selection or not.\n     * @returns {Tab}\n     */\n    previousTab(trimHistory?: boolean): Tab;\n    /**\n     * @param {number} index Index of the tab you want to get\n     * @returns {Tab} Returns the tab who's index matches the one passed\n     */\n    getByIndex(index: number): Tab;\n    /**\n     * @return {Tab} Returns the currently selected tab\n     */\n    getSelected(): Tab;\n    /**\n     * @internal\n     */\n    getActiveChildNavs(): Tab[];\n    /**\n     * @internal\n     */\n    getAllChildNavs(): any[];\n    /**\n     * @internal\n     */\n    getIndex(tab: Tab): number;\n    /**\n     * @internal\n     */\n    length(): number;\n    /**\n     * \"Touch\" the active tab, going back to the root view of the tab\n     * or optionally letting the tab handle the event\n     */\n    private _updateCurrentTab(tab, fromUrl);\n    /**\n     * @internal\n     * DOM WRITE\n     */\n    setTabbarPosition(top: number, bottom: number): void;\n    /**\n     * @internal\n     */\n    resize(): void;\n    /**\n     * @internal\n     */\n    initPane(): boolean;\n    /**\n     * @internal\n     */\n    paneChanged(isPane: boolean): void;\n    goToRoot(opts: NavOptions): Promise<any>;\n    getType(): string;\n    getSecondaryIdentifier(): string;\n    /**\n     * @private\n     */\n    _getSelectedTabIndex(secondaryId?: string, fallbackIndex?: number): number;\n}\n"]}