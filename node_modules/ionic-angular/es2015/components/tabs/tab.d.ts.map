{"version":3,"file":"tab.d.ts","sources":["tab.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, ElementRef, ErrorHandler, EventEmitter, NgZone, Renderer, ViewContainerRef } from '@angular/core';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { DeepLinker } from '../../navigation/deep-linker';\nimport { DomController } from '../../platform/dom-controller';\nimport { GestureController } from '../../gestures/gesture-controller';\nimport { Tab as ITab } from '../../navigation/nav-interfaces';\nimport { NavControllerBase } from '../../navigation/nav-controller-base';\nimport { NavOptions, NavSegment } from '../../navigation/nav-util';\nimport { Platform } from '../../platform/platform';\nimport { TabButton } from './tab-button';\nimport { Tabs } from './tabs';\nimport { TransitionController } from '../../transitions/transition-controller';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @name Tab\n * @description\n * The Tab component, written `<ion-tab>`, is styled based on the mode and should\n * be used in conjunction with the [Tabs](../Tabs/) component.\n *\n * Each `ion-tab` is a declarative component for a [NavController](../../../navigation/NavController/).\n * Basically, each tab is a `NavController`. For more information on using\n * navigation controllers take a look at the [NavController API Docs](../../../navigation/NavController/).\n *\n * See the [Tabs API Docs](../Tabs/) for more details on configuring Tabs.\n *\n * @usage\n *\n * To add a basic tab, you can use the following markup where the `root` property\n * is the page you want to load for that tab, `tabTitle` is the optional text to\n * display on the tab, and `tabIcon` is the optional [icon](../../icon/Icon/).\n *\n * ```html\n * <ion-tabs>\n *  <ion-tab [root]=\"chatRoot\" tabTitle=\"Chat\" tabIcon=\"chat\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * Then, in your class you can set `chatRoot` to an imported class:\n *\n * ```ts\n * import { ChatPage } from '../chat/chat';\n *\n * export class Tabs {\n *   // here we'll set the property of chatRoot to\n *   // the imported class of ChatPage\n *   chatRoot = ChatPage;\n *\n *   constructor() {\n *\n *   }\n * }\n * ```\n *\n * You can also pass some parameters to the root page of the tab through\n * `rootParams`. Below we pass `chatParams` to the Chat tab:\n *\n * ```html\n * <ion-tabs>\n *  <ion-tab [root]=\"chatRoot\" [rootParams]=\"chatParams\" tabTitle=\"Chat\" tabIcon=\"chat\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * ```ts\n * export class Tabs {\n *   chatRoot = ChatPage;\n *\n *   // set some user information on chatParams\n *   chatParams = {\n *     user1: 'admin',\n *     user2: 'ionic'\n *   };\n *\n *   constructor() {\n *\n *   }\n * }\n * ```\n *\n * And in `ChatPage` you can get the data from `NavParams`:\n *\n * ```ts\n * export class ChatPage {\n *   constructor(navParams: NavParams) {\n *     console.log('Passed params', navParams.data);\n *   }\n * }\n * ```\n *\n * Sometimes you may want to call a method instead of navigating to a new\n * page. You can use the `(ionSelect)` event to call a method on your class when\n * the tab is selected. Below is an example of presenting a modal from one of\n * the tabs.\n *\n * ```html\n * <ion-tabs>\n *   <ion-tab (ionSelect)=\"chat()\" tabTitle=\"Show Modal\"></ion-tab>\n * </ion-tabs>pop\n * ```\n *\n * ```ts\n * export class Tabs {\n *   constructor(public modalCtrl: ModalController) {\n *\n *   }\n *\n *   chat() {\n *     let modal = this.modalCtrl.create(ChatPage);\n *     modal.present();\n *   }\n * }\n * ```\n *\n *\n * @demo /docs/demos/src/tabs/\n * @see {@link /docs/components#tabs Tabs Component Docs}\n * @see {@link ../../tabs/Tabs Tabs API Docs}\n * @see {@link ../../nav/Nav Nav API Docs}\n * @see {@link ../../nav/NavController NavController API Docs}\n */\nexport declare class Tab extends NavControllerBase implements ITab {\n    private _cd;\n    private linker;\n    private _dom;\n    /**\n     * @hidden\n     */\n    _isInitial: boolean;\n    /**\n     * @hidden\n     */\n    _isEnabled: boolean;\n    /**\n     * @hidden\n     */\n    _isShown: boolean;\n    /**\n     * @hidden\n     */\n    _tabId: string;\n    /**\n     * @hidden\n     */\n    _btnId: string;\n    /**\n     * @hidden\n     */\n    _loaded: boolean;\n    /**\n     * @hidden\n     */\n    isSelected: boolean;\n    /**\n     * @hidden\n     */\n    btn: TabButton;\n    /**\n     * @hidden\n     */\n    _tabsHideOnSubPages: boolean;\n    /**\n     * @hidden\n     */\n    _segment: NavSegment;\n    /**\n     * @input {Page} Set the root page for this tab.\n     */\n    root: any;\n    /**\n     * @input {object} Any nav-params to pass to the root page of this tab.\n     */\n    rootParams: any;\n    /**\n     * @input {string} The URL path name to represent this tab within the URL.\n     */\n    tabUrlPath: string;\n    /**\n     * @input {string} The title of the tab button.\n     */\n    tabTitle: string;\n    /**\n     * @input {string} The icon for the tab button.\n     */\n    tabIcon: string;\n    /**\n     * @input {string} The badge for the tab button.\n     */\n    tabBadge: string;\n    /**\n     * @input {string} The badge color for the tab button.\n     */\n    tabBadgeStyle: string;\n    /**\n     * @input {boolean} If true, enable the tab. If false,\n     * the user cannot interact with this element.\n     * Default: `true`.\n     */\n    enabled: boolean;\n    /**\n     * @input {boolean} If true, the tab button is visible within the\n     * tabbar. Default: `true`.\n     */\n    show: boolean;\n    /**\n     * @input {boolean} If true, hide the tabs on child pages.\n     */\n    tabsHideOnSubPages: boolean;\n    /**\n     * @output {Tab} Emitted when the current tab is selected.\n     */\n    ionSelect: EventEmitter<Tab>;\n    constructor(parent: Tabs, app: App, config: Config, plt: Platform, elementRef: ElementRef, zone: NgZone, renderer: Renderer, cfr: ComponentFactoryResolver, _cd: ChangeDetectorRef, gestureCtrl: GestureController, transCtrl: TransitionController, linker: DeepLinker, _dom: DomController, errHandler: ErrorHandler);\n    /**\n     * @hidden\n     */\n    _vp: ViewContainerRef;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    load(opts: NavOptions): Promise<any>;\n    /**\n     * @hidden\n     */\n    resize(): void;\n    /**\n     * @hidden\n     */\n    _viewAttachToDOM(viewCtrl: ViewController, componentRef: ComponentRef<any>, viewport: ViewContainerRef): void;\n    /**\n     * @hidden\n     */\n    setSelected(isSelected: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly index: number;\n    /**\n     * @hidden\n     */\n    updateHref(component: any, data: any): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    getType(): string;\n    goToRoot(opts: NavOptions): Promise<any>;\n}\n"]}