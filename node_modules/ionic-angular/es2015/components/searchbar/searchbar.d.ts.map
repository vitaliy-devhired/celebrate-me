{"version":3,"file":"searchbar.d.ts","sources":["searchbar.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, Renderer } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Config } from '../../config/config';\nimport { BaseInput } from '../../util/base-input';\nimport { TimeoutDebouncer } from '../../util/debouncer';\nimport { Platform } from '../../platform/platform';\n/**\n * @name Searchbar\n * @module ionic\n * @description\n * Manages the display of a Searchbar which can be used to search or filter items.\n *\n * @usage\n * ```html\n * <ion-searchbar\n *   [(ngModel)]=\"myInput\"\n *   [showCancelButton]=\"shouldShowCancel\"\n *   (ionInput)=\"onInput($event)\"\n *   (ionCancel)=\"onCancel($event)\">\n * </ion-searchbar>\n * ```\n *\n * @demo /docs/demos/src/searchbar/\n * @see {@link /docs/components#searchbar Searchbar Component Docs}\n */\nexport declare class Searchbar extends BaseInput<string> {\n    private _plt;\n    _shouldBlur: boolean;\n    _shouldAlignLeft: boolean;\n    _isCancelVisible: boolean;\n    _spellcheck: boolean;\n    _autocomplete: string;\n    _autocorrect: string;\n    _isActive: boolean;\n    _showCancelButton: boolean;\n    _animated: boolean;\n    _inputDebouncer: TimeoutDebouncer;\n    /**\n     * @input {string} Set the the cancel button text. Default: `\"Cancel\"`.\n     */\n    cancelButtonText: string;\n    /**\n     * @input {boolean} If true, show the cancel button. Default `false`.\n     */\n    showCancelButton: boolean;\n    /**\n     * @input {number} How long, in milliseconds, to wait to trigger the `ionInput` event after each keystroke. Default `250`.\n     */\n    debounce: number;\n    /**\n     * @input {string} Set the input's placeholder. Default `\"Search\"`.\n     */\n    placeholder: string;\n    /**\n     * @input {string} Set the input's autocomplete property. Values: `\"on\"`, `\"off\"`. Default `\"off\"`.\n     */\n    autocomplete: string;\n    /**\n     * @input {string} Set the input's autocorrect property. Values: `\"on\"`, `\"off\"`. Default `\"off\"`.\n     */\n    autocorrect: string;\n    /**\n     * @input {string|boolean} Set the input's spellcheck property. Values: `true`, `false`. Default `false`.\n     */\n    spellcheck: string | boolean;\n    /**\n     * @input {string} Set the type of the input. Values: `\"text\"`, `\"password\"`, `\"email\"`, `\"number\"`, `\"search\"`, `\"tel\"`, `\"url\"`. Default `\"search\"`.\n     */\n    type: string;\n    /**\n     * @input {boolean} If true, enable searchbar animation. Default `false`.\n     */\n    animated: boolean;\n    /**\n     * @output {event} Emitted when the Searchbar input has changed, including when it's cleared.\n     */\n    ionInput: EventEmitter<UIEvent>;\n    /**\n     * @output {event} Emitted when the cancel button is clicked.\n     */\n    ionCancel: EventEmitter<UIEvent>;\n    /**\n     * @output {event} Emitted when the clear input button is clicked.\n     */\n    ionClear: EventEmitter<UIEvent>;\n    constructor(config: Config, _plt: Platform, elementRef: ElementRef, renderer: Renderer, ngControl: NgControl);\n    _searchbarInput: ElementRef;\n    _searchbarIcon: ElementRef;\n    _cancelButton: ElementRef;\n    /**\n     * @hidden\n     * On Initialization check for attributes\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    _inputUpdated(): void;\n    /**\n     * @hidden\n     * Positions the input search icon, placeholder, and the cancel button\n     * based on the input value and if it is focused. (ios only)\n     */\n    positionElements(): void;\n    positionPlaceholder(): void;\n    /**\n     * @hidden\n     * Show the iOS Cancel button on focus, hide it offscreen otherwise\n     */\n    positionCancelButton(): void;\n    /**\n     * @hidden\n     * Update the Searchbar input value when the input changes\n     */\n    inputChanged(ev: any): void;\n    /**\n     * @hidden\n     * Sets the Searchbar to focused and active on input focus.\n     */\n    inputFocused(): void;\n    /**\n     * @hidden\n     * Sets the Searchbar to not focused and checks if it should align left\n     * based on whether there is a value in the searchbar or not.\n     */\n    inputBlurred(): void;\n    /**\n     * @hidden\n     * Clears the input field and triggers the control change.\n     */\n    clearInput(ev: UIEvent): void;\n    /**\n     * @hidden\n     * Clears the input field and tells the input to blur since\n     * the clearInput function doesn't want the input to blur\n     * then calls the custom cancel function if the user passed one in.\n     */\n    cancelSearchbar(ev: UIEvent): void;\n    setFocus(): void;\n}\n"]}