{"version":3,"file":"item-reorder.d.ts","sources":["item-reorder.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, NgZone, Renderer } from '@angular/core';\nimport { Content } from '../content/content';\nimport { DomController } from '../../platform/dom-controller';\nimport { ItemReorderGesture, ItemReorderGestureDelegate } from './item-reorder-gesture';\nimport { Platform } from '../../platform/platform';\nexport declare class ReorderIndexes {\n    from: number;\n    to: number;\n    constructor(from: number, to: number);\n    applyTo(array: any): void;\n}\n/**\n * @name ItemReorder\n * @description\n * Item reorder adds the ability to change an item's order in a group.\n * It can be used within an `ion-list` or `ion-item-group` to provide a\n * visual drag and drop interface.\n *\n * ## Grouping Items\n *\n * All reorderable items must be grouped in the same element. If an item\n * should not be reordered, it shouldn't be included in this group. For\n * example, the following code works because the items are grouped in the\n * `<ion-list>`:\n *\n *  ```html\n *  <ion-list reorder=\"true\">\n *    <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *  </ion-list>\n *  ```\n *\n * However, the below list includes a header that shouldn't be reordered:\n *\n *  ```html\n *  <ion-list reorder=\"true\">\n *    <ion-list-header>Header</ion-list-header>\n *    <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *  </ion-list>\n *  ```\n *\n * In order to mix different sets of items, `ion-item-group` should be used to\n * group the reorderable items:\n *\n *  ```html\n *  <ion-list>\n *    <ion-list-header>Header</ion-list-header>\n *    <ion-item-group reorder=\"true\">\n *      <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *    </ion-item-group>\n *  </ion-list>\n *  ```\n *\n * It's important to note that in this example, the `[reorder]` directive is applied to\n * the `<ion-item-group>` instead of the `<ion-list>`. This way makes it possible to\n * mix items that should and shouldn't be reordered.\n *\n *\n * ## Implementing the Reorder Function\n *\n * When the item is dragged and dropped into the new position, the `(ionItemReorder)` event is\n * emitted. This event provides the initial index (from) and the new index (to) of the reordered\n * item. For example, if the first item is dragged to the fifth position, the event will emit\n * `{from: 0, to: 4}`. Note that the index starts at zero.\n *\n * A function should be called when the event is emitted that handles the reordering of the items.\n * See [usage](#usage) below for some examples.\n *\n *\n * @usage\n *\n * ```html\n * <ion-list>\n *   <ion-list-header>Header</ion-list-header>\n *   <ion-item-group reorder=\"true\" (ionItemReorder)=\"reorderItems($event)\">\n *     <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *   </ion-item-group>\n * </ion-list>\n * ```\n *\n * ```ts\n * class MyComponent {\n *   items = [];\n *\n *   constructor() {\n *     for (let x = 0; x < 5; x++) {\n *       this.items.push(x);\n *     }\n *   }\n *\n *   reorderItems(indexes) {\n *     let element = this.items[indexes.from];\n *     this.items.splice(indexes.from, 1);\n *     this.items.splice(indexes.to, 0, element);\n *   }\n * }\n * ```\n *\n * Ionic also provides a helper function called `reorderArray` to\n * reorder the array of items. This can be used instead:\n *\n * ```ts\n * import { reorderArray } from 'ionic-angular';\n *\n * class MyComponent {\n *   items = [];\n *\n *   constructor() {\n *     for (let x = 0; x < 5; x++) {\n *       this.items.push(x);\n *     }\n *   }\n *\n *   reorderItems(indexes) {\n *     this.items = reorderArray(this.items, indexes);\n *   }\n * }\n * ```\n * Alternatevely you can execute helper function inside template:\n *\n * ```html\n * <ion-list>\n *   <ion-list-header>Header</ion-list-header>\n *   <ion-item-group reorder=\"true\" (ionItemReorder)=\"$event.applyTo(items)\">\n *     <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *   </ion-item-group>\n * </ion-list>\n * ```\n *\n * @demo /docs/demos/src/item-reorder/\n * @see {@link /docs/components#lists List Component Docs}\n * @see {@link ../../list/List List API Docs}\n * @see {@link ../Item Item API Docs}\n */\nexport declare class ItemReorder implements ItemReorderGestureDelegate {\n    private _plt;\n    private _dom;\n    private _rendered;\n    private _zone;\n    private _content;\n    _enableReorder: boolean;\n    _visibleReorder: boolean;\n    _isStart: boolean;\n    _reorderGesture: ItemReorderGesture;\n    _lastToIndex: number;\n    _element: HTMLElement;\n    /**\n     * @output {object} Emitted when the item is reordered. Emits an object\n     * with `from` and `to` properties.\n     */\n    ionItemReorder: EventEmitter<ReorderIndexes>;\n    /**\n     * @input {string} Which side of the view the ion-reorder should be placed. Default `\"end\"`.\n     */\n    side: 'start' | 'end';\n    constructor(_plt: Platform, _dom: DomController, elementRef: ElementRef, _rendered: Renderer, _zone: NgZone, _content: Content);\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    reorder: boolean;\n    _reorderPrepare(): void;\n    _reorderStart(): void;\n    _reorderEmit(fromIndex: number, toIndex: number): void;\n    _scrollContent(scroll: number): number;\n    _reorderReset(): void;\n    _reorderMove(fromIndex: number, toIndex: number, itemHeight: number): void;\n    /**\n     * @hidden\n     */\n    setElementClass(classname: string, add: boolean): void;\n    /**\n     * @hidden\n     */\n    getNativeElement(): HTMLElement;\n}\n"]}