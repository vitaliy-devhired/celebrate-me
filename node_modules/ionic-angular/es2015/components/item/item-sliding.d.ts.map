{"version":3,"file":"item-sliding.d.ts","sources":["item-sliding.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, NgZone, QueryList, Renderer } from '@angular/core';\nimport { Item } from './item';\nimport { List } from '../list/list';\nimport { Platform } from '../../platform/platform';\nimport { ItemOptions } from './item-options';\n/**\n * @name ItemSliding\n * @description\n * A sliding item is a list item that can be swiped to reveal buttons. It requires\n * an [Item](../Item) component as a child and a [List](../../list/List) component as\n * a parent. All buttons to reveal can be placed in the `<ion-item-options>` element.\n *\n * @usage\n * ```html\n * <ion-list>\n *   <ion-item-sliding #item>\n *     <ion-item>\n *       Item\n *     </ion-item>\n *     <ion-item-options side=\"left\">\n *       <button ion-button (click)=\"favorite(item)\">Favorite</button>\n *       <button ion-button color=\"danger\" (click)=\"share(item)\">Share</button>\n *     </ion-item-options>\n *\n *     <ion-item-options side=\"right\">\n *       <button ion-button (click)=\"unread(item)\">Unread</button>\n *     </ion-item-options>\n *   </ion-item-sliding>\n * </ion-list>\n * ```\n *\n * ### Swipe Direction\n * By default, the buttons are revealed when the sliding item is swiped from right to left,\n * so the buttons are placed in the right side. But it's also possible to reveal them\n * in the right side (sliding from left to right) by setting the `side` attribute\n * on the `ion-item-options` element. Up to 2 `ion-item-options` can used at the same time\n * in order to reveal two different sets of buttons depending the swipping direction.\n *\n * ```html\n * <ion-item-options side=\"right\">\n *   <button ion-button (click)=\"archive(item)\">\n *     <ion-icon name=\"archive\"></ion-icon>\n *     Archive\n *   </button>\n * </ion-item-options>\n *\n * <ion-item-options side=\"left\">\n *   <button ion-button (click)=\"archive(item)\">\n *     <ion-icon name=\"archive\"></ion-icon>\n *     Archive\n *   </button>\n * </ion-item-options>\n * ```\n *\n * ### Listening for events (ionDrag) and (ionSwipe)\n * It's possible to know the current relative position of the sliding item by subscribing\n * to the (ionDrag)` event.\n *\n * ```html\n * <ion-item-sliding (ionDrag)=\"logDrag($event)\">\n *   <ion-item>Item</ion-item>\n *   <ion-item-options>\n *     <button ion-button>Favorite</button>\n *   </ion-item-options>\n * </ion-item-sliding>\n * ```\n *\n * ### Button Layout\n * If an icon is placed with text in the option button, by default it will\n * display the icon on top of the text. This can be changed to display the icon\n * to the left of the text by setting `icon-start` as an attribute on the\n * `<ion-item-options>` element.\n *\n * ```html\n * <ion-item-options icon-start>\n *    <button ion-button (click)=\"archive(item)\">\n *      <ion-icon name=\"archive\"></ion-icon>\n *      Archive\n *    </button>\n *  </ion-item-options>\n *\n * ```\n *\n * ### Expandable Options\n *\n * Options can be expanded to take up the full width of the item if you swipe past\n * a certain point. This can be combined with the `ionSwipe` event to call methods\n * on the class.\n *\n * ```html\n *\n * <ion-item-sliding>\n *   <ion-item>Item</ion-item>\n *   <ion-item-options (ionSwipe)=\"delete(item)\">\n *     <button ion-button expandable (click)=\"delete(item)\">Delete</button>\n *   </ion-item-options>\n * </ion-item-sliding>\n * ```\n *\n * We can call `delete` by either clicking the button, or by doing a full swipe on the item.\n *\n * @demo /docs/demos/src/item-sliding/\n * @see {@link /docs/components#lists List Component Docs}\n * @see {@link ../Item Item API Docs}\n * @see {@link ../../list/List List API Docs}\n */\nexport declare class ItemSliding {\n    private _plt;\n    private _renderer;\n    private _elementRef;\n    private _zone;\n    private _openAmount;\n    private _startX;\n    private _optsWidthRightSide;\n    private _optsWidthLeftSide;\n    private _sides;\n    private _tmr;\n    private _leftOptions;\n    private _rightOptions;\n    private _optsDirty;\n    private _state;\n    /**\n     * @hidden\n     */\n    item: Item;\n    /**\n     * @output {event} Emitted when the sliding position changes.\n     * It reports the relative position.\n     *\n     * ```ts\n     * ondrag(item) {\n     *   let percent = item.getSlidingPercent();\n     *   if (percent > 0) {\n     *     // positive\n     *     console.log('right side');\n     *   } else {\n     *     // negative\n     *     console.log('left side');\n     *   }\n     *   if (Math.abs(percent) > 1) {\n     *     console.log('overscroll');\n     *   }\n     * }\n     * ```\n     *\n     */\n    ionDrag: EventEmitter<ItemSliding>;\n    constructor(list: List, _plt: Platform, _renderer: Renderer, _elementRef: ElementRef, _zone: NgZone);\n    _itemOptions: QueryList<ItemOptions>;\n    /**\n     * @hidden\n     */\n    getOpenAmount(): number;\n    /**\n     * @hidden\n     */\n    getSlidingPercent(): number;\n    /**\n     * @hidden\n     */\n    startSliding(startX: number): void;\n    /**\n     * @hidden\n     */\n    moveSliding(x: number): number;\n    /**\n     * @hidden\n     */\n    endSliding(velocity: number): number;\n    /**\n     * @hidden\n     */\n    private fireSwipeEvent();\n    /**\n     * @hidden\n     */\n    private calculateOptsWidth();\n    private _setOpenAmount(openAmount, isFinal);\n    private _setState(state);\n    /**\n     * Close the sliding item. Items can also be closed from the [List](../../list/List).\n     *\n     * The sliding item can be closed by grabbing a reference to `ItemSliding`. In the\n     * below example, the template reference variable `slidingItem` is placed on the element\n     * and passed to the `share` method.\n     *\n     * ```html\n     * <ion-list>\n     *   <ion-item-sliding #slidingItem>\n     *     <ion-item>\n     *       Item\n     *     </ion-item>\n     *     <ion-item-options>\n     *       <button ion-button (click)=\"share(slidingItem)\">Share</button>\n     *     </ion-item-options>\n     *   </ion-item-sliding>\n     * </ion-list>\n     * ```\n     *\n     * ```ts\n     * import { Component } from '@angular/core';\n     * import { ItemSliding } from 'ionic-angular';\n     *\n     * @Component({...})\n     * export class MyClass {\n     *   constructor() { }\n     *\n     *   share(slidingItem: ItemSliding) {\n     *     slidingItem.close();\n     *   }\n     * }\n     * ```\n     */\n    close(): void;\n    /**\n     * @hidden\n     */\n    setElementClass(cssClass: string, shouldAdd: boolean): void;\n}\n"]}