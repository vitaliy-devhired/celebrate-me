{"version":3,"file":"keyboard.d.ts","sources":["keyboard.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, NgZone } from '@angular/core';\nimport { Config } from '../config/config';\nimport { DomController } from './dom-controller';\nimport { Platform } from './platform';\n/**\n * @name Keyboard\n * @description\n * The `Keyboard` class allows you to work with the keyboard events provided\n * by the Ionic keyboard plugin.\n *\n * @usage\n * ```ts\n * export class MyClass {\n *\n *   constructor(public keyboard: Keyboard) { }\n *\n * }\n * ```\n */\nexport declare class Keyboard {\n    private _plt;\n    private _zone;\n    private _dom;\n    _tmr: number;\n    willShow: EventEmitter<number>;\n    willHide: EventEmitter<void>;\n    didShow: EventEmitter<number>;\n    didHide: EventEmitter<void>;\n    eventsAvailable: boolean;\n    constructor(config: Config, _plt: Platform, _zone: NgZone, _dom: DomController);\n    private listenV2(win);\n    private listenV1(win);\n    private blurActiveInput(shouldBlur);\n    /**\n     * Check to see if the keyboard is open or not.\n     *\n     * ```ts\n     * export class MyClass {\n     *   constructor(public keyboard: Keyboard) {\n     *\n     *   }\n     *\n     *   keyboardCheck() {\n     *     console.log('The keyboard is open:', this.keyboard.isOpen());\n     *   }\n     * }\n     * ```\n     *\n     * @return {boolean} returns a true or false value if the keyboard is open or not.\n     */\n    isOpen(): boolean;\n    /**\n     * When the keyboard is closed, call any methods you want.\n     *\n     * ```ts\n     * export class MyClass {\n     *   constructor(public keyboard: Keyboard) {\n     *     this.keyboard.onClose(this.closeCallback);\n     *   }\n     *   closeCallback() {\n     *     // call what ever functionality you want on keyboard close\n     *     console.log('Closing time');\n     *   }\n     * }\n     * ```\n     *\n     * @param {function} callback method you want to call when the keyboard has been closed.\n     * @return {function} returns a callback that gets fired when the keyboard is closed.\n     */\n    onClose(callback: Function, pollingInternval?: number, pollingChecksMax?: number): Promise<any>;\n    /**\n     * Programmatically close the keyboard.\n     */\n    close(): void;\n    /**\n     * @hidden\n     */\n    focusOutline(setting: any): void;\n    hasFocusedTextInput(): boolean;\n    /**\n     * Set to true to hide the additional toolbar that is on top of the keyboard.\n     * This toolbar features the Prev, Next, and Done buttons.\n     * @param hidden\n     */\n    hideFormAccessoryBar(hidden: boolean): void;\n}\n"]}