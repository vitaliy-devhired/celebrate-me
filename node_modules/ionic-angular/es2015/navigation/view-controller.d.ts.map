{"version":3,"file":"view-controller.d.ts","sources":["view-controller.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentRef, ElementRef, EventEmitter, Renderer } from '@angular/core';\nimport { NavController } from './nav-controller';\nimport { NavOptions } from './nav-util';\nimport { NavParams } from './nav-params';\nimport { Content, Footer, Header, Navbar } from './nav-interfaces';\n/**\n * @name ViewController\n * @description\n * Access various features and information about the current view.\n * @usage\n *  ```ts\n * import { Component } from '@angular/core';\n * import { ViewController } from 'ionic-angular';\n *\n * @Component({...})\n * export class MyPage{\n *\n *   constructor(public viewCtrl: ViewController) {}\n *\n * }\n * ```\n */\nexport declare class ViewController {\n    component: any;\n    private _cntDir;\n    private _cntRef;\n    private _ionCntDir;\n    private _ionCntRef;\n    private _hdrDir;\n    private _ftrDir;\n    private _isHidden;\n    private _leavingOpts;\n    private _nb;\n    private _onDidDismiss;\n    private _onWillDismiss;\n    private _dismissData;\n    private _dismissRole;\n    private _detached;\n    _cmp: ComponentRef<any>;\n    _nav: NavController;\n    _zIndex: number;\n    _state: number;\n    _cssClass: string;\n    _ts: number;\n    _bindHandler: any;\n    /**\n     * Observable to be subscribed to when the current component will become active\n     * @returns {Observable} Returns an observable\n     */\n    willEnter: EventEmitter<any>;\n    /**\n     * Observable to be subscribed to when the current component has become active\n     * @returns {Observable} Returns an observable\n     */\n    didEnter: EventEmitter<any>;\n    /**\n     * Observable to be subscribed to when the current component will no longer be active\n     * @returns {Observable} Returns an observable\n     */\n    willLeave: EventEmitter<any>;\n    /**\n     * Observable to be subscribed to when the current component is no long active\n     * @returns {Observable} Returns an observable\n     */\n    didLeave: EventEmitter<any>;\n    /**\n     * Observable to be subscribed to when the current component has been destroyed\n     * @returns {Observable} Returns an observable\n     */\n    willUnload: EventEmitter<any>;\n    /**\n     * @hidden\n     */\n    readReady: EventEmitter<any>;\n    /**\n     * @hidden\n     */\n    writeReady: EventEmitter<any>;\n    /** @hidden */\n    data: any;\n    /** @hidden */\n    instance: any;\n    /** @hidden */\n    id: string;\n    /** @hidden */\n    isOverlay: boolean;\n    /** @hidden */\n    private _emitter;\n    constructor(component?: any, data?: any, rootCssClass?: string);\n    handleOrientationChange(): void;\n    /**\n     * @hidden\n     */\n    init(componentRef: ComponentRef<any>): void;\n    _setNav(navCtrl: NavController): void;\n    _setInstance(instance: any): void;\n    /**\n     * @hidden\n     */\n    subscribe(generatorOrNext?: any): any;\n    /**\n     * @hidden\n     */\n    emit(data?: any): void;\n    /**\n     * Called when the current viewController has be successfully dismissed\n     */\n    onDidDismiss(callback: (data: any, role: string) => void): void;\n    /**\n     * Called when the current viewController will be dismissed\n     */\n    onWillDismiss(callback: (data: any, role: string) => void): void;\n    /**\n     * Dismiss the current viewController\n     * @param {any} [data] Data that you want to return when the viewController is dismissed.\n     * @param {any} [role ]\n     * @param {NavOptions} navOptions Options for the dismiss navigation.\n     * @returns {any} data Returns the data passed in, if any.\n     */\n    dismiss(data?: any, role?: string, navOptions?: NavOptions): Promise<any>;\n    /**\n     * @hidden\n     */\n    getNav(): NavController;\n    /**\n     * @hidden\n     */\n    getTransitionName(_direction: string): string;\n    /**\n     * @hidden\n     */\n    getNavParams(): NavParams;\n    /**\n     * @hidden\n     */\n    setLeavingOpts(opts: NavOptions): void;\n    /**\n     * Check to see if you can go back in the navigation stack.\n     * @returns {boolean} Returns if it's possible to go back from this Page.\n     */\n    enableBack(): boolean;\n    /**\n     * @hidden\n     */\n    readonly name: string;\n    /**\n     * Get the index of the current component in the current navigation stack.\n     * @returns {number} Returns the index of this page within its `NavController`.\n     */\n    readonly index: number;\n    /**\n     * @returns {boolean} Returns if this Page is the first in the stack of pages within its NavController.\n     */\n    isFirst(): boolean;\n    /**\n     * @returns {boolean} Returns if this Page is the last in the stack of pages within its NavController.\n     */\n    isLast(): boolean;\n    /**\n     * @hidden\n     * DOM WRITE\n     */\n    _domShow(shouldShow: boolean, renderer: Renderer): void;\n    /**\n     * @hidden\n     */\n    getZIndex(): number;\n    /**\n     * @hidden\n     * DOM WRITE\n     */\n    _setZIndex(zIndex: number, renderer: Renderer): void;\n    /**\n     * @returns {ElementRef} Returns the Page's ElementRef.\n     */\n    pageRef(): ElementRef;\n    _setContent(directive: any): void;\n    /**\n     * @returns {component} Returns the Page's Content component reference.\n     */\n    getContent(): any;\n    _setContentRef(elementRef: ElementRef): void;\n    /**\n     * @returns {ElementRef} Returns the Content's ElementRef.\n     */\n    contentRef(): ElementRef;\n    _setIONContent(content: Content): void;\n    /**\n     * @hidden\n     */\n    getIONContent(): Content;\n    _setIONContentRef(elementRef: ElementRef): void;\n    /**\n     * @hidden\n     */\n    getIONContentRef(): ElementRef;\n    _setHeader(directive: Header): void;\n    /**\n     * @hidden\n     */\n    getHeader(): Header;\n    _setFooter(directive: Footer): void;\n    /**\n     * @hidden\n     */\n    getFooter(): Footer;\n    _setNavbar(directive: Navbar): void;\n    /**\n     * @hidden\n     */\n    getNavbar(): Navbar;\n    /**\n     * Find out if the current component has a NavBar or not. Be sure\n     * to wrap this in an `ionViewWillEnter` method in order to make sure\n     * the view has rendered fully.\n     * @returns {boolean} Returns a boolean if this Page has a navbar or not.\n     */\n    hasNavbar(): boolean;\n    /**\n     * Change the title of the back-button. Be sure to call this\n     * after `ionViewWillEnter` to make sure the  DOM has been rendered.\n     * @param {string} val Set the back button text.\n     */\n    setBackButtonText(val: string): void;\n    /**\n     * Set if the back button for the current view is visible or not. Be sure to call this\n     * after `ionViewWillEnter` to make sure the  DOM has been rendered.\n     * @param {boolean} Set if this Page's back button should show or not.\n     */\n    showBackButton(shouldShow: boolean): void;\n    _preLoad(): void;\n    /**\n     * @hidden\n     * The view has loaded. This event only happens once per view will be created.\n     * This event is fired before the component and his children have been initialized.\n     */\n    _willLoad(): void;\n    /**\n     * @hidden\n     * The view has loaded. This event only happens once per view being\n     * created. If a view leaves but is cached, then this will not\n     * fire again on a subsequent viewing. This method is a good place\n     * to put your setup code for the view; however, it is not the\n     * recommended method to use when a view becomes active.\n     */\n    _didLoad(): void;\n    /**\n     * @hidden\n     * The view is about to enter and become the active view.\n     */\n    _willEnter(): void;\n    /**\n     * @hidden\n     * The view has fully entered and is now the active view. This\n     * will fire, whether it was the first load or loaded from the cache.\n     */\n    _didEnter(): void;\n    /**\n     * @hidden\n     * The view is about to leave and no longer be the active view.\n     */\n    _willLeave(willUnload: boolean): void;\n    /**\n     * @hidden\n     * The view has finished leaving and is no longer the active view. This\n     * will fire, whether it is cached or unloaded.\n     */\n    _didLeave(): void;\n    /**\n     * @hidden\n     */\n    _willUnload(): void;\n    /**\n     * @hidden\n     * DOM WRITE\n     */\n    _destroy(renderer: Renderer): void;\n    /**\n     * @hidden\n     */\n    _lifecycleTest(lifecycle: string): Promise<boolean>;\n    /**\n     * @hidden\n     */\n    _lifecycle(lifecycle: string): void;\n}\nexport declare function isViewController(viewCtrl: any): boolean;\n"]}