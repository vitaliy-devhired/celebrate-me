{"version":3,"file":"nav-controller-base.d.ts","sources":["nav-controller-base.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentFactoryResolver, ComponentRef, ElementRef, ErrorHandler, EventEmitter, NgZone, Renderer, ViewContainerRef } from '@angular/core';\nimport { App } from '../components/app/app';\nimport { Config } from '../config/config';\nimport { NavOptions, NavResult, TransitionDoneFn, TransitionInstruction } from './nav-util';\nimport { DeepLinker } from './deep-linker';\nimport { DomController } from '../platform/dom-controller';\nimport { GestureController } from '../gestures/gesture-controller';\nimport { ViewController } from './view-controller';\nimport { Ion } from '../components/ion';\nimport { NavigationContainer } from './navigation-container';\nimport { NavController } from './nav-controller';\nimport { Platform } from '../platform/platform';\nimport { SwipeBackGesture } from './swipe-back';\nimport { Transition } from '../transitions/transition';\nimport { TransitionController } from '../transitions/transition-controller';\n/**\n * @hidden\n * This class is for internal use only. It is not exported publicly.\n */\nexport declare class NavControllerBase extends Ion implements NavController {\n    parent: any;\n    _app: App;\n    config: Config;\n    plt: Platform;\n    _zone: NgZone;\n    _cfr: ComponentFactoryResolver;\n    _gestureCtrl: GestureController;\n    _trnsCtrl: TransitionController;\n    _linker: DeepLinker;\n    private _domCtrl;\n    private _errHandler;\n    _children: NavigationContainer[];\n    _ids: number;\n    _init: boolean;\n    _isPortal: boolean;\n    _queue: TransitionInstruction[];\n    _sbEnabled: boolean;\n    _sbGesture: SwipeBackGesture;\n    _sbTrns: Transition;\n    _trnsId: number;\n    _trnsTm: boolean;\n    _viewport: ViewContainerRef;\n    _views: ViewController[];\n    _zIndexOffset: number;\n    _destroyed: boolean;\n    viewDidLoad: EventEmitter<any>;\n    viewWillEnter: EventEmitter<any>;\n    viewDidEnter: EventEmitter<any>;\n    viewWillLeave: EventEmitter<any>;\n    viewDidLeave: EventEmitter<any>;\n    viewWillUnload: EventEmitter<any>;\n    id: string;\n    name: string;\n    swipeBackEnabled: boolean;\n    constructor(parent: any, _app: App, config: Config, plt: Platform, elementRef: ElementRef, _zone: NgZone, renderer: Renderer, _cfr: ComponentFactoryResolver, _gestureCtrl: GestureController, _trnsCtrl: TransitionController, _linker: DeepLinker, _domCtrl: DomController, _errHandler: ErrorHandler);\n    push(page: any, params?: any, opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    insert(insertIndex: number, page: any, params?: any, opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    insertPages(insertIndex: number, insertPages: any[], opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    pop(opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    popTo(indexOrViewCtrl: any, opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    popToRoot(opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    popAll(): Promise<any[]>;\n    remove(startIndex: number, removeCount?: number, opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    removeView(viewController: ViewController, opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    setRoot(pageOrViewCtrl: any, params?: any, opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    setPages(viewControllers: any[], opts?: NavOptions, done?: TransitionDoneFn): Promise<any>;\n    _queueTrns(ti: TransitionInstruction, done: TransitionDoneFn): Promise<boolean>;\n    _success(result: NavResult, ti: TransitionInstruction): void;\n    _failed(rejectReason: any, ti: TransitionInstruction): void;\n    _fireError(rejectReason: any, ti: TransitionInstruction): void;\n    _nextTrns(): boolean;\n    _startTI(ti: TransitionInstruction): Promise<void>;\n    _loadLazyLoading(ti: TransitionInstruction): Promise<void>;\n    _getEnteringView(ti: TransitionInstruction, leavingView: ViewController): ViewController;\n    _postViewInit(enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): void;\n    /**\n     * DOM WRITE\n     */\n    _viewInit(enteringView: ViewController): void;\n    _viewAttachToDOM(view: ViewController, componentRef: ComponentRef<any>, viewport: ViewContainerRef): void;\n    _viewTest(enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<void>;\n    _transition(enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<NavResult>;\n    _transitionStart(transition: Transition, enteringView: ViewController, leavingView: ViewController, opts: NavOptions): Promise<NavResult>;\n    _transitionFinish(transition: Transition, opts: NavOptions): NavResult;\n    _viewsWillLifecycles(enteringView: ViewController, leavingView: ViewController): void;\n    _insertViewAt(view: ViewController, index: number): void;\n    _removeView(view: ViewController): void;\n    _destroyView(view: ViewController): void;\n    /**\n     * DOM WRITE\n     */\n    _cleanup(activeView: ViewController): void;\n    _preLoad(view: ViewController): void;\n    _willLoad(view: ViewController): void;\n    _didLoad(view: ViewController): void;\n    _willEnter(view: ViewController): void;\n    _didEnter(view: ViewController): void;\n    _willLeave(view: ViewController, willUnload: boolean): void;\n    _didLeave(view: ViewController): void;\n    _willUnload(view: ViewController): void;\n    hasChildren(): boolean;\n    getActiveChildNavs(): any[];\n    getAllChildNavs(): any[];\n    registerChildNav(container: NavigationContainer): void;\n    unregisterChildNav(nav: any): void;\n    destroy(): void;\n    swipeBackStart(): void;\n    swipeBackProgress(stepValue: number): void;\n    swipeBackEnd(shouldComplete: boolean, currentStepValue: number, velocity: number): void;\n    _swipeBackCheck(): void;\n    canSwipeBack(): boolean;\n    canGoBack(): boolean;\n    isTransitioning(): boolean;\n    setTransitioning(isTransitioning: boolean): void;\n    getActive(): ViewController;\n    isActive(view: ViewController): boolean;\n    getByIndex(index: number): ViewController;\n    getPrevious(view?: ViewController): ViewController;\n    first(): ViewController;\n    last(): ViewController;\n    indexOf(view: ViewController): number;\n    length(): number;\n    getViews(): Array<ViewController>;\n    /**\n     * Return a view controller\n     */\n    getViewById(id: string): ViewController;\n    isSwipeBackEnabled(): boolean;\n    dismissPageChangeViews(): void;\n    setViewport(val: ViewContainerRef): void;\n    resize(): void;\n    goToRoot(_opts: NavOptions): Promise<any>;\n    getType(): string;\n    getSecondaryIdentifier(): string;\n    /**\n     * Returns the active child navigation.\n     */\n    getActiveChildNav(): any;\n}\n"]}