{"version":3,"file":"base-input.d.ts","sources":["base-input.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ElementRef, EventEmitter, Renderer } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport { IonicFormInput } from './form';\nimport { Ion } from '../components/ion';\nimport { Config } from '../config/config';\nimport { Item } from '../components/item/item';\nimport { Form } from './form';\nimport { TimeoutDebouncer } from './debouncer';\nexport interface CommonInput<T> extends ControlValueAccessor, AfterContentInit, IonicFormInput {\n    id: string;\n    disabled: boolean;\n    value: T;\n    ionFocus: EventEmitter<CommonInput<T>>;\n    ionChange: EventEmitter<BaseInput<T>>;\n    ionBlur: EventEmitter<BaseInput<T>>;\n    initFocus(): void;\n    isFocus(): boolean;\n    _inputNormalize(val: any): T;\n    _inputShouldChange(val: T): boolean;\n    _inputUpdated(): void;\n}\nexport declare class BaseInput<T> extends Ion implements CommonInput<T> {\n    private _defaultValue;\n    _form: Form;\n    _item: Item;\n    _ngControl: NgControl;\n    _value: T;\n    _onChanged: Function;\n    _onTouched: Function;\n    _isFocus: boolean;\n    _labelId: string;\n    _disabled: boolean;\n    _debouncer: TimeoutDebouncer;\n    _init: boolean;\n    _initModel: boolean;\n    id: string;\n    /**\n     * @output {Range} Emitted when the range selector drag starts.\n     */\n    ionFocus: EventEmitter<BaseInput<T>>;\n    /**\n     * @output {Range} Emitted when the range value changes.\n     */\n    ionChange: EventEmitter<BaseInput<T>>;\n    /**\n     * @output {Range} Emitted when the range selector drag ends.\n     */\n    ionBlur: EventEmitter<BaseInput<T>>;\n    /**\n     * @input {boolean} If true, the user cannot interact with this element.\n     */\n    disabled: boolean;\n    constructor(config: Config, elementRef: ElementRef, renderer: Renderer, name: string, _defaultValue: T, _form: Form, _item: Item, _ngControl: NgControl);\n    value: T;\n    setValue(val: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    writeValue(val: any): void;\n    /**\n     * @hidden\n     */\n    _writeValue(val: any): boolean;\n    /**\n     * @hidden\n     */\n    _fireIonChange(): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: Function): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    _initialize(): void;\n    /**\n     * @hidden\n     */\n    _fireFocus(): void;\n    /**\n     * @hidden\n     */\n    _fireBlur(): void;\n    /**\n     * @hidden\n     */\n    _fireTouched(): void;\n    /**\n     * @hidden\n     */\n    private _setFocus(isFocused);\n    /**\n     * @hidden\n     */\n    private onChange();\n    /**\n     * @hidden\n     */\n    isFocus(): boolean;\n    /**\n     * @hidden\n     */\n    hasValue(): boolean;\n    /**\n     * @hidden\n     */\n    focusNext(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n     * @hidden\n     */\n    initFocus(): void;\n    /**\n     * @hidden\n     */\n    _inputNormalize(val: any): T;\n    /**\n     * @hidden\n     */\n    _inputShouldChange(val: T): boolean;\n    /**\n     * @hidden\n     */\n    _inputChangeEvent(): any;\n    /**\n     * @hidden\n     */\n    _inputNgModelEvent(): any;\n    /**\n     * @hidden\n     */\n    _inputUpdated(): void;\n}\n"]}