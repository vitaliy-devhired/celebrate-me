{"version":3,"file":"module-loader.d.ts","sources":["module-loader.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ComponentFactoryResolver, InjectionToken, Injector, NgModuleFactory, NgZone, Type } from '@angular/core';\nimport { Config } from '../config/config';\nimport { DeepLinkConfig } from '../navigation/nav-util';\nimport { NgModuleLoader } from './ng-module-loader';\nexport declare const LAZY_LOADED_TOKEN: InjectionToken<any>;\n/**\n * @hidden\n */\nexport declare class ModuleLoader {\n    private _ngModuleLoader;\n    private _injector;\n    /** @internal */\n    _cfrMap: Map<any, ComponentFactoryResolver>;\n    _promiseMap: Map<string, Promise<NgModuleFactory<any>>>;\n    constructor(_ngModuleLoader: NgModuleLoader, _injector: Injector);\n    load(modulePath: string): Promise<LoadedModule>;\n    getComponentFactoryResolver(component: Type<any>): ComponentFactoryResolver;\n}\n/**\n * @hidden\n */\nexport declare function provideModuleLoader(ngModuleLoader: NgModuleLoader, injector: Injector): ModuleLoader;\nexport interface LoadedModule {\n    componentFactoryResolver: ComponentFactoryResolver;\n    component: Type<any>;\n}\n/**\n * @hidden\n */\nexport declare function setupPreloadingImplementation(config: Config, deepLinkConfig: DeepLinkConfig, moduleLoader: ModuleLoader): Promise<any>;\n/**\n * @hidden\n */\nexport declare function setupPreloading(config: Config, deepLinkConfig: DeepLinkConfig, moduleLoader: ModuleLoader, ngZone: NgZone): () => void;\n"]}