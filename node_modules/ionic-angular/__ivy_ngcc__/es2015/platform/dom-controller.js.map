{"version":3,"file":"dom-controller.js","sources":["dom-controller.js"],"names":[],"mappingsqHAGE;AACF;AACA;AACA;AACA;;;yEAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * Adopted from FastDom\n * https://github.com/wilsonpage/fastdom\n * MIT License\n */\nimport { Injectable } from '@angular/core';\nimport { Platform } from './platform';\nimport { removeArrayItem } from '../util/util';\n/**\n * @hidden\n */\nexport class DomDebouncer {\n    constructor(dom) {\n        this.dom = dom;\n        this.writeTask = null;\n        this.readTask = null;\n    }\n    read(fn) {\n        if (this.readTask) {\n            return;\n        }\n        return this.readTask = this.dom.read((t) => {\n            this.readTask = null;\n            fn(t);\n        });\n    }\n    write(fn) {\n        if (this.writeTask) {\n            return;\n        }\n        return this.writeTask = this.dom.write((t) => {\n            this.writeTask = null;\n            fn(t);\n        });\n    }\n    cancel() {\n        const writeTask = this.writeTask;\n        writeTask && this.dom.cancel(writeTask);\n        const readTask = this.readTask;\n        readTask && this.dom.cancel(readTask);\n        this.readTask = this.writeTask = null;\n    }\n}\n/**\n * @hidden\n */\nexport class DomController {\n    constructor(plt) {\n        this.plt = plt;\n        this.r = [];\n        this.w = [];\n    }\n    debouncer() {\n        return new DomDebouncer(this);\n    }\n    read(fn, timeout) {\n        if (timeout) {\n            fn.timeoutId = this.plt.timeout(() => {\n                this.r.push(fn);\n                this._queue();\n            }, timeout);\n        }\n        else {\n            this.r.push(fn);\n            this._queue();\n        }\n        return fn;\n    }\n    write(fn, timeout) {\n        if (timeout) {\n            fn.timeoutId = this.plt.timeout(() => {\n                this.w.push(fn);\n                this._queue();\n            }, timeout);\n        }\n        else {\n            this.w.push(fn);\n            this._queue();\n        }\n        return fn;\n    }\n    cancel(fn) {\n        if (fn) {\n            if (fn.timeoutId) {\n                this.plt.cancelTimeout(fn.timeoutId);\n            }\n            removeArrayItem(this.r, fn) || removeArrayItem(this.w, fn);\n        }\n    }\n    _queue() {\n        const self = this;\n        if (!self.q) {\n            self.q = true;\n            self.plt.raf(function rafCallback(timeStamp) {\n                self._flush(timeStamp);\n            });\n        }\n    }\n    _flush(timeStamp) {\n        let err;\n        try {\n            dispatch(timeStamp, this.r, this.w);\n        }\n        catch (e) {\n            err = e;\n        }\n        this.q = false;\n        if (this.r.length || this.w.length) {\n            this._queue();\n        }\n        if (err) {\n            throw err;\n        }\n    }\n}\nDomController.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nDomController.ctorParameters = () => [\n    { type: Platform, },\n];\nfunction dispatch(timeStamp, r, w) {\n    let fn;\n    // ******** DOM READS ****************\n    while (fn = r.shift()) {\n        fn(timeStamp);\n    }\n    // ******** DOM WRITES ****************\n    while (fn = w.shift()) {\n        fn(timeStamp);\n    }\n}\n"]}