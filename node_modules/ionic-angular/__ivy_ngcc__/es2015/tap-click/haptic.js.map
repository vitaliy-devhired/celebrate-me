{"version":3,"file":"haptic.js","sources":["haptic.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;gGAGE;AACF;AACA;AACA;AACA;;;yEAAE;AACF","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform } from '../platform/platform';\n/**\n * @name Haptic\n * @description\n * The `Haptic` class interacts with a haptic engine on the device, if\n * available. Generally, Ionic components use this under the hood, but you're\n * welcome to get a bit crazy with it if you fancy.\n *\n * Currently, this uses the Taptic engine on iOS.\n *\n * @usage\n * ```ts\n * export class MyClass {\n *\n *  constructor(haptic: Haptic) {\n *    haptic.selection();\n *  }\n * }\n *\n * ```\n */\nexport class Haptic {\n    constructor(plt) {\n        if (plt) {\n            plt.ready().then(() => {\n                this._p = plt.win().TapticEngine;\n            });\n        }\n    }\n    /**\n     * Check to see if the Haptic Plugin is available\n     * @return {boolean} Returns true or false if the plugin is available\n     *\n     */\n    available() {\n        return !!this._p;\n    }\n    /**\n     * Trigger a selection changed haptic event. Good for one-time events\n     * (not for gestures)\n     */\n    selection() {\n        this._p && this._p.selection();\n    }\n    /**\n     * Tell the haptic engine that a gesture for a selection change is starting.\n     */\n    gestureSelectionStart() {\n        this._p && this._p.gestureSelectionStart();\n    }\n    /**\n     * Tell the haptic engine that a selection changed during a gesture.\n     */\n    gestureSelectionChanged() {\n        this._p && this._p.gestureSelectionChanged();\n    }\n    /**\n     * Tell the haptic engine we are done with a gesture. This needs to be\n     * called lest resources are not properly recycled.\n     */\n    gestureSelectionEnd() {\n        this._p && this._p.gestureSelectionEnd();\n    }\n    /**\n     * Use this to indicate success/failure/warning to the user.\n     * options should be of the type `{ type: 'success' }` (or `warning`/`error`)\n     */\n    notification(options) {\n        this._p && this._p.notification(options);\n    }\n    /**\n     * Use this to indicate success/failure/warning to the user.\n     * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n     */\n    impact(options) {\n        this._p && this._p.impact(options);\n    }\n}\nHaptic.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nHaptic.ctorParameters = () => [\n    { type: Platform, },\n];\n"]}