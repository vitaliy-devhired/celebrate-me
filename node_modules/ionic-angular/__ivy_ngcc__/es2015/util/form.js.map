{"version":3,"file":"form.js","sources":["form.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;0FAGE;AACF;AACA;;;gDAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { removeArrayItem } from './util';\n/**\n * @hidden\n */\nexport class Form {\n    constructor() {\n        this._focused = null;\n        this._ids = -1;\n        this._inputs = [];\n    }\n    register(input) {\n        this._inputs.push(input);\n    }\n    deregister(input) {\n        removeArrayItem(this._inputs, input);\n        this.unsetAsFocused(input);\n    }\n    setAsFocused(input) {\n        this._focused = input;\n    }\n    unsetAsFocused(input) {\n        if (input === this._focused) {\n            this._focused = null;\n        }\n    }\n    /**\n     * Focuses the next input element, if it exists.\n     */\n    tabFocus(currentInput) {\n        const inputs = this._inputs;\n        let index = inputs.indexOf(currentInput) + 1;\n        if (index > 0 && index < inputs.length) {\n            var nextInput = inputs[index];\n            if (nextInput !== this._focused) {\n                (void 0) /* console.debug */;\n                return nextInput.initFocus();\n            }\n        }\n        index = inputs.indexOf(this._focused);\n        if (index > 0) {\n            var previousInput = inputs[index - 1];\n            if (previousInput) {\n                (void 0) /* console.debug */;\n                previousInput.initFocus();\n            }\n        }\n    }\n    nextId() {\n        return ++this._ids;\n    }\n}\nForm.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nForm.ctorParameters = () => [];\n/**\n * @hidden\n */\nexport class IonicTapInput {\n}\n/**\n * @hidden\n */\nexport class IonicFormInput {\n}\n"]}