{"version":3,"file":"module-loader.js","sources":["module-loader.js"],"names":[],"mappings":"AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kHAGE;AACF;AACA;AACA;AACA;AACA;;;0GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { NgModuleLoader } from './ng-module-loader';\nimport { requestIonicCallback } from './util';\nexport const LAZY_LOADED_TOKEN = new InjectionToken('LZYCMP');\n/**\n * @hidden\n */\nexport class ModuleLoader {\n    constructor(_ngModuleLoader, _injector) {\n        this._ngModuleLoader = _ngModuleLoader;\n        this._injector = _injector;\n        /** @internal */\n        this._cfrMap = new Map();\n        this._promiseMap = new Map();\n    }\n    load(modulePath) {\n        (void 0) /* console.time */;\n        const splitString = modulePath.split(SPLITTER);\n        let promise = this._promiseMap.get(modulePath);\n        if (!promise) {\n            promise = this._ngModuleLoader.load(splitString[0], splitString[1]);\n            this._promiseMap.set(modulePath, promise);\n        }\n        return promise.then(loadedModule => {\n            (void 0) /* console.timeEnd */;\n            const ref = loadedModule.create(this._injector);\n            const component = ref.injector.get(LAZY_LOADED_TOKEN);\n            this._cfrMap.set(component, ref.componentFactoryResolver);\n            return {\n                componentFactoryResolver: ref.componentFactoryResolver,\n                component: component\n            };\n        });\n    }\n    getComponentFactoryResolver(component) {\n        return this._cfrMap.get(component);\n    }\n}\nModuleLoader.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nModuleLoader.ctorParameters = () => [\n    { type: NgModuleLoader, },\n    { type: Injector, },\n];\nconst SPLITTER = '#';\n/**\n * @hidden\n */\nexport function provideModuleLoader(ngModuleLoader, injector) {\n    return new ModuleLoader(ngModuleLoader, injector);\n}\n/**\n * @hidden\n */\nexport function setupPreloadingImplementation(config, deepLinkConfig, moduleLoader) {\n    if (!deepLinkConfig || !deepLinkConfig.links || !config.getBoolean('preloadModules')) {\n        return Promise.resolve();\n    }\n    const linksToLoad = deepLinkConfig.links.filter(link => !!link.loadChildren && link.priority !== 'off');\n    // Load the high priority modules first\n    const highPriorityPromises = linksToLoad\n        .filter(link => link.priority === 'high')\n        .map(link => moduleLoader.load(link.loadChildren));\n    return Promise.all(highPriorityPromises).then(() => {\n        // Load the low priority modules after the high priority are done\n        const lowPriorityPromises = linksToLoad\n            .filter(link => link.priority === 'low')\n            .map(link => moduleLoader.load(link.loadChildren));\n        return Promise.all(lowPriorityPromises);\n    }).catch(err => {\n        console.error(err.message);\n    });\n}\n/**\n * @hidden\n */\nexport function setupPreloading(config, deepLinkConfig, moduleLoader, ngZone) {\n    return function () {\n        requestIonicCallback(() => {\n            ngZone.runOutsideAngular(() => {\n                setupPreloadingImplementation(config, deepLinkConfig, moduleLoader);\n            });\n        });\n    };\n}\n"]}