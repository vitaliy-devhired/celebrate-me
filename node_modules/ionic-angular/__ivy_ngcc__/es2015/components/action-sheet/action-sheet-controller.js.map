{"version":3,"file":"action-sheet-controller.js","sources":["action-sheet-controller.js"],"names":[],"mappingssourcesContent":["import { Injectable } from '@angular/core';\nimport { ActionSheet } from './action-sheet';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\n/**\n * @name ActionSheetController\n * @description\n * An Action Sheet is a dialog that lets the user choose from a set of\n * options. It appears on top of the app's content, and must be manually\n * dismissed by the user before they can resume interaction with the app.\n * Dangerous (destructive) options are made obvious in `ios` mode. There are easy\n * ways to cancel out of the action sheet, such as tapping the backdrop or\n * hitting the escape key on desktop.\n *\n * An action sheet is created from an array of `buttons`, with each button\n * including properties for its `text`, and optionally a `handler` and `role`.\n * If a handler returns `false` then the action sheet will not be dismissed. An\n * action sheet can also optionally have a `title`, `subTitle` and an `icon`.\n *\n * A button's `role` property can either be `destructive` or `cancel`. Buttons\n * without a role property will have the default look for the platform. Buttons\n * with the `cancel` role will always load as the bottom button, no matter where\n * they are in the array. All other buttons will be displayed in the order they\n * have been added to the `buttons` array. Note: We recommend that `destructive`\n * buttons are always the first button in the array, making them the top button.\n * Additionally, if the action sheet is dismissed by tapping the backdrop, then\n * it will fire the handler from the button with the cancel role.\n *\n * You can pass all of the action sheet's options in the first argument of\n * the create method: `ActionSheet.create(opts)`. Otherwise the action sheet's\n * instance has methods to add options, like `setTitle()` or `addButton()`.\n *\n * @usage\n * ```ts\n * import { ActionSheetController } from 'ionic-angular'\n *\n * export class MyClass{\n *\n *  constructor(public actionSheetCtrl: ActionSheetController) { }\n *\n *  presentActionSheet() {\n *    const actionSheet = this.actionSheetCtrl.create({\n *      title: 'Modify your album',\n *      buttons: [\n *        {\n *          text: 'Destructive',\n *          role: 'destructive',\n *          handler: () => {\n *            console.log('Destructive clicked');\n *          }\n *        },\n *        {\n *          text: 'Archive',\n *          handler: () => {\n *            console.log('Archive clicked');\n *          }\n *        },\n *        {\n *          text: 'Cancel',\n *          role: 'cancel',\n *          handler: () => {\n *            console.log('Cancel clicked');\n *          }\n *        }\n *      ]\n *    });\n *\n *    actionSheet.present();\n *  }\n * }\n * ```\n *\n * @advanced\n *\n * ActionSheet create options\n *\n * | Option                | Type       | Description                                                        |\n * |-----------------------|------------|--------------------------------------------------------------------|\n * | title                 |`string`    | The title for the Action Sheet.                                    |\n * | subTitle              |`string`    | The sub-title for the Action Sheet.                                |\n * | cssClass              |`string`    | Additional classes for custom styles, separated by spaces.         |\n * | enableBackdropDismiss |`boolean`   | If the Action Sheet should close when the user taps the backdrop.  |\n * | buttons               |`array<any>`| An array of buttons to display.                                    |\n *\n * ActionSheet button options\n *\n * | Option   | Type     | Description                                                                                                                                      |\n * |----------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------|\n * | text     | `string` | The buttons text.                                                                                                                                |\n * | icon     | `icon`   | The buttons icons.                                                                                                                               |\n * | handler  | `any`    | An express the button should evaluate.                                                                                                           |\n * | cssClass | `string` | Additional classes for custom styles, separated by spaces.                                                                                       |\n * | role     | `string` | How the button should be displayed, `destructive` or `cancel`. If no role is provided, it will display the button without any additional styles. |\n *\n *\n * ### Dismissing And Async Navigation\n *\n * After an action sheet has been dismissed, the app may need to also transition\n * to another page depending on the handler's logic. However, because multiple\n * transitions were fired at roughly the same time, it's difficult for the\n * nav controller to cleanly animate multiple transitions that may\n * have been kicked off asynchronously. This is further described in the\n * [`Nav Transition Promises`](../../nav/NavController/#nav-transition-promises) section. For action sheets,\n * this means it's best to wait for the action sheet to finish its transition\n * out before starting a new transition on the same nav controller.\n *\n * In the example below, after the button has been clicked, its handler\n * waits on async operation to complete, *then* it uses `pop` to navigate\n * back a page in the same stack. The potential problem is that the async operation\n * may have been completed before the action sheet has even finished its transition\n * out. In this case, it's best to ensure the action sheet has finished its transition\n * out first, *then* start the next transition.\n *\n * ```ts\n * const actionSheet = this.actionSheetCtrl.create({\n *   title: 'Hello',\n *   buttons: [{\n *     text: 'Ok',\n *     handler: () => {\n *       // user has clicked the action sheet button\n *       // begin the action sheet's dimiss transition\n *       let navTransition = actionSheet.dismiss();\n *\n *       // start some async method\n *       someAsyncOperation().then(() => {\n *         // once the async operation has completed\n *         // then run the next nav transition after the\n *         // first transition has finished animating out\n *\n *         navTransition.then(() => {\n *           this.nav.pop();\n *         });\n *       });\n *       return false;\n *     }\n *   }]\n * });\n *\n * actionSheet.present();\n * ```\n *\n * It's important to note that the handler returns `false`. A feature of\n * button handlers is that they automatically dismiss the action sheet when their button\n * was clicked, however, we'll need more control regarding the transition. Because\n * the handler returns `false`, then the action sheet does not automatically dismiss\n * itself. Instead, you now have complete control of when the action sheet has finished\n * transitioning, and the ability to wait for the action sheet to finish transitioning\n * out before starting a new transition.\n *\n *\n * @demo /docs/demos/src/action-sheet/\n * @see {@link /docs/components#action-sheets ActionSheet Component Docs}\n */\nexport class ActionSheetController {\n    constructor(_app, config) {\n        this._app = _app;\n        this.config = config;\n    }\n    /**\n     * Open an action sheet with a title, subTitle, and an array of buttons\n     * @param {ActionSheetOptions} opts Action sheet options\n     */\n    create(opts = {}) {\n        return new ActionSheet(this._app, opts, this.config);\n    }\n}\nActionSheetController.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nActionSheetController.ctorParameters = () => [\n    { type: App, },\n    { type: Config, },\n];\n"]}