{"version":3,"file":"action-sheet-component.js","sources":["action-sheet-component.js"],"names":[],"mappingsuIA8BE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF;AACA","sourcesContent":["import { Component, ElementRef, HostListener, Renderer, ViewEncapsulation } from '@angular/core';\nimport { BLOCK_ALL, GestureController } from '../../gestures/gesture-controller';\nimport { Config } from '../../config/config';\nimport { KEY_ESCAPE } from '../../platform/key';\nimport { NavParams } from '../../navigation/nav-params';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @hidden\n */\nexport class ActionSheetCmp {\n    constructor(_viewCtrl, config, _elementRef, gestureCtrl, params, renderer) {\n        this._viewCtrl = _viewCtrl;\n        this._elementRef = _elementRef;\n        this.gestureBlocker = gestureCtrl.createBlocker(BLOCK_ALL);\n        this.d = params.data;\n        this.mode = config.get('mode');\n        renderer.setElementClass(_elementRef.nativeElement, `action-sheet-${this.mode}`, true);\n        if (this.d.cssClass) {\n            this.d.cssClass.split(' ').forEach(cssClass => {\n                // Make sure the class isn't whitespace, otherwise it throws exceptions\n                if (cssClass.trim() !== '')\n                    renderer.setElementClass(_elementRef.nativeElement, cssClass, true);\n            });\n        }\n        this.id = (++actionSheetIds);\n        if (this.d.title) {\n            this.hdrId = 'acst-hdr-' + this.id;\n        }\n        if (this.d.subTitle) {\n            this.descId = 'acst-subhdr-' + this.id;\n        }\n    }\n    ionViewDidLoad() {\n        // normalize the data\n        this.d.buttons = this.d.buttons.map(button => {\n            if (typeof button === 'string') {\n                button = { text: button };\n            }\n            if (!button.cssClass) {\n                button.cssClass = '';\n            }\n            switch (button.role) {\n                case 'cancel':\n                    this.cancelButton = button;\n                    return null;\n                case 'destructive':\n                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-destructive';\n                    break;\n                case 'selected':\n                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-selected';\n                    break;\n            }\n            return button;\n        }).filter(button => button !== null);\n    }\n    ionViewWillEnter() {\n        this.gestureBlocker.block();\n    }\n    ionViewDidLeave() {\n        this.gestureBlocker.unblock();\n    }\n    ionViewDidEnter() {\n        const focusableEle = this._elementRef.nativeElement.querySelector('button');\n        if (focusableEle) {\n            focusableEle.focus();\n        }\n        this.enabled = true;\n    }\n    keyUp(ev) {\n        if (this.enabled && ev.keyCode === KEY_ESCAPE && this._viewCtrl.isLast()) {\n            (void 0) /* console.debug */;\n            this.bdClick();\n        }\n    }\n    click(button) {\n        if (!this.enabled) {\n            return;\n        }\n        let shouldDismiss = true;\n        if (button.handler) {\n            // a handler has been provided, execute it\n            if (button.handler() === false) {\n                // if the return value of the handler is false then do not dismiss\n                shouldDismiss = false;\n            }\n        }\n        if (shouldDismiss) {\n            this.dismiss(button.role);\n        }\n    }\n    bdClick() {\n        if (this.enabled && this.d.enableBackdropDismiss) {\n            if (this.cancelButton) {\n                this.click(this.cancelButton);\n            }\n            else {\n                this.dismiss('backdrop');\n            }\n        }\n    }\n    dismiss(role) {\n        const opts = {\n            minClickBlockDuration: 400\n        };\n        return this._viewCtrl.dismiss(null, role, opts);\n    }\n    ngOnDestroy() {\n        (void 0) /* assert */;\n        this.d = this.cancelButton = null;\n        this.gestureBlocker.destroy();\n    }\n}\nActionSheetCmp.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-action-sheet',\n                template: '<ion-backdrop (click)=\"bdClick()\" [class.backdrop-no-tappable]=\"!d.enableBackdropDismiss\"></ion-backdrop>' +\n                    '<div class=\"action-sheet-wrapper\">' +\n                    '<div class=\"action-sheet-container\">' +\n                    '<div class=\"action-sheet-group\">' +\n                    '<div class=\"action-sheet-title\" id=\"{{hdrId}}\" *ngIf=\"d.title\">{{d.title}}</div>' +\n                    '<div class=\"action-sheet-sub-title\" id=\"{{descId}}\" *ngIf=\"d.subTitle\">{{d.subTitle}}</div>' +\n                    '<button ion-button=\"action-sheet-button\" (click)=\"click(b)\" *ngFor=\"let b of d.buttons\" class=\"disable-hover\" [attr.icon-start]=\"b.icon ? \\'\\' : null\" [ngClass]=\"b.cssClass\">' +\n                    '<ion-icon [name]=\"b.icon\" *ngIf=\"b.icon\" class=\"action-sheet-icon\"></ion-icon>' +\n                    '{{b.text}}' +\n                    '</button>' +\n                    '</div>' +\n                    '<div class=\"action-sheet-group action-sheet-group-cancel\" *ngIf=\"cancelButton\">' +\n                    '<button ion-button=\"action-sheet-button\" (click)=\"click(cancelButton)\" class=\"action-sheet-cancel disable-hover\" [attr.icon-start]=\"cancelButton.icon ? \\'\\' : null\" [ngClass]=\"cancelButton.cssClass\">' +\n                    '<ion-icon [name]=\"cancelButton.icon\" *ngIf=\"cancelButton.icon\" class=\"action-sheet-icon\"></ion-icon>' +\n                    '{{cancelButton.text}}' +\n                    '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '</div>',\n                host: {\n                    'role': 'dialog',\n                    '[attr.aria-labelledby]': 'hdrId',\n                    '[attr.aria-describedby]': 'descId'\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nActionSheetCmp.ctorParameters = () => [\n    { type: ViewController, },\n    { type: Config, },\n    { type: ElementRef, },\n    { type: GestureController, },\n    { type: NavParams, },\n    { type: Renderer, },\n];\nActionSheetCmp.propDecorators = {\n    'keyUp': [{ type: HostListener, args: ['body:keyup', ['$event'],] },],\n};\nlet actionSheetIds = -1;\n"]}