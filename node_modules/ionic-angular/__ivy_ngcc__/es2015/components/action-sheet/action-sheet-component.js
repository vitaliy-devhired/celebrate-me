import { Component, ElementRef, HostListener, Renderer, ViewEncapsulation } from '@angular/core';
import { BLOCK_ALL, GestureController } from '../../gestures/gesture-controller';
import { Config } from '../../config/config';
import { KEY_ESCAPE } from '../../platform/key';
import { NavParams } from '../../navigation/nav-params';
import { ViewController } from '../../navigation/view-controller';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../navigation/view-controller';
import * as ɵngcc2 from '../../config/config';
import * as ɵngcc3 from '../../gestures/gesture-controller';
import * as ɵngcc4 from '../../navigation/nav-params';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '../backdrop/backdrop';
import * as ɵngcc7 from '../button/button';
import * as ɵngcc8 from '../icon/icon';

function ActionSheetCmp_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", ctx_r0.hdrId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.d.title);
} }
function ActionSheetCmp_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", ctx_r1.descId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.d.subTitle);
} }
function ActionSheetCmp_button_6_ion_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ion-icon", 12);
} if (rf & 2) {
    const b_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("name", b_r4.icon);
} }
function ActionSheetCmp_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function ActionSheetCmp_button_6_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8); const b_r4 = restoredCtx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r7.click(b_r4)); });
    ɵngcc0.ɵɵtemplate(1, ActionSheetCmp_button_6_ion_icon_1_Template, 1, 1, "ion-icon", 11);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const b_r4 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", b_r4.cssClass);
    ɵngcc0.ɵɵattribute("icon-start", b_r4.icon ? "" : null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", b_r4.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(b_r4.text);
} }
function ActionSheetCmp_div_7_ion_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ion-icon", 12);
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("name", ctx_r9.cancelButton.icon);
} }
function ActionSheetCmp_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13)(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function ActionSheetCmp_div_7_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r10.click(ctx_r10.cancelButton)); });
    ɵngcc0.ɵɵtemplate(2, ActionSheetCmp_div_7_ion_icon_2_Template, 1, 1, "ion-icon", 11);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.cancelButton.cssClass);
    ɵngcc0.ɵɵattribute("icon-start", ctx_r3.cancelButton.icon ? "" : null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.cancelButton.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.cancelButton.text);
} }
export class ActionSheetCmp {
    constructor(_viewCtrl, config, _elementRef, gestureCtrl, params, renderer) {
        this._viewCtrl = _viewCtrl;
        this._elementRef = _elementRef;
        this.gestureBlocker = gestureCtrl.createBlocker(BLOCK_ALL);
        this.d = params.data;
        this.mode = config.get('mode');
        renderer.setElementClass(_elementRef.nativeElement, `action-sheet-${this.mode}`, true);
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(cssClass => {
                // Make sure the class isn't whitespace, otherwise it throws exceptions
                if (cssClass.trim() !== '')
                    renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = (++actionSheetIds);
        if (this.d.title) {
            this.hdrId = 'acst-hdr-' + this.id;
        }
        if (this.d.subTitle) {
            this.descId = 'acst-subhdr-' + this.id;
        }
    }
    ionViewDidLoad() {
        // normalize the data
        this.d.buttons = this.d.buttons.map(button => {
            if (typeof button === 'string') {
                button = { text: button };
            }
            if (!button.cssClass) {
                button.cssClass = '';
            }
            switch (button.role) {
                case 'cancel':
                    this.cancelButton = button;
                    return null;
                case 'destructive':
                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-destructive';
                    break;
                case 'selected':
                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-selected';
                    break;
            }
            return button;
        }).filter(button => button !== null);
    }
    ionViewWillEnter() {
        this.gestureBlocker.block();
    }
    ionViewDidLeave() {
        this.gestureBlocker.unblock();
    }
    ionViewDidEnter() {
        const focusableEle = this._elementRef.nativeElement.querySelector('button');
        if (focusableEle) {
            focusableEle.focus();
        }
        this.enabled = true;
    }
    keyUp(ev) {
        if (this.enabled && ev.keyCode === KEY_ESCAPE && this._viewCtrl.isLast()) {
            (void 0) /* console.debug */;
            this.bdClick();
        }
    }
    click(button) {
        if (!this.enabled) {
            return;
        }
        let shouldDismiss = true;
        if (button.handler) {
            // a handler has been provided, execute it
            if (button.handler() === false) {
                // if the return value of the handler is false then do not dismiss
                shouldDismiss = false;
            }
        }
        if (shouldDismiss) {
            this.dismiss(button.role);
        }
    }
    bdClick() {
        if (this.enabled && this.d.enableBackdropDismiss) {
            if (this.cancelButton) {
                this.click(this.cancelButton);
            }
            else {
                this.dismiss('backdrop');
            }
        }
    }
    dismiss(role) {
        const opts = {
            minClickBlockDuration: 400
        };
        return this._viewCtrl.dismiss(null, role, opts);
    }
    ngOnDestroy() {
        (void 0) /* assert */;
        this.d = this.cancelButton = null;
        this.gestureBlocker.destroy();
    }
}
ActionSheetCmp.ɵfac = function ActionSheetCmp_Factory(t) { return new (t || ActionSheetCmp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewController), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.GestureController), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NavParams), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
ActionSheetCmp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActionSheetCmp, selectors: [["ion-action-sheet"]], hostAttrs: ["role", "dialog"], hostVars: 2, hostBindings: function ActionSheetCmp_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function ActionSheetCmp_keyup_HostBindingHandler($event) { return ctx.keyUp($event); }, false, ɵngcc0.ɵɵresolveBody);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.hdrId)("aria-describedby", ctx.descId);
    } }, decls: 8, vars: 6, consts: [[3, "click"], [1, "action-sheet-wrapper"], [1, "action-sheet-container"], [1, "action-sheet-group"], ["class", "action-sheet-title", 3, "id", 4, "ngIf"], ["class", "action-sheet-sub-title", 3, "id", 4, "ngIf"], ["ion-button", "action-sheet-button", "class", "disable-hover", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["class", "action-sheet-group action-sheet-group-cancel", 4, "ngIf"], [1, "action-sheet-title", 3, "id"], [1, "action-sheet-sub-title", 3, "id"], ["ion-button", "action-sheet-button", 1, "disable-hover", 3, "ngClass", "click"], ["class", "action-sheet-icon", 3, "name", 4, "ngIf"], [1, "action-sheet-icon", 3, "name"], [1, "action-sheet-group", "action-sheet-group-cancel"], ["ion-button", "action-sheet-button", 1, "action-sheet-cancel", "disable-hover", 3, "ngClass", "click"]], template: function ActionSheetCmp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ion-backdrop", 0);
        ɵngcc0.ɵɵlistener("click", function ActionSheetCmp_Template_ion_backdrop_click_0_listener() { return ctx.bdClick(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1)(2, "div", 2)(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ActionSheetCmp_div_4_Template, 2, 2, "div", 4);
        ɵngcc0.ɵɵtemplate(5, ActionSheetCmp_div_5_Template, 2, 2, "div", 5);
        ɵngcc0.ɵɵtemplate(6, ActionSheetCmp_button_6_Template, 3, 4, "button", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ActionSheetCmp_div_7_Template, 4, 4, "div", 7);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("backdrop-no-tappable", !ctx.d.enableBackdropDismiss);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.d.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.d.subTitle);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.d.buttons);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.cancelButton);
    } }, dependencies: [ɵngcc5.NgClass, ɵngcc5.NgForOf, ɵngcc5.NgIf, ɵngcc6.Backdrop, ɵngcc7.Button, ɵngcc8.Icon], encapsulation: 2 });
/** @nocollapse */
ActionSheetCmp.ctorParameters = () => [
    { type: ViewController, },
    { type: Config, },
    { type: ElementRef, },
    { type: GestureController, },
    { type: NavParams, },
    { type: Renderer, },
];
ActionSheetCmp.propDecorators = {
    'keyUp': [{ type: HostListener, args: ['body:keyup', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionSheetCmp, [{
        type: Component,
        args: [{
                selector: 'ion-action-sheet',
                template: '<ion-backdrop (click)="bdClick()" [class.backdrop-no-tappable]="!d.enableBackdropDismiss"></ion-backdrop>' +
                    '<div class="action-sheet-wrapper">' +
                    '<div class="action-sheet-container">' +
                    '<div class="action-sheet-group">' +
                    '<div class="action-sheet-title" id="{{hdrId}}" *ngIf="d.title">{{d.title}}</div>' +
                    '<div class="action-sheet-sub-title" id="{{descId}}" *ngIf="d.subTitle">{{d.subTitle}}</div>' +
                    '<button ion-button="action-sheet-button" (click)="click(b)" *ngFor="let b of d.buttons" class="disable-hover" [attr.icon-start]="b.icon ? \'\' : null" [ngClass]="b.cssClass">' +
                    '<ion-icon [name]="b.icon" *ngIf="b.icon" class="action-sheet-icon"></ion-icon>' +
                    '{{b.text}}' +
                    '</button>' +
                    '</div>' +
                    '<div class="action-sheet-group action-sheet-group-cancel" *ngIf="cancelButton">' +
                    '<button ion-button="action-sheet-button" (click)="click(cancelButton)" class="action-sheet-cancel disable-hover" [attr.icon-start]="cancelButton.icon ? \'\' : null" [ngClass]="cancelButton.cssClass">' +
                    '<ion-icon [name]="cancelButton.icon" *ngIf="cancelButton.icon" class="action-sheet-icon"></ion-icon>' +
                    '{{cancelButton.text}}' +
                    '</button>' +
                    '</div>' +
                    '</div>' +
                    '</div>',
                host: {
                    'role': 'dialog',
                    '[attr.aria-labelledby]': 'hdrId',
                    '[attr.aria-describedby]': 'descId'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.ViewController }, { type: ɵngcc2.Config }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.GestureController }, { type: ɵngcc4.NavParams }, { type: Renderer }]; }, { keyUp: [{
            type: HostListener,
            args: ['body:keyup', ['$event']]
        }] }); })();
let actionSheetIds = -1;

//# sourceMappingURL=action-sheet-component.js.map