import { Component, ElementRef, EventEmitter, HostListener, Input, Output, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../config/config';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../badge/badge';
import * as ɵngcc4 from '../icon/icon';

const _c0 = ["class", "tab-button"];
function TabButton_ion_icon_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ion-icon", 4);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("name", ctx_r0.tab.tabIcon)("isActive", ctx_r0.tab.isSelected);
    ɵngcc0.ɵɵattribute("aria-hidden", ctx_r0.hasTitle ? "true" : null);
} }
function TabButton_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.tab.tabTitle);
} }
function TabButton_ion_badge_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-badge", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("color", ctx_r2.tab.tabBadgeStyle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.tab.tabBadge);
} }
export class TabButton extends Ion {
    constructor(config, elementRef, renderer) {
        super(config, elementRef, renderer);
        this.ionSelect = new EventEmitter();
        this.disHover = (config.get('hoverCSS') === false);
        this.layout = config.get('tabsLayout');
    }
    ngOnInit() {
        this.tab.btn = this;
        this.layout = this.tab.parent.tabsLayout || this.layout;
        this.hasTitle = !!this.tab.tabTitle;
        this.hasIcon = !!this.tab.tabIcon && this.layout !== 'icon-hide';
        this.hasTitleOnly = (this.hasTitle && !this.hasIcon);
        this.hasIconOnly = (this.hasIcon && !this.hasTitle);
        this.hasBadge = !!this.tab.tabBadge;
    }
    onClick() {
        this.ionSelect.emit(this.tab);
        return false;
    }
    updateHref(href) {
        this.setElementAttribute('href', href);
    }
}
TabButton.ɵfac = function TabButton_Factory(t) { return new (t || TabButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
TabButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TabButton, selectors: [["", 8, "tab-button"]], hostVars: 19, hostBindings: function TabButton_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function TabButton_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.tab._btnId)("aria-controls", ctx.tab._tabId)("aria-selected", ctx.tab.isSelected);
        ɵngcc0.ɵɵclassProp("has-title", ctx.hasTitle)("has-icon", ctx.hasIcon)("has-title-only", ctx.hasTitleOnly)("icon-only", ctx.hasIconOnly)("has-badge", ctx.hasBadge)("disable-hover", ctx.disHover)("tab-disabled", !ctx.tab.enabled)("tab-hidden", !ctx.tab.show);
    } }, inputs: { tab: "tab" }, outputs: { ionSelect: "ionSelect" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, decls: 4, vars: 3, consts: [["class", "tab-button-icon", 3, "name", "isActive", 4, "ngIf"], ["class", "tab-button-text", 4, "ngIf"], ["class", "tab-badge", 3, "color", 4, "ngIf"], [1, "button-effect"], [1, "tab-button-icon", 3, "name", "isActive"], [1, "tab-button-text"], [1, "tab-badge", 3, "color"]], template: function TabButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TabButton_ion_icon_0_Template, 1, 3, "ion-icon", 0);
        ɵngcc0.ɵɵtemplate(1, TabButton_span_1_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵtemplate(2, TabButton_ion_badge_2_Template, 2, 2, "ion-badge", 2);
        ɵngcc0.ɵɵelement(3, "div", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.tab.tabIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tab.tabTitle);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tab.tabBadge);
    } }, dependencies: [ɵngcc2.NgIf, ɵngcc3.Badge, ɵngcc4.Icon], encapsulation: 2 });
/** @nocollapse */
TabButton.ctorParameters = () => [
    { type: Config, },
    { type: ElementRef, },
    { type: Renderer, },
];
TabButton.propDecorators = {
    'tab': [{ type: Input },],
    'ionSelect': [{ type: Output },],
    'onClick': [{ type: HostListener, args: ['click',] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabButton, [{
        type: Component,
        args: [{
                selector: '.tab-button',
                template: '<ion-icon *ngIf="tab.tabIcon" [name]="tab.tabIcon" [attr.aria-hidden]="hasTitle ? \'true\' : null" [isActive]="tab.isSelected" class="tab-button-icon"></ion-icon>' +
                    '<span *ngIf="tab.tabTitle" class="tab-button-text">{{tab.tabTitle}}</span>' +
                    '<ion-badge *ngIf="tab.tabBadge" class="tab-badge" [color]="tab.tabBadgeStyle">{{tab.tabBadge}}</ion-badge>' +
                    '<div class="button-effect"></div>',
                host: {
                    '[attr.id]': 'tab._btnId',
                    '[attr.aria-controls]': 'tab._tabId',
                    '[attr.aria-selected]': 'tab.isSelected',
                    '[class.has-title]': 'hasTitle',
                    '[class.has-icon]': 'hasIcon',
                    '[class.has-title-only]': 'hasTitleOnly',
                    '[class.icon-only]': 'hasIconOnly',
                    '[class.has-badge]': 'hasBadge',
                    '[class.disable-hover]': 'disHover',
                    '[class.tab-disabled]': '!tab.enabled',
                    '[class.tab-hidden]': '!tab.show'
                }
            }]
    }], function () { return [{ type: ɵngcc1.Config }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { ionSelect: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], tab: [{
            type: Input
        }] }); })();

//# sourceMappingURL=tab-button.js.map