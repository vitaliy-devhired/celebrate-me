{"version":3,"file":"ion.js","sources":["ion.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;2GAAC;AACD;AACA;AACA;AACA;AAAE;AACF","sourcesContent":["import { Input } from '@angular/core';\n/**\n * Base class for all Ionic components. Exposes some common functionality\n * that all Ionic components need, such as accessing underlying native elements and\n * sending/receiving app-level events.\n */\n/** @hidden */\nexport class Ion {\n    constructor(config, elementRef, renderer, componentName) {\n        this._config = config;\n        this._elementRef = elementRef;\n        this._renderer = renderer;\n        this._componentName = componentName;\n        if (componentName) {\n            this._setComponentName();\n            this._setMode(config.get('mode'));\n        }\n    }\n    /**\n     * @input {string} The color to use from your Sass `$colors` map.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"danger\"`, `\"light\"`, and `\"dark\"`.\n     * For more information, see [Theming your App](/docs/theming/theming-your-app).\n     */\n    set color(val) {\n        this._setColor(val);\n    }\n    get color() {\n        return this._color;\n    }\n    /**\n     * @input {string} The mode determines which platform styles to use.\n     * Possible values are: `\"ios\"`, `\"md\"`, or `\"wp\"`.\n     * For more information, see [Platform Styles](/docs/theming/platform-specific-styles).\n     */\n    set mode(val) {\n        this._setMode(val);\n    }\n    get mode() {\n        return this._mode;\n    }\n    /** @hidden */\n    setElementClass(className, isAdd) {\n        this._renderer.setElementClass(this._elementRef.nativeElement, className, isAdd);\n    }\n    /** @hidden */\n    setElementAttribute(attributeName, attributeValue) {\n        this._renderer.setElementAttribute(this._elementRef.nativeElement, attributeName, attributeValue);\n    }\n    /** @hidden */\n    setElementStyle(property, value) {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);\n    }\n    /** @hidden */\n    _setColor(newColor, componentName) {\n        if (componentName) {\n            // This is needed for the item-radio\n            this._componentName = componentName;\n        }\n        if (this._color) {\n            this.setElementClass(`${this._componentName}-${this._mode}-${this._color}`, false);\n        }\n        if (newColor) {\n            this.setElementClass(`${this._componentName}-${this._mode}-${newColor}`, true);\n            this._color = newColor;\n        }\n    }\n    /** @hidden */\n    _setMode(newMode) {\n        if (this._mode) {\n            this.setElementClass(`${this._componentName}-${this._mode}`, false);\n        }\n        if (newMode) {\n            this.setElementClass(`${this._componentName}-${newMode}`, true);\n            // Remove the color class associated with the previous mode,\n            // change the mode, then add the new color class\n            this._setColor(null);\n            this._mode = newMode;\n            this._setColor(this._color);\n        }\n    }\n    /** @hidden */\n    _setComponentName() {\n        this.setElementClass(this._componentName, true);\n    }\n    /** @hidden */\n    getElementRef() {\n        return this._elementRef;\n    }\n    /** @hidden */\n    getNativeElement() {\n        return this._elementRef.nativeElement;\n    }\n}\nIon.propDecorators = {\n    'color': [{ type: Input },],\n    'mode': [{ type: Input },],\n};\n"]}