{"version":3,"file":"loading-component.js","sources":["loading-component.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;2FAgBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;oBAAE;AACF;AACA","sourcesContent":["import { Component, ElementRef, HostListener, Renderer, ViewEncapsulation } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { BLOCK_ALL, GestureController } from '../../gestures/gesture-controller';\nimport { isDefined, isUndefined } from '../../util/util';\nimport { KEY_ESCAPE } from '../../platform/key';\nimport { NavParams } from '../../navigation/nav-params';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n* @hidden\n*/\nexport class LoadingCmp {\n    constructor(_viewCtrl, _config, _elementRef, gestureCtrl, params, renderer) {\n        this._viewCtrl = _viewCtrl;\n        this._config = _config;\n        (void 0) /* assert */;\n        this.gestureBlocker = gestureCtrl.createBlocker(BLOCK_ALL);\n        this.d = params.data;\n        renderer.setElementClass(_elementRef.nativeElement, `loading-${_config.get('mode')}`, true);\n        if (this.d.cssClass) {\n            this.d.cssClass.split(' ').forEach(cssClass => {\n                // Make sure the class isn't whitespace, otherwise it throws exceptions\n                if (cssClass.trim() !== '')\n                    renderer.setElementClass(_elementRef.nativeElement, cssClass, true);\n            });\n        }\n        this.id = (++loadingIds);\n    }\n    ngOnInit() {\n        // If no spinner was passed in loading options we need to fall back\n        // to the loadingSpinner in the app's config, then the mode spinner\n        if (isUndefined(this.d.spinner)) {\n            this.d.spinner = this._config.get('loadingSpinner', this._config.get('spinner', 'ios'));\n        }\n        // If the user passed hide to the spinner we don't want to show it\n        this.showSpinner = isDefined(this.d.spinner) && this.d.spinner !== 'hide';\n    }\n    ionViewWillEnter() {\n        this.gestureBlocker.block();\n    }\n    ionViewDidLeave() {\n        this.gestureBlocker.unblock();\n    }\n    ionViewDidEnter() {\n        // If there is a duration, dismiss after that amount of time\n        if (this.d && this.d.duration) {\n            this.durationTimeout = setTimeout(() => this.dismiss('backdrop'), this.d.duration);\n        }\n    }\n    keyUp(ev) {\n        if (this._viewCtrl.isLast() && ev.keyCode === KEY_ESCAPE) {\n            this.bdClick();\n        }\n    }\n    bdClick() {\n        if (this.d.enableBackdropDismiss) {\n            this.dismiss('backdrop');\n        }\n    }\n    dismiss(role) {\n        if (this.durationTimeout) {\n            clearTimeout(this.durationTimeout);\n        }\n        return this._viewCtrl.dismiss(null, role);\n    }\n    ngOnDestroy() {\n        (void 0) /* assert */;\n        this.gestureBlocker.destroy();\n    }\n}\nLoadingCmp.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-loading',\n                template: '<ion-backdrop [hidden]=\"!d.showBackdrop\" (click)=\"bdClick()\" [class.backdrop-no-tappable]=\"!d.enableBackdropDismiss\"></ion-backdrop>' +\n                    '<div class=\"loading-wrapper\">' +\n                    '<div *ngIf=\"showSpinner\" class=\"loading-spinner\">' +\n                    '<ion-spinner [name]=\"d.spinner\"></ion-spinner>' +\n                    '</div>' +\n                    '<div *ngIf=\"d.content\" [innerHTML]=\"d.content\" class=\"loading-content\"></div>' +\n                    '</div>',\n                host: {\n                    'role': 'dialog'\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nLoadingCmp.ctorParameters = () => [\n    { type: ViewController, },\n    { type: Config, },\n    { type: ElementRef, },\n    { type: GestureController, },\n    { type: NavParams, },\n    { type: Renderer, },\n];\nLoadingCmp.propDecorators = {\n    'keyUp': [{ type: HostListener, args: ['body:keyup', ['$event'],] },],\n};\nlet loadingIds = -1;\n"]}