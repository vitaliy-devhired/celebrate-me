import { Component, ElementRef, HostListener, Renderer, ViewEncapsulation } from '@angular/core';
import { Config } from '../../config/config';
import { BLOCK_ALL, GestureController } from '../../gestures/gesture-controller';
import { isDefined, isUndefined } from '../../util/util';
import { KEY_ESCAPE } from '../../platform/key';
import { NavParams } from '../../navigation/nav-params';
import { ViewController } from '../../navigation/view-controller';
/**
* @hidden
*/
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../navigation/view-controller';
import * as ɵngcc2 from '../../config/config';
import * as ɵngcc3 from '../../gestures/gesture-controller';
import * as ɵngcc4 from '../../navigation/nav-params';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '../backdrop/backdrop';
import * as ɵngcc7 from '../spinner/spinner';

function LoadingCmp_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelement(1, "ion-spinner", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", ctx_r0.d.spinner);
} }
function LoadingCmp_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1.d.content, ɵngcc0.ɵɵsanitizeHtml);
} }
export class LoadingCmp {
    constructor(_viewCtrl, _config, _elementRef, gestureCtrl, params, renderer) {
        this._viewCtrl = _viewCtrl;
        this._config = _config;
        (void 0) /* assert */;
        this.gestureBlocker = gestureCtrl.createBlocker(BLOCK_ALL);
        this.d = params.data;
        renderer.setElementClass(_elementRef.nativeElement, `loading-${_config.get('mode')}`, true);
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(cssClass => {
                // Make sure the class isn't whitespace, otherwise it throws exceptions
                if (cssClass.trim() !== '')
                    renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = (++loadingIds);
    }
    ngOnInit() {
        // If no spinner was passed in loading options we need to fall back
        // to the loadingSpinner in the app's config, then the mode spinner
        if (isUndefined(this.d.spinner)) {
            this.d.spinner = this._config.get('loadingSpinner', this._config.get('spinner', 'ios'));
        }
        // If the user passed hide to the spinner we don't want to show it
        this.showSpinner = isDefined(this.d.spinner) && this.d.spinner !== 'hide';
    }
    ionViewWillEnter() {
        this.gestureBlocker.block();
    }
    ionViewDidLeave() {
        this.gestureBlocker.unblock();
    }
    ionViewDidEnter() {
        // If there is a duration, dismiss after that amount of time
        if (this.d && this.d.duration) {
            this.durationTimeout = setTimeout(() => this.dismiss('backdrop'), this.d.duration);
        }
    }
    keyUp(ev) {
        if (this._viewCtrl.isLast() && ev.keyCode === KEY_ESCAPE) {
            this.bdClick();
        }
    }
    bdClick() {
        if (this.d.enableBackdropDismiss) {
            this.dismiss('backdrop');
        }
    }
    dismiss(role) {
        if (this.durationTimeout) {
            clearTimeout(this.durationTimeout);
        }
        return this._viewCtrl.dismiss(null, role);
    }
    ngOnDestroy() {
        (void 0) /* assert */;
        this.gestureBlocker.destroy();
    }
}
LoadingCmp.ɵfac = function LoadingCmp_Factory(t) { return new (t || LoadingCmp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewController), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.GestureController), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NavParams), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
LoadingCmp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LoadingCmp, selectors: [["ion-loading"]], hostAttrs: ["role", "dialog"], hostBindings: function LoadingCmp_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function LoadingCmp_keyup_HostBindingHandler($event) { return ctx.keyUp($event); }, false, ɵngcc0.ɵɵresolveBody);
    } }, decls: 4, vars: 5, consts: [[3, "hidden", "click"], [1, "loading-wrapper"], ["class", "loading-spinner", 4, "ngIf"], ["class", "loading-content", 3, "innerHTML", 4, "ngIf"], [1, "loading-spinner"], [3, "name"], [1, "loading-content", 3, "innerHTML"]], template: function LoadingCmp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ion-backdrop", 0);
        ɵngcc0.ɵɵlistener("click", function LoadingCmp_Template_ion_backdrop_click_0_listener() { return ctx.bdClick(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, LoadingCmp_div_2_Template, 2, 1, "div", 2);
        ɵngcc0.ɵɵtemplate(3, LoadingCmp_div_3_Template, 1, 1, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("backdrop-no-tappable", !ctx.d.enableBackdropDismiss);
        ɵngcc0.ɵɵproperty("hidden", !ctx.d.showBackdrop);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSpinner);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.d.content);
    } }, dependencies: [ɵngcc5.NgIf, ɵngcc6.Backdrop, ɵngcc7.Spinner], encapsulation: 2 });
/** @nocollapse */
LoadingCmp.ctorParameters = () => [
    { type: ViewController, },
    { type: Config, },
    { type: ElementRef, },
    { type: GestureController, },
    { type: NavParams, },
    { type: Renderer, },
];
LoadingCmp.propDecorators = {
    'keyUp': [{ type: HostListener, args: ['body:keyup', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingCmp, [{
        type: Component,
        args: [{
                selector: 'ion-loading',
                template: '<ion-backdrop [hidden]="!d.showBackdrop" (click)="bdClick()" [class.backdrop-no-tappable]="!d.enableBackdropDismiss"></ion-backdrop>' +
                    '<div class="loading-wrapper">' +
                    '<div *ngIf="showSpinner" class="loading-spinner">' +
                    '<ion-spinner [name]="d.spinner"></ion-spinner>' +
                    '</div>' +
                    '<div *ngIf="d.content" [innerHTML]="d.content" class="loading-content"></div>' +
                    '</div>',
                host: {
                    'role': 'dialog'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.ViewController }, { type: ɵngcc2.Config }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.GestureController }, { type: ɵngcc4.NavParams }, { type: Renderer }]; }, { keyUp: [{
            type: HostListener,
            args: ['body:keyup', ['$event']]
        }] }); })();
let loadingIds = -1;

//# sourceMappingURL=loading-component.js.map