{"version":3,"file":"radio-button.js","sources":["radio-button.js"],"names":[],"mappingsqBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Component, ElementRef, EventEmitter, HostListener, Input, Optional, Output, Renderer, ViewEncapsulation } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { Form } from '../../util/form';\nimport { Ion } from '../ion';\nimport { isBlank, isCheckedProperty, isPresent, isTrueProperty } from '../../util/util';\nimport { Item } from '../item/item';\nimport { RadioGroup } from './radio-group';\n/**\n * @description\n * A radio button is a button that can be either checked or unchecked. A user can tap\n * the button to check or uncheck it. It can also be checked from the template using\n * the `checked` property.\n *\n * Use an element with a `radio-group` attribute to group a set of radio buttons. When\n * radio buttons are inside a [radio group](../RadioGroup), exactly one radio button\n * in the group can be checked at any time. If a radio button is not placed in a group,\n * they will all have the ability to be checked at the same time.\n *\n * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html) for\n * more information on forms and input.\n *\n * @usage\n * ```html\n * <ion-list radio-group [(ngModel)]=\"relationship\">\n *   <ion-item>\n *     <ion-label>Friends</ion-label>\n *     <ion-radio value=\"friends\" checked></ion-radio>\n *   </ion-item>\n *   <ion-item>\n *     <ion-label>Family</ion-label>\n *     <ion-radio value=\"family\"></ion-radio>\n *   </ion-item>\n *   <ion-item>\n *     <ion-label>Enemies</ion-label>\n *     <ion-radio value=\"enemies\" [disabled]=\"isDisabled\"></ion-radio>\n *   </ion-item>\n * </ion-list>\n * ```\n * @demo /docs/demos/src/radio/\n * @see {@link /docs/components#radio Radio Component Docs}\n * @see {@link ../RadioGroup RadioGroup API Docs}\n */\nexport class RadioButton extends Ion {\n    constructor(_form, config, elementRef, renderer, _item, _group) {\n        super(config, elementRef, renderer, 'radio');\n        this._form = _form;\n        this._item = _item;\n        this._group = _group;\n        /**\n         * @internal\n         */\n        this._checked = false;\n        /**\n         * @internal\n         */\n        this._disabled = false;\n        /**\n         * @internal\n         */\n        this._value = null;\n        /**\n         * @output {any} Emitted when the radio button is selected.\n         */\n        this.ionSelect = new EventEmitter();\n        _form.register(this);\n        if (_group) {\n            // register with the radiogroup\n            this.id = 'rb-' + _group.add(this);\n        }\n        if (_item) {\n            // register the input inside of the item\n            // reset to the item's id instead of the radiogroup id\n            this.id = 'rb-' + _item.registerInput('radio');\n            this._labelId = 'lbl-' + _item.id;\n            this._item.setElementClass('item-radio', true);\n        }\n    }\n    /**\n     * @input {string} The color to use from your Sass `$colors` map.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"danger\"`, `\"light\"`, and `\"dark\"`.\n     * For more information, see [Theming your App](/docs/theming/theming-your-app).\n     */\n    set color(val) {\n        this._setColor(val);\n        if (this._item) {\n            this._item._updateColor(val, 'item-radio');\n        }\n    }\n    /**\n     * @input {any} The value of the radio button. Defaults to the generated id.\n     */\n    get value() {\n        // if the value is not defined then use it's unique id\n        return isBlank(this._value) ? this.id : this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    /**\n     * @input {boolean} If true, the element is selected, and other buttons in the group are unselected.\n     */\n    get checked() {\n        return this._checked;\n    }\n    set checked(val) {\n        this._checked = isTrueProperty(val);\n        if (this._item) {\n            this._item.setElementClass('item-radio-checked', this._checked);\n        }\n    }\n    /**\n     * @input {boolean} If true, the user cannot interact with this element.\n     */\n    get disabled() {\n        return this._disabled || (this._group != null && this._group.disabled);\n    }\n    set disabled(val) {\n        this._disabled = isTrueProperty(val);\n        this._item && this._item.setElementClass('item-radio-disabled', this._disabled);\n    }\n    /**\n     * @hidden\n     */\n    initFocus() {\n        this._elementRef.nativeElement.querySelector('button').focus();\n    }\n    /**\n     * @internal\n     */\n    _click(ev) {\n        (void 0) /* console.debug */;\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.checked = true;\n        this.ionSelect.emit(this.value);\n    }\n    /**\n     * @internal\n     */\n    ngOnInit() {\n        if (this._group && isPresent(this._group.value)) {\n            this.checked = isCheckedProperty(this._group.value, this.value);\n        }\n        if (this._group && this._group.disabled) {\n            this.disabled = this._group.disabled;\n        }\n    }\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._form.deregister(this);\n        this._group && this._group.remove(this);\n    }\n}\nRadioButton.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-radio',\n                template: '<div class=\"radio-icon\" [class.radio-checked]=\"_checked\"> ' +\n                    '<div class=\"radio-inner\"></div> ' +\n                    '</div> ' +\n                    '<button role=\"radio\" ' +\n                    'type=\"button\" ' +\n                    'ion-button=\"item-cover\" ' +\n                    '[id]=\"id\" ' +\n                    '[attr.aria-checked]=\"_checked\" ' +\n                    '[attr.aria-labelledby]=\"_labelId\" ' +\n                    '[attr.aria-disabled]=\"_disabled\" ' +\n                    'class=\"item-cover\"> ' +\n                    '</button>',\n                host: {\n                    '[class.radio-disabled]': '_disabled'\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nRadioButton.ctorParameters = () => [\n    { type: Form, },\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: Item, decorators: [{ type: Optional },] },\n    { type: RadioGroup, decorators: [{ type: Optional },] },\n];\nRadioButton.propDecorators = {\n    'color': [{ type: Input },],\n    'ionSelect': [{ type: Output },],\n    'value': [{ type: Input },],\n    'checked': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    '_click': [{ type: HostListener, args: ['click', ['$event'],] },],\n};\n"]}