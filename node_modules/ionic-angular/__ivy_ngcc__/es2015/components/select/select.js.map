{"version":3,"file":"select.js","sources":["select.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;yEAuBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Component, ContentChildren, ElementRef, EventEmitter, HostListener, Input, Optional, Output, Renderer, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ActionSheet } from '../action-sheet/action-sheet';\nimport { Alert } from '../alert/alert';\nimport { Popover } from '../popover/popover';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { DeepLinker } from '../../navigation/deep-linker';\nimport { Form } from '../../util/form';\nimport { BaseInput } from '../../util/base-input';\nimport { deepCopy, deepEqual, isCheckedProperty, isTrueProperty } from '../../util/util';\nimport { Item } from '../item/item';\nimport { Option } from '../option/option';\nimport { SelectPopover } from './select-popover-component';\n/**\n * @name Select\n * @description\n * The `ion-select` component is similar to an HTML `<select>` element, however,\n * Ionic's select component makes it easier for users to sort through and select\n * the preferred option or options. When users tap the select component, a\n * dialog will appear with all of the options in a large, easy to select list\n * for users.\n *\n * The select component takes child `ion-option` components. If `ion-option` is not\n * given a `value` attribute then it will use its text as the value.\n *\n * If `ngModel` is bound to `ion-select`, the selected value will be based on the\n * bound value of the model. Otherwise, the `selected` attribute can be used on\n * `ion-option` components.\n *\n * ### Interfaces\n *\n * By default, the `ion-select` uses the {@link ../../alert/AlertController AlertController API}\n * to open up the overlay of options in an alert. The interface can be changed to use the\n * {@link ../../action-sheet/ActionSheetController ActionSheetController API} or\n * {@link ../../popover/PopoverController PopoverController API} by passing `action-sheet` or `popover`,\n * respectively, to the `interface` property. Read on to the other sections for the limitations\n * of the different interfaces.\n *\n * ### Single Value: Radio Buttons\n *\n * The standard `ion-select` component allows the user to select only one\n * option. When selecting only one option the alert interface presents users with\n * a radio button styled list of options. The action sheet interface can only be\n * used with a single value select. If the number of options exceed 6, it will\n * use the `alert` interface even if `action-sheet` is passed. The `ion-select`\n * component's value receives the value of the selected option's value.\n *\n * ```html\n * <ion-item>\n *   <ion-label>Gender</ion-label>\n *   <ion-select [(ngModel)]=\"gender\">\n *     <ion-option value=\"f\">Female</ion-option>\n *     <ion-option value=\"m\">Male</ion-option>\n *   </ion-select>\n * </ion-item>\n * ```\n *\n * ### Multiple Value: Checkboxes\n *\n * By adding the `multiple=\"true\"` attribute to `ion-select`, users are able\n * to select multiple options. When multiple options can be selected, the alert\n * overlay presents users with a checkbox styled list of options. The\n * `ion-select multiple=\"true\"` component's value receives an array of all the\n * selected option values. In the example below, because each option is not given\n * a `value`, then it'll use its text as the value instead.\n *\n * Note: the `action-sheet` and `popover` interfaces will not work with a multi-value select.\n *\n * ```html\n * <ion-item>\n *   <ion-label>Toppings</ion-label>\n *   <ion-select [(ngModel)]=\"toppings\" multiple=\"true\">\n *     <ion-option>Bacon</ion-option>\n *     <ion-option>Black Olives</ion-option>\n *     <ion-option>Extra Cheese</ion-option>\n *     <ion-option>Mushrooms</ion-option>\n *     <ion-option>Pepperoni</ion-option>\n *     <ion-option>Sausage</ion-option>\n *   </ion-select>\n * </ion-item>\n * ```\n *\n * ### Select Buttons\n * By default, the two buttons read `Cancel` and `OK`. Each button's text\n * can be customized using the `cancelText` and `okText` attributes:\n *\n * ```html\n * <ion-select okText=\"Okay\" cancelText=\"Dismiss\">\n *   ...\n * </ion-select>\n * ```\n *\n * The `action-sheet` and `popover` interfaces do not have an `OK` button, clicking\n * on any of the options will automatically close the overlay and select\n * that value.\n *\n * ### Select Options\n *\n * Since `ion-select` uses the `Alert`, `Action Sheet` and `Popover` interfaces, options can be\n * passed to these components through the `selectOptions` property. This can be used\n * to pass a custom title, subtitle, css class, and more. See the\n * {@link ../../alert/AlertController/#create AlertController API docs},\n * {@link ../../action-sheet/ActionSheetController/#create ActionSheetController API docs}, and\n * {@link ../../popover/PopoverController/#create PopoverController API docs}\n * for the properties that each interface accepts.\n *\n * For example, to change the `mode` of the overlay, pass it into `selectOptions`.\n *\n * ```html\n * <ion-select [selectOptions]=\"selectOptions\">\n *   ...\n * </ion-select>\n * ```\n *\n * ```ts\n * this.selectOptions = {\n *   title: 'Pizza Toppings',\n *   subTitle: 'Select your toppings',\n *   mode: 'md'\n * };\n * ```\n *\n * ### Object Value References\n *\n * When using objects for select values, it is possible for the identities of these objects to\n * change if they are coming from a server or database, while the selected value's identity\n * remains the same. For example, this can occur when an existing record with the desired object value\n * is loaded into the select, but the newly retrieved select options now have different identities. This will\n * result in the select appearing to have no value at all, even though the original selection in still intact.\n *\n * Using the `compareWith` `Input` is the solution to this problem\n *\n * ```html\n * <ion-item>\n *   <ion-label>Employee</ion-label>\n *   <ion-select [(ngModel)]=\"employee\" [compareWith]=\"compareFn\">\n *     <ion-option *ngFor=\"let employee of employees\" [value]=\"employee\">{{employee.name}}</ion-option>\n *   </ion-select>\n * </ion-item>\n * ```\n *\n * ```ts\n * compareFn(e1: Employee, e2: Employee): boolean {\n *   return e1 && e2 ? e1.id === e2.id : e1 === e2;\n * }\n * ```\n *\n * @demo /docs/demos/src/select/\n */\nexport class Select extends BaseInput {\n    constructor(_app, form, config, elementRef, renderer, item, deepLinker) {\n        super(config, elementRef, renderer, 'select', [], form, item, null);\n        this._app = _app;\n        this.config = config;\n        this.deepLinker = deepLinker;\n        this._multi = false;\n        this._texts = [];\n        this._text = '';\n        this._compareWith = isCheckedProperty;\n        /**\n         * @input {string} The text to display on the cancel button. Default: `Cancel`.\n         */\n        this.cancelText = 'Cancel';\n        /**\n         * @input {string} The text to display on the ok button. Default: `OK`.\n         */\n        this.okText = 'OK';\n        /**\n         * @input {any} Any additional options that the `alert` or `action-sheet` interface can take.\n         * See the [AlertController API docs](../../alert/AlertController/#create) and the\n         * [ActionSheetController API docs](../../action-sheet/ActionSheetController/#create) for the\n         * create options for each interface.\n         */\n        this.selectOptions = {};\n        /**\n         * @input {string} The interface the select should use: `action-sheet`, `popover` or `alert`. Default: `alert`.\n         */\n        this.interface = '';\n        /**\n         * @input {string} The text to display instead of the selected option's value.\n         */\n        this.selectedText = '';\n        /**\n         * @output {any} Emitted when the selection was cancelled.\n         */\n        this.ionCancel = new EventEmitter();\n    }\n    /**\n     * @input {Function} The function that will be called to compare object values\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    _click(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.open(ev);\n    }\n    _keyup() {\n        this.open();\n    }\n    /**\n     * @hidden\n     */\n    getValues() {\n        const values = Array.isArray(this._value) ? this._value : [this._value];\n        (void 0) /* assert */;\n        return values;\n    }\n    /**\n     * Open the select interface.\n     */\n    open(ev) {\n        if (this.isFocus() || this._disabled) {\n            return;\n        }\n        (void 0) /* console.debug */;\n        // the user may have assigned some options specifically for the alert\n        const selectOptions = deepCopy(this.selectOptions);\n        // make sure their buttons array is removed from the options\n        // and we create a new array for the alert's two buttons\n        selectOptions.buttons = [{\n                text: this.cancelText,\n                role: 'cancel',\n                handler: () => {\n                    this.ionCancel.emit(this);\n                }\n            }];\n        // if the selectOptions didn't provide a title then use the label's text\n        if (!selectOptions.title && this._item) {\n            selectOptions.title = this._item.getLabelText();\n        }\n        let options = this._options.toArray();\n        if ((this.interface === 'action-sheet' || this.interface === 'popover') && this._multi) {\n            console.warn('Interface cannot be \"' + this.interface + '\" with a multi-value select. Using the \"alert\" interface.');\n            this.interface = 'alert';\n        }\n        if (this.interface === 'popover' && !ev) {\n            console.warn('Interface cannot be \"popover\" without UIEvent.');\n            this.interface = 'alert';\n        }\n        let overlay;\n        if (this.interface === 'action-sheet') {\n            selectOptions.buttons = selectOptions.buttons.concat(options.map(input => {\n                return {\n                    role: (input.selected ? 'selected' : ''),\n                    text: input.text,\n                    handler: () => {\n                        this.value = input.value;\n                        input.ionSelect.emit(input.value);\n                    }\n                };\n            }));\n            var selectCssClass = 'select-action-sheet';\n            // If the user passed a cssClass for the select, add it\n            selectCssClass += selectOptions.cssClass ? ' ' + selectOptions.cssClass : '';\n            selectOptions.cssClass = selectCssClass;\n            overlay = new ActionSheet(this._app, selectOptions, this.config);\n        }\n        else if (this.interface === 'popover') {\n            let popoverOptions = options.map(input => ({\n                text: input.text,\n                checked: input.selected,\n                disabled: input.disabled,\n                value: input.value,\n                handler: () => {\n                    this.value = input.value;\n                    input.ionSelect.emit(input.value);\n                }\n            }));\n            var popoverCssClass = 'select-popover';\n            // If the user passed a cssClass for the select, add it\n            popoverCssClass += selectOptions.cssClass ? ' ' + selectOptions.cssClass : '';\n            overlay = new Popover(this._app, SelectPopover, {\n                options: popoverOptions\n            }, {\n                cssClass: popoverCssClass\n            }, this.config, this.deepLinker);\n            // ev.target is readonly.\n            // place popover regarding to ion-select instead of .button-inner\n            Object.defineProperty(ev, 'target', { value: ev.currentTarget });\n            selectOptions.ev = ev;\n        }\n        else {\n            // default to use the alert interface\n            this.interface = 'alert';\n            // user cannot provide inputs from selectOptions\n            // alert inputs must be created by ionic from ion-options\n            selectOptions.inputs = this._options.map(input => {\n                return {\n                    type: (this._multi ? 'checkbox' : 'radio'),\n                    label: input.text,\n                    value: input.value,\n                    checked: input.selected,\n                    disabled: input.disabled,\n                    handler: (selectedOption) => {\n                        // Only emit the select event if it is being checked\n                        // For multi selects this won't emit when unchecking\n                        if (selectedOption.checked) {\n                            input.ionSelect.emit(input.value);\n                        }\n                    }\n                };\n            });\n            let selectCssClass = 'select-alert';\n            // create the alert instance from our built up selectOptions\n            overlay = new Alert(this._app, selectOptions, this.config);\n            if (this._multi) {\n                // use checkboxes\n                selectCssClass += ' multiple-select-alert';\n            }\n            else {\n                // use radio buttons\n                selectCssClass += ' single-select-alert';\n            }\n            // If the user passed a cssClass for the select, add it\n            selectCssClass += selectOptions.cssClass ? ' ' + selectOptions.cssClass : '';\n            overlay.setCssClass(selectCssClass);\n            overlay.addButton({\n                text: this.okText,\n                handler: (selectedValues) => this.value = selectedValues\n            });\n        }\n        overlay.present(selectOptions);\n        this._fireFocus();\n        overlay.onDidDismiss(() => {\n            this._fireBlur();\n            this._overlay = undefined;\n        });\n        this._overlay = overlay;\n    }\n    /**\n     * Close the select interface.\n     */\n    close() {\n        if (!this._overlay || !this.isFocus()) {\n            return;\n        }\n        return this._overlay.dismiss();\n    }\n    /**\n     * @input {boolean} If true, the element can accept multiple values.\n     */\n    get multiple() {\n        return this._multi;\n    }\n    set multiple(val) {\n        this._multi = isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     */\n    get text() {\n        return (this._multi ? this._texts : this._texts.join());\n    }\n    /**\n     * @private\n     */\n    set options(val) {\n        this._options = val;\n        const values = this.getValues();\n        if (values.length === 0) {\n            // there are no values set at this point\n            // so check to see who should be selected\n            // we use writeValue() because we don't want to update ngModel\n            this.writeValue(val.filter(o => o.selected).map(o => o.value));\n        }\n        else {\n            this._updateText();\n        }\n    }\n    _inputShouldChange(val) {\n        return !deepEqual(this._value, val);\n    }\n    /**\n     * TODO: REMOVE THIS\n     * @hidden\n     */\n    _inputChangeEvent() {\n        return this.value;\n    }\n    /**\n     * @hidden\n     */\n    _updateText() {\n        this._texts.length = 0;\n        if (this._options) {\n            this._options.forEach(option => {\n                // check this option if the option's value is in the values array\n                option.selected = this.getValues().some(selectValue => {\n                    return this._compareWith(selectValue, option.value);\n                });\n                if (option.selected) {\n                    this._texts.push(option.text);\n                }\n            });\n        }\n        this._text = this._texts.join(', ');\n    }\n    /**\n     * @hidden\n     */\n    _inputUpdated() {\n        this._updateText();\n        super._inputUpdated();\n    }\n}\nSelect.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-select',\n                template: '<div *ngIf=\"!_text\" class=\"select-placeholder select-text\">{{placeholder}}</div>' +\n                    '<div *ngIf=\"_text\" class=\"select-text\">{{selectedText || _text}}</div>' +\n                    '<div class=\"select-icon\">' +\n                    '<div class=\"select-icon-inner\"></div>' +\n                    '</div>' +\n                    '<button aria-haspopup=\"true\" ' +\n                    'type=\"button\" ' +\n                    '[id]=\"id\" ' +\n                    'ion-button=\"item-cover\" ' +\n                    '[attr.aria-labelledby]=\"_labelId\" ' +\n                    '[attr.aria-disabled]=\"_disabled\" ' +\n                    'class=\"item-cover\">' +\n                    '</button>',\n                host: {\n                    '[class.select-disabled]': '_disabled'\n                },\n                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: Select, multi: true }],\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nSelect.ctorParameters = () => [\n    { type: App, },\n    { type: Form, },\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: Item, decorators: [{ type: Optional },] },\n    { type: DeepLinker, },\n];\nSelect.propDecorators = {\n    'cancelText': [{ type: Input },],\n    'okText': [{ type: Input },],\n    'placeholder': [{ type: Input },],\n    'selectOptions': [{ type: Input },],\n    'interface': [{ type: Input },],\n    'selectedText': [{ type: Input },],\n    'compareWith': [{ type: Input },],\n    'ionCancel': [{ type: Output },],\n    '_click': [{ type: HostListener, args: ['click', ['$event'],] },],\n    '_keyup': [{ type: HostListener, args: ['keyup.space',] },],\n    'multiple': [{ type: Input },],\n    'options': [{ type: ContentChildren, args: [Option,] },],\n};\n"]}