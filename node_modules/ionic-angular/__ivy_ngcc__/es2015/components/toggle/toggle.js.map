{"version":3,"file":"toggle.js","sources":["toggle.js"],"names":[],"mappingswBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Component, ElementRef, HostListener, Input, NgZone, Optional, Renderer, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Config } from '../../config/config';\nimport { DomController } from '../../platform/dom-controller';\nimport { Form } from '../../util/form';\nimport { GestureController } from '../../gestures/gesture-controller';\nimport { Haptic } from '../../tap-click/haptic';\nimport { isTrueProperty } from '../../util/util';\nimport { BaseInput } from '../../util/base-input';\nimport { Item } from '../item/item';\nimport { KEY_ENTER, KEY_SPACE } from '../../platform/key';\nimport { Platform } from '../../platform/platform';\nimport { ToggleGesture } from './toggle-gesture';\n/**\n * @name Toggle\n * @description\n * A toggle technically is the same thing as an HTML checkbox input,\n * except it looks different and is easier to use on a touch device.\n * Toggles can also have colors assigned to them, by adding any color\n * attribute.\n *\n * See the [Angular Docs](https://angular.io/docs/ts/latest/guide/forms)\n * for more info on forms and inputs.\n *\n * @usage\n * ```html\n *\n *  <ion-list>\n *\n *    <ion-item>\n *      <ion-label>Pepperoni</ion-label>\n *      <ion-toggle [(ngModel)]=\"pepperoni\"></ion-toggle>\n *    </ion-item>\n *\n *    <ion-item>\n *      <ion-label>Sausage</ion-label>\n *      <ion-toggle [(ngModel)]=\"sausage\" disabled=\"true\"></ion-toggle>\n *    </ion-item>\n *\n *    <ion-item>\n *      <ion-label>Mushrooms</ion-label>\n *      <ion-toggle [(ngModel)]=\"mushrooms\"></ion-toggle>\n *    </ion-item>\n *\n *  </ion-list>\n * ```\n *\n * @demo /docs/demos/src/toggle/\n * @see {@link /docs/components#toggle Toggle Component Docs}\n */\nexport class Toggle extends BaseInput {\n    constructor(form, config, _plt, elementRef, renderer, _haptic, item, _gestureCtrl, _domCtrl, _zone) {\n        super(config, elementRef, renderer, 'toggle', false, form, item, null);\n        this._plt = _plt;\n        this._haptic = _haptic;\n        this._gestureCtrl = _gestureCtrl;\n        this._domCtrl = _domCtrl;\n        this._zone = _zone;\n        this._activated = false;\n    }\n    /**\n     * @input {boolean} If true, the element is selected.\n     */\n    get checked() {\n        return this.value;\n    }\n    set checked(val) {\n        this.value = val;\n    }\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this._initialize();\n        this._gesture = new ToggleGesture(this._plt, this, this._gestureCtrl, this._domCtrl);\n        this._gesture.listen();\n    }\n    /**\n     * @hidden\n     */\n    _inputUpdated() { }\n    /**\n     * @hidden\n     */\n    _inputNormalize(val) {\n        return isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     */\n    _onDragStart(startX) {\n        (void 0) /* assert */;\n        (void 0) /* console.debug */;\n        this._zone.run(() => {\n            this._startX = startX;\n            this._fireFocus();\n            this._activated = true;\n        });\n    }\n    /**\n     * @hidden\n     */\n    _onDragMove(currentX) {\n        if (this._startX === undefined) {\n            (void 0) /* assert */;\n            return;\n        }\n        if (this._shouldToggle(currentX, -15)) {\n            this._zone.run(() => {\n                this.value = !this.value;\n                this._startX = currentX;\n                this._haptic.selection();\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    _onDragEnd(endX) {\n        if (this._startX === undefined) {\n            (void 0) /* assert */;\n            return;\n        }\n        (void 0) /* console.debug */;\n        this._zone.run(() => {\n            if (this._shouldToggle(endX, 4)) {\n                this.value = !this.value;\n                this._haptic.selection();\n            }\n            this._activated = false;\n            this._fireBlur();\n            this._startX = null;\n        });\n    }\n    /**\n     * @hidden\n     */\n    _shouldToggle(currentX, margin) {\n        const isLTR = !this._plt.isRTL;\n        const startX = this._startX;\n        if (this._value) {\n            return (isLTR && (startX + margin > currentX)) ||\n                (!isLTR && (startX - margin < currentX));\n        }\n        else {\n            return (isLTR && (startX - margin < currentX)) ||\n                (!isLTR && (startX + margin > currentX));\n        }\n    }\n    /**\n     * @hidden\n     */\n    _keyup(ev) {\n        if (ev.keyCode === KEY_SPACE || ev.keyCode === KEY_ENTER) {\n            (void 0) /* console.debug */;\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.value = !this.value;\n        }\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._gesture && this._gesture.destroy();\n    }\n}\nToggle.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-toggle',\n                template: '<div class=\"toggle-icon\">' +\n                    '<div class=\"toggle-inner\"></div>' +\n                    '</div>' +\n                    '<button role=\"checkbox\" ' +\n                    'type=\"button\" ' +\n                    'ion-button=\"item-cover\" ' +\n                    '[id]=\"id\" ' +\n                    '[attr.aria-checked]=\"_value\" ' +\n                    '[attr.aria-labelledby]=\"_labelId\" ' +\n                    '[attr.aria-disabled]=\"_disabled\" ' +\n                    'class=\"item-cover\" disable-activated>' +\n                    '</button>',\n                host: {\n                    '[class.toggle-disabled]': '_disabled',\n                    '[class.toggle-checked]': '_value',\n                    '[class.toggle-activated]': '_activated',\n                },\n                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: Toggle, multi: true }],\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nToggle.ctorParameters = () => [\n    { type: Form, },\n    { type: Config, },\n    { type: Platform, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: Haptic, },\n    { type: Item, decorators: [{ type: Optional },] },\n    { type: GestureController, },\n    { type: DomController, },\n    { type: NgZone, },\n];\nToggle.propDecorators = {\n    'checked': [{ type: Input },],\n    '_keyup': [{ type: HostListener, args: ['keyup', ['$event'],] },],\n};\n"]}