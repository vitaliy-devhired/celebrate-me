{"version":3,"file":"option.js","sources":["option.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;iNAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';\nimport { isPresent, isTrueProperty } from '../../util/util';\n/**\n * @name Option\n * @description\n * `ion-option` is a child component of `ion-select`. Similar to the native option element, `ion-option` can take a value and a selected property.\n *\n * @demo /docs/demos/src/select/\n */\nexport class Option {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n        this._selected = false;\n        this._disabled = false;\n        /**\n         * @output {any} Event to evaluate when option is selected.\n         */\n        this.ionSelect = new EventEmitter();\n    }\n    /**\n     * @input {boolean} If true, the user cannot interact with this element.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(val) {\n        this._disabled = isTrueProperty(val);\n    }\n    /**\n     * @input {boolean} If true, the element is selected.\n     */\n    get selected() {\n        return this._selected;\n    }\n    set selected(val) {\n        this._selected = isTrueProperty(val);\n    }\n    /**\n     * @input {any} The value of the option.\n     */\n    get value() {\n        if (isPresent(this._value)) {\n            return this._value;\n        }\n        return this.text;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    /**\n     * @hidden\n     */\n    get text() {\n        return this._elementRef.nativeElement.textContent;\n    }\n}\nOption.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-option'\n            },] },\n];\n/** @nocollapse */\nOption.ctorParameters = () => [\n    { type: ElementRef, },\n];\nOption.propDecorators = {\n    'disabled': [{ type: Input },],\n    'selected': [{ type: Input },],\n    'value': [{ type: Input },],\n    'ionSelect': [{ type: Output },],\n};\n"]}