import { Component, ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { NavParams } from '../../navigation/nav-params';
import { ViewController } from '../../navigation/view-controller';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../navigation/view-controller';
import * as ɵngcc2 from '../../config/config';
import * as ɵngcc3 from '../../navigation/nav-params';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '../button/button';

function ToastCmp_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", ctx_r0.hdrId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.d.message);
} }
function ToastCmp_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function ToastCmp_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r2.cbClick()); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.d.closeButtonText || "Close", " ");
} }
export class ToastCmp {
    constructor(_viewCtrl, _config, _elementRef, params, renderer) {
        this._viewCtrl = _viewCtrl;
        this._config = _config;
        this._elementRef = _elementRef;
        this.dismissTimeout = undefined;
        renderer.setElementClass(_elementRef.nativeElement, `toast-${_config.get('mode')}`, true);
        this.d = params.data;
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(cssClass => {
                // Make sure the class isn't whitespace, otherwise it throws exceptions
                if (cssClass.trim() !== '')
                    renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = (++toastIds);
        if (this.d.message) {
            this.hdrId = 'toast-hdr-' + this.id;
        }
    }
    ngAfterViewInit() {
        // if there's a `duration` set, automatically dismiss.
        if (this.d.duration) {
            this.dismissTimeout = setTimeout(() => {
                this.dismiss('backdrop');
            }, this.d.duration);
        }
        this.enabled = true;
    }
    ionViewDidEnter() {
        const { activeElement } = document;
        if (activeElement) {
            activeElement.blur();
        }
        let focusableEle = this._elementRef.nativeElement.querySelector('button');
        if (focusableEle) {
            focusableEle.focus();
        }
    }
    cbClick() {
        if (this.enabled) {
            this.dismiss('close');
        }
    }
    dismiss(role) {
        clearTimeout(this.dismissTimeout);
        this.dismissTimeout = undefined;
        return this._viewCtrl.dismiss(null, role, { disableApp: false });
    }
}
ToastCmp.ɵfac = function ToastCmp_Factory(t) { return new (t || ToastCmp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewController), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NavParams), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
ToastCmp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ToastCmp, selectors: [["ion-toast"]], hostAttrs: ["role", "dialog"], hostVars: 2, hostBindings: function ToastCmp_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.hdrId)("aria-describedby", ctx.descId);
    } }, decls: 4, vars: 8, consts: [[1, "toast-wrapper"], [1, "toast-container"], ["class", "toast-message", 3, "id", 4, "ngIf"], ["ion-button", "", "clear", "", "class", "toast-button", 3, "click", 4, "ngIf"], [1, "toast-message", 3, "id"], ["ion-button", "", "clear", "", 1, "toast-button", 3, "click"]], template: function ToastCmp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ToastCmp_div_2_Template, 2, 2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, ToastCmp_button_3_Template, 2, 1, "button", 3);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("toast-bottom", ctx.d.position === "bottom")("toast-middle", ctx.d.position === "middle")("toast-top", ctx.d.position === "top");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.d.message);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.d.showCloseButton);
    } }, dependencies: [ɵngcc4.NgIf, ɵngcc5.Button], encapsulation: 2 });
/** @nocollapse */
ToastCmp.ctorParameters = () => [
    { type: ViewController, },
    { type: Config, },
    { type: ElementRef, },
    { type: NavParams, },
    { type: Renderer, },
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastCmp, [{
        type: Component,
        args: [{
                selector: 'ion-toast',
                template: '<div class="toast-wrapper" ' +
                    '[class.toast-bottom]="d.position === \'bottom\'" ' +
                    '[class.toast-middle]="d.position === \'middle\'" ' +
                    '[class.toast-top]="d.position === \'top\'"> ' +
                    '<div class="toast-container"> ' +
                    '<div class="toast-message" id="{{hdrId}}" *ngIf="d.message">{{d.message}}</div> ' +
                    '<button ion-button clear class="toast-button" *ngIf="d.showCloseButton" (click)="cbClick()"> ' +
                    '{{ d.closeButtonText || \'Close\' }} ' +
                    '</button> ' +
                    '</div> ' +
                    '</div>',
                host: {
                    'role': 'dialog',
                    '[attr.aria-labelledby]': 'hdrId',
                    '[attr.aria-describedby]': 'descId'
                }
            }]
    }], function () { return [{ type: ɵngcc1.ViewController }, { type: ɵngcc2.Config }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.NavParams }, { type: Renderer }]; }, null); })();
let toastIds = -1;

//# sourceMappingURL=toast-component.js.map