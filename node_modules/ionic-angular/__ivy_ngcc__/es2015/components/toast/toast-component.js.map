{"version":3,"file":"toast-component.js","sources":["toast-component.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;yEAqBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;qLAAE;AACF;AACA","sourcesContent":["import { Component, ElementRef, Renderer } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { NavParams } from '../../navigation/nav-params';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @hidden\n */\nexport class ToastCmp {\n    constructor(_viewCtrl, _config, _elementRef, params, renderer) {\n        this._viewCtrl = _viewCtrl;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this.dismissTimeout = undefined;\n        renderer.setElementClass(_elementRef.nativeElement, `toast-${_config.get('mode')}`, true);\n        this.d = params.data;\n        if (this.d.cssClass) {\n            this.d.cssClass.split(' ').forEach(cssClass => {\n                // Make sure the class isn't whitespace, otherwise it throws exceptions\n                if (cssClass.trim() !== '')\n                    renderer.setElementClass(_elementRef.nativeElement, cssClass, true);\n            });\n        }\n        this.id = (++toastIds);\n        if (this.d.message) {\n            this.hdrId = 'toast-hdr-' + this.id;\n        }\n    }\n    ngAfterViewInit() {\n        // if there's a `duration` set, automatically dismiss.\n        if (this.d.duration) {\n            this.dismissTimeout = setTimeout(() => {\n                this.dismiss('backdrop');\n            }, this.d.duration);\n        }\n        this.enabled = true;\n    }\n    ionViewDidEnter() {\n        const { activeElement } = document;\n        if (activeElement) {\n            activeElement.blur();\n        }\n        let focusableEle = this._elementRef.nativeElement.querySelector('button');\n        if (focusableEle) {\n            focusableEle.focus();\n        }\n    }\n    cbClick() {\n        if (this.enabled) {\n            this.dismiss('close');\n        }\n    }\n    dismiss(role) {\n        clearTimeout(this.dismissTimeout);\n        this.dismissTimeout = undefined;\n        return this._viewCtrl.dismiss(null, role, { disableApp: false });\n    }\n}\nToastCmp.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-toast',\n                template: '<div class=\"toast-wrapper\" ' +\n                    '[class.toast-bottom]=\"d.position === \\'bottom\\'\" ' +\n                    '[class.toast-middle]=\"d.position === \\'middle\\'\" ' +\n                    '[class.toast-top]=\"d.position === \\'top\\'\"> ' +\n                    '<div class=\"toast-container\"> ' +\n                    '<div class=\"toast-message\" id=\"{{hdrId}}\" *ngIf=\"d.message\">{{d.message}}</div> ' +\n                    '<button ion-button clear class=\"toast-button\" *ngIf=\"d.showCloseButton\" (click)=\"cbClick()\"> ' +\n                    '{{ d.closeButtonText || \\'Close\\' }} ' +\n                    '</button> ' +\n                    '</div> ' +\n                    '</div>',\n                host: {\n                    'role': 'dialog',\n                    '[attr.aria-labelledby]': 'hdrId',\n                    '[attr.aria-describedby]': 'descId',\n                },\n            },] },\n];\n/** @nocollapse */\nToastCmp.ctorParameters = () => [\n    { type: ViewController, },\n    { type: Config, },\n    { type: ElementRef, },\n    { type: NavParams, },\n    { type: Renderer, },\n];\nlet toastIds = -1;\n"]}