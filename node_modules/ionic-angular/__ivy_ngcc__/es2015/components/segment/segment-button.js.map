{"version":3,"file":"segment-button.js","sources":["segment-button.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;6BAgBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Component, EventEmitter, HostListener, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { isPresent, isTrueProperty } from '../../util/util';\n/**\n * @name SegmentButton\n * @description\n * The child buttons of the `ion-segment` component. Each `ion-segment-button` must have a value.\n *\n * @usage\n *\n * ```html\n * <ion-content>\n *   <!-- Segment buttons with icons -->\n *   <ion-segment [(ngModel)]=\"icons\" color=\"secondary\">\n *     <ion-segment-button value=\"camera\">\n *       <ion-icon name=\"camera\"></ion-icon>\n *     </ion-segment-button>\n *     <ion-segment-button value=\"bookmark\">\n *       <ion-icon name=\"bookmark\"></ion-icon>\n *     </ion-segment-button>\n *   </ion-segment>\n *\n *   <!-- Segment buttons with text -->\n *   <ion-segment [(ngModel)]=\"relationship\" color=\"primary\">\n *     <ion-segment-button value=\"friends\" (ionSelect)=\"selectedFriends()\">\n *       Friends\n *     </ion-segment-button>\n *     <ion-segment-button value=\"enemies\" (ionSelect)=\"selectedEnemies()\">\n *       Enemies\n *     </ion-segment-button>\n *   </ion-segment>\n * </ion-content>\n * ```\n *\n *\n * @demo /docs/demos/src/segment/\n * @see {@link /docs/components#segment Segment Component Docs}\n * @see {@link /docs/api/components/segment/Segment/ Segment API Docs}\n */\nexport class SegmentButton {\n    constructor() {\n        this.isActive = false;\n        this._disabled = false;\n        /**\n         * @output {SegmentButton} Emitted when a segment button has been clicked.\n         */\n        this.ionSelect = new EventEmitter();\n    }\n    /**\n     * @input {boolean} If true, the user cannot interact with this element.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(val) {\n        this._disabled = isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     * On click of a SegmentButton\n     */\n    onClick() {\n        (void 0) /* console.debug */;\n        this.ionSelect.emit(this);\n    }\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        if (!isPresent(this.value)) {\n            console.warn('<ion-segment-button> requires a \"value\" attribute');\n        }\n    }\n}\nSegmentButton.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-segment-button',\n                template: '<ng-content></ng-content>' +\n                    '<div class=\"button-effect\"></div>',\n                host: {\n                    'tappable': '',\n                    'class': 'segment-button',\n                    'role': 'button',\n                    '[class.segment-button-disabled]': '_disabled',\n                    '[class.segment-activated]': 'isActive',\n                    '[attr.aria-pressed]': 'isActive'\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nSegmentButton.ctorParameters = () => [];\nSegmentButton.propDecorators = {\n    'value': [{ type: Input },],\n    'ionSelect': [{ type: Output },],\n    'disabled': [{ type: Input },],\n    'onClick': [{ type: HostListener, args: ['click',] },],\n};\n"]}