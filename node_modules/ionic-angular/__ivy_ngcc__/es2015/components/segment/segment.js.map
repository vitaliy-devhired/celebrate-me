{"version":3,"file":"segment.js","sources":["segment.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;0DAQE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { ContentChildren, Directive, ElementRef, Optional, Renderer } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Config } from '../../config/config';\nimport { BaseInput } from '../../util/base-input';\nimport { SegmentButton } from './segment-button';\n/**\n * @name Segment\n * @description\n * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.\n * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.\n * You could use Angular's `ngModel` or `FormBuilder` API. For an overview on how `FormBuilder` works, checkout [Angular Forms](http://learnangular2.com/forms/), or [Angular FormBuilder](https://angular.io/docs/ts/latest/api/forms/index/FormBuilder-class.html)\n *\n *\n * ```html\n * <!-- Segment in a header -->\n * <ion-header>\n *   <ion-toolbar>\n *     <ion-segment [(ngModel)]=\"icons\" color=\"secondary\">\n *       <ion-segment-button value=\"camera\">\n *         <ion-icon name=\"camera\"></ion-icon>\n *       </ion-segment-button>\n *       <ion-segment-button value=\"bookmark\">\n *         <ion-icon name=\"bookmark\"></ion-icon>\n *       </ion-segment-button>\n *     </ion-segment>\n *   </ion-toolbar>\n * </ion-header>\n *\n * <ion-content>\n *   <!-- Segment in content with material design mode on all devices -->\n *   <ion-segment [(ngModel)]=\"relationship\" color=\"primary\" mode=\"md\" (ionChange)=\"segmentChanged($event)\">\n *     <ion-segment-button value=\"friends\">\n *       Friends\n *     </ion-segment-button>\n *     <ion-segment-button value=\"enemies\">\n *       Enemies\n *     </ion-segment-button>\n *   </ion-segment>\n *\n *   <!-- Segment in a form -->\n *   <form [formGroup]=\"myForm\">\n *     <ion-segment formControlName=\"mapStyle\" color=\"danger\">\n *       <ion-segment-button value=\"standard\">\n *         Standard\n *       </ion-segment-button>\n *       <ion-segment-button value=\"hybrid\">\n *         Hybrid\n *       </ion-segment-button>\n *       <ion-segment-button value=\"sat\">\n *         Satellite\n *       </ion-segment-button>\n *     </ion-segment>\n *   </form>\n * </ion-content>\n * ```\n *\n *\n * @demo /docs/demos/src/segment/\n * @see {@link /docs/components#segment Segment Component Docs}\n * @see [Angular Forms](http://learnangular2.com/forms/)\n */\nexport class Segment extends BaseInput {\n    constructor(config, elementRef, renderer, ngControl) {\n        super(config, elementRef, renderer, 'segment', null, null, null, ngControl);\n    }\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this._initialize();\n        this._buttons.forEach(button => {\n            button.ionSelect.subscribe((selectedButton) => {\n                this.value = selectedButton.value;\n                this._fireTouched();\n            });\n        });\n    }\n    /**\n     * @hidden\n     * Write a new value to the element.\n     */\n    _inputUpdated() {\n        if (!this._buttons) {\n            (void 0) /* assert */;\n            return;\n        }\n        const buttons = this._buttons.toArray();\n        const value = this.value;\n        for (var button of buttons) {\n            button.isActive = (button.value === value);\n        }\n    }\n}\nSegment.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-segment',\n                host: {\n                    '[class.segment-disabled]': '_disabled'\n                }\n            },] },\n];\n/** @nocollapse */\nSegment.ctorParameters = () => [\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: NgControl, decorators: [{ type: Optional },] },\n];\nSegment.propDecorators = {\n    '_buttons': [{ type: ContentChildren, args: [SegmentButton,] },],\n};\n"]}