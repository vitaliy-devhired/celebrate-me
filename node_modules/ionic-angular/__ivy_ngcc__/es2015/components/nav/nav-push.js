import { Directive, HostListener, Input, Optional } from '@angular/core';
import { NavController } from '../../navigation/nav-controller';
/**
 * @name NavPush
 * @description
 * Directive to declaratively push a new page to the current nav
 * stack.
 *
 * @usage
 * ```html
 * <button ion-button [navPush]="pushPage"></button>
 * ```
 *
 * To specify parameters you can use array syntax or the `navParams`
 * property:
 *
 * ```html
 * <button ion-button [navPush]="pushPage" [navParams]="params">Go</button>
 * ```
 *
 * Where `pushPage` and `params` are specified in your component,
 * and `pushPage` contains a reference to a
 * component you would like to push:
 *
 * ```ts
 * import { LoginPage } from './login';
 *
 * @Component({
 *   template: `<button ion-button [navPush]="pushPage" [navParams]="params">Go</button>`
 * })
 * class MyPage {
 *   pushPage: any;
 *   params: Object;
 *   constructor(){
 *     this.pushPage = LoginPage;
 *     this.params = { id: 42 };
 *   }
 * }
 * ```
 *
 * @demo /docs/demos/src/navigation/
 * @see {@link /docs/components#navigation Navigation Component Docs}
 * @see {@link ../NavPop NavPop API Docs}
 *
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../navigation/nav-controller';
export class NavPush {
    constructor(_nav) {
        this._nav = _nav;
        if (!_nav) {
            console.error('navPush must be within a NavController');
        }
    }
    /**
     * @hidden
     */
    onClick() {
        if (this._nav && this.navPush) {
            this._nav.push(this.navPush, this.navParams);
            return false;
        }
        return true;
    }
}
NavPush.ɵfac = function NavPush_Factory(t) { return new (t || NavPush)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NavController, 8)); };
NavPush.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NavPush, selectors: [["", "navPush", ""]], hostBindings: function NavPush_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NavPush_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { navPush: "navPush", navParams: "navParams" } });
/** @nocollapse */
NavPush.ctorParameters = () => [
    { type: NavController, decorators: [{ type: Optional },] },
];
NavPush.propDecorators = {
    'navPush': [{ type: Input },],
    'navParams': [{ type: Input },],
    'onClick': [{ type: HostListener, args: ['click',] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavPush, [{
        type: Directive,
        args: [{
                selector: '[navPush]'
            }]
    }], function () { return [{ type: ɵngcc1.NavController, decorators: [{
                type: Optional
            }] }]; }, { 
    /**
     * @hidden
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }], navPush: [{
            type: Input
        }], navParams: [{
            type: Input
        }] }); })();

//# sourceMappingURL=nav-push.js.map