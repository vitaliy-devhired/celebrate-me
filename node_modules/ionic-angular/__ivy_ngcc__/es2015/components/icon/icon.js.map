{"version":3,"file":"icon.js","sources":["icon.js"],"names":[],"mappingsgIAQE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Directive, ElementRef, HostBinding, Input, Renderer } from '@angular/core';\nimport { isTrueProperty } from '../../util/util';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\n/**\n * @name Icon\n * @description\n * Icons can be used on their own, or inside of a number of Ionic components.\n * For a full list of available icons, check out the\n * [Ionicons docs](../../../../ionicons).\n *\n * One feature of Ionicons in Ionic is when icon names are set, the actual icon\n * which is rendered can change slightly depending on the mode the app is\n * running from. For example, by setting the icon name of `alarm`, on iOS the\n * icon will automatically apply `ios-alarm`, and on Material Design it will\n * automatically apply `md-alarm`. This allows the developer to write the\n * markup once while Ionic applies the appropriate icon based on the mode.\n *\n * @usage\n * ```html\n * <!-- automatically uses the correct \"star\" icon depending on the mode -->\n * <ion-icon name=\"star\"></ion-icon>\n *\n * <!-- explicity set the icon for each mode -->\n * <ion-icon ios=\"ios-home\" md=\"md-home\"></ion-icon>\n *\n * <!-- always use the same icon, no matter what the mode -->\n * <ion-icon name=\"ios-clock\"></ion-icon>\n * <ion-icon name=\"logo-twitter\"></ion-icon>\n * ```\n *\n * @demo /docs/demos/src/icon/\n * @see {@link /docs/components#icons Icon Component Docs}\n *\n */\nexport class Icon extends Ion {\n    constructor(config, elementRef, renderer) {\n        super(config, elementRef, renderer, 'icon');\n        /** @hidden */\n        this._isActive = true;\n        /** @hidden */\n        this._name = '';\n        /** @hidden */\n        this._ios = '';\n        /** @hidden */\n        this._md = '';\n        /** @hidden */\n        this._css = '';\n        /**\n         * @hidden\n         */\n        this._hidden = false;\n        this._iconMode = config.get('iconMode');\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        if (this._css) {\n            this.setElementClass(this._css, false);\n        }\n    }\n    /**\n     * @input {string} Specifies which icon to use. The appropriate icon will be used based on the mode.\n     * For more information, see [Ionicons](/docs/ionicons/).\n     */\n    get name() {\n        return this._name;\n    }\n    set name(val) {\n        if (!(/^md-|^ios-|^logo-/.test(val))) {\n            // this does not have one of the defaults\n            // so lets auto add in the mode prefix for them\n            this._name = this._iconMode + '-' + val;\n        }\n        else {\n            this._name = val;\n        }\n        this.update();\n    }\n    /**\n     * @input {string} Specifies which icon to use on `ios` mode.\n     */\n    get ios() {\n        return this._ios;\n    }\n    set ios(val) {\n        this._ios = val;\n        this.update();\n    }\n    /**\n     * @input {string} Specifies which icon to use on `md` mode.\n     */\n    get md() {\n        return this._md;\n    }\n    set md(val) {\n        this._md = val;\n        this.update();\n    }\n    /**\n     * @input {boolean} If true, the icon is styled with an \"active\" appearance.\n     * An active icon is filled in, and an inactive icon is the outline of the icon.\n     * The `isActive` property is largely used by the tabbar. Only affects `ios` icons.\n     */\n    get isActive() {\n        return this._isActive;\n    }\n    set isActive(val) {\n        this._isActive = isTrueProperty(val);\n        this.update();\n    }\n    /**\n     * @hidden\n     */\n    update() {\n        let iconName;\n        if (this._ios && this._iconMode === 'ios') {\n            iconName = this._ios;\n        }\n        else if (this._md && this._iconMode === 'md') {\n            iconName = this._md;\n        }\n        else {\n            iconName = this._name;\n        }\n        let hidden = this._hidden = (iconName === null);\n        if (hidden) {\n            return;\n        }\n        let iconMode = iconName.split('-', 2)[0];\n        if (iconMode === 'ios' &&\n            !this._isActive &&\n            iconName.indexOf('logo-') < 0 &&\n            iconName.indexOf('-outline') < 0) {\n            iconName += '-outline';\n        }\n        let css = 'ion-' + iconName;\n        if (this._css === css) {\n            return;\n        }\n        if (this._css) {\n            this.setElementClass(this._css, false);\n        }\n        this._css = css;\n        this.setElementClass(css, true);\n        let label = iconName\n            .replace('ios-', '')\n            .replace('md-', '')\n            .replace('-', ' ');\n        this.setElementAttribute('aria-label', label);\n    }\n}\nIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-icon',\n                host: {\n                    'role': 'img'\n                }\n            },] },\n];\n/** @nocollapse */\nIcon.ctorParameters = () => [\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n];\nIcon.propDecorators = {\n    'name': [{ type: Input },],\n    'ios': [{ type: Input },],\n    'md': [{ type: Input },],\n    'isActive': [{ type: Input },],\n    '_hidden': [{ type: HostBinding, args: ['class.hide',] },],\n};\n"]}