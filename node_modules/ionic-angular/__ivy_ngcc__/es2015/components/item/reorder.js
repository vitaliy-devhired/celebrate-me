import { Component, ElementRef, HostListener } from '@angular/core';
import { findReorderItem } from './item-reorder-util';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../icon/icon';
export class Reorder {
    constructor(elementRef) {
        this.elementRef = elementRef;
        elementRef.nativeElement['$ionComponent'] = this;
    }
    getReorderNode() {
        return findReorderItem(this.elementRef.nativeElement, null);
    }
    onClick(ev) {
        // Stop propagation if click event reaches ion-reorder
        ev.preventDefault();
        ev.stopPropagation();
    }
}
Reorder.ɵfac = function Reorder_Factory(t) { return new (t || Reorder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
Reorder.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: Reorder, selectors: [["ion-reorder"]], hostBindings: function Reorder_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function Reorder_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, decls: 1, vars: 0, consts: [["name", "reorder"]], template: function Reorder_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "ion-icon", 0);
    } }, dependencies: [ɵngcc1.Icon], encapsulation: 2 });
/** @nocollapse */
Reorder.ctorParameters = () => [
    { type: ElementRef, },
];
Reorder.propDecorators = {
    'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Reorder, [{
        type: Component,
        args: [{
                selector: 'ion-reorder',
                template: `<ion-icon name="reorder"></ion-icon>`
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

//# sourceMappingURL=reorder.js.map