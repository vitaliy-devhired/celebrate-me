{"version":3,"file":"item-reorder.js","sources":["item-reorder.js"],"names":[],"mappingswGAUE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Directive, ElementRef, EventEmitter, Input, NgZone, Optional, Output, Renderer } from '@angular/core';\nimport { Content } from '../content/content';\nimport { DomController } from '../../platform/dom-controller';\nimport { isTrueProperty, reorderArray } from '../../util/util';\nimport { ItemReorderGesture } from './item-reorder-gesture';\nimport { Platform } from '../../platform/platform';\nexport class ReorderIndexes {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n    applyTo(array) {\n        reorderArray(array, this);\n    }\n}\n/**\n * @name ItemReorder\n * @description\n * Item reorder adds the ability to change an item's order in a group.\n * It can be used within an `ion-list` or `ion-item-group` to provide a\n * visual drag and drop interface.\n *\n * ## Grouping Items\n *\n * All reorderable items must be grouped in the same element. If an item\n * should not be reordered, it shouldn't be included in this group. For\n * example, the following code works because the items are grouped in the\n * `<ion-list>`:\n *\n *  ```html\n *  <ion-list reorder=\"true\">\n *    <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *  </ion-list>\n *  ```\n *\n * However, the below list includes a header that shouldn't be reordered:\n *\n *  ```html\n *  <ion-list reorder=\"true\">\n *    <ion-list-header>Header</ion-list-header>\n *    <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *  </ion-list>\n *  ```\n *\n * In order to mix different sets of items, `ion-item-group` should be used to\n * group the reorderable items:\n *\n *  ```html\n *  <ion-list>\n *    <ion-list-header>Header</ion-list-header>\n *    <ion-item-group reorder=\"true\">\n *      <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *    </ion-item-group>\n *  </ion-list>\n *  ```\n *\n * It's important to note that in this example, the `[reorder]` directive is applied to\n * the `<ion-item-group>` instead of the `<ion-list>`. This way makes it possible to\n * mix items that should and shouldn't be reordered.\n *\n *\n * ## Implementing the Reorder Function\n *\n * When the item is dragged and dropped into the new position, the `(ionItemReorder)` event is\n * emitted. This event provides the initial index (from) and the new index (to) of the reordered\n * item. For example, if the first item is dragged to the fifth position, the event will emit\n * `{from: 0, to: 4}`. Note that the index starts at zero.\n *\n * A function should be called when the event is emitted that handles the reordering of the items.\n * See [usage](#usage) below for some examples.\n *\n *\n * @usage\n *\n * ```html\n * <ion-list>\n *   <ion-list-header>Header</ion-list-header>\n *   <ion-item-group reorder=\"true\" (ionItemReorder)=\"reorderItems($event)\">\n *     <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *   </ion-item-group>\n * </ion-list>\n * ```\n *\n * ```ts\n * class MyComponent {\n *   items = [];\n *\n *   constructor() {\n *     for (let x = 0; x < 5; x++) {\n *       this.items.push(x);\n *     }\n *   }\n *\n *   reorderItems(indexes) {\n *     let element = this.items[indexes.from];\n *     this.items.splice(indexes.from, 1);\n *     this.items.splice(indexes.to, 0, element);\n *   }\n * }\n * ```\n *\n * Ionic also provides a helper function called `reorderArray` to\n * reorder the array of items. This can be used instead:\n *\n * ```ts\n * import { reorderArray } from 'ionic-angular';\n *\n * class MyComponent {\n *   items = [];\n *\n *   constructor() {\n *     for (let x = 0; x < 5; x++) {\n *       this.items.push(x);\n *     }\n *   }\n *\n *   reorderItems(indexes) {\n *     this.items = reorderArray(this.items, indexes);\n *   }\n * }\n * ```\n * Alternatevely you can execute helper function inside template:\n *\n * ```html\n * <ion-list>\n *   <ion-list-header>Header</ion-list-header>\n *   <ion-item-group reorder=\"true\" (ionItemReorder)=\"$event.applyTo(items)\">\n *     <ion-item *ngFor=\"let item of items\">{% raw %}{{ item }}{% endraw %}</ion-item>\n *   </ion-item-group>\n * </ion-list>\n * ```\n *\n * @demo /docs/demos/src/item-reorder/\n * @see {@link /docs/components#lists List Component Docs}\n * @see {@link ../../list/List List API Docs}\n * @see {@link ../Item Item API Docs}\n */\nexport class ItemReorder {\n    constructor(_plt, _dom, elementRef, _rendered, _zone, _content) {\n        this._plt = _plt;\n        this._dom = _dom;\n        this._rendered = _rendered;\n        this._zone = _zone;\n        this._content = _content;\n        this._enableReorder = false;\n        this._visibleReorder = false;\n        this._isStart = false;\n        this._lastToIndex = -1;\n        /**\n         * @output {object} Emitted when the item is reordered. Emits an object\n         * with `from` and `to` properties.\n         */\n        this.ionItemReorder = new EventEmitter();\n        this._element = elementRef.nativeElement;\n    }\n    /**\n     * @input {string} Which side of the view the ion-reorder should be placed. Default `\"end\"`.\n     */\n    set side(side) {\n        this._isStart = side === 'start';\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._element = null;\n        this._reorderGesture && this._reorderGesture.destroy();\n    }\n    /**\n     * @hidden\n     */\n    get reorder() {\n        return this._enableReorder;\n    }\n    set reorder(val) {\n        let enabled = isTrueProperty(val);\n        if (!enabled && this._reorderGesture) {\n            this._reorderGesture.destroy();\n            this._reorderGesture = null;\n            this._visibleReorder = false;\n            setTimeout(() => this._enableReorder = false, 400);\n        }\n        else if (enabled && !this._reorderGesture) {\n            (void 0) /* console.debug */;\n            this._reorderGesture = new ItemReorderGesture(this._plt, this);\n            this._enableReorder = true;\n            this._dom.write(() => {\n                this._zone.run(() => {\n                    this._visibleReorder = true;\n                });\n            }, 16);\n        }\n    }\n    _reorderPrepare() {\n        let ele = this._element;\n        let children = ele.children;\n        for (let i = 0, ilen = children.length; i < ilen; i++) {\n            var child = children[i];\n            child.$ionIndex = i;\n            child.$ionReorderList = ele;\n        }\n    }\n    _reorderStart() {\n        this.setElementClass('reorder-list-active', true);\n    }\n    _reorderEmit(fromIndex, toIndex) {\n        this._reorderReset();\n        if (fromIndex !== toIndex) {\n            this._zone.run(() => {\n                const indexes = new ReorderIndexes(fromIndex, toIndex);\n                this.ionItemReorder.emit(indexes);\n            });\n        }\n    }\n    _scrollContent(scroll) {\n        const scrollTop = this._content.scrollTop + scroll;\n        if (scroll !== 0) {\n            this._content.scrollTo(0, scrollTop, 0);\n        }\n        return scrollTop;\n    }\n    _reorderReset() {\n        let children = this._element.children;\n        let len = children.length;\n        this.setElementClass('reorder-list-active', false);\n        let transform = this._plt.Css.transform;\n        for (let i = 0; i < len; i++) {\n            children[i].style[transform] = '';\n        }\n        this._lastToIndex = -1;\n    }\n    _reorderMove(fromIndex, toIndex, itemHeight) {\n        if (this._lastToIndex === -1) {\n            this._lastToIndex = fromIndex;\n        }\n        let lastToIndex = this._lastToIndex;\n        this._lastToIndex = toIndex;\n        // TODO: I think both loops can be merged into a single one\n        // but I had no luck last time I tried\n        /********* DOM READ ********** */\n        let children = this._element.children;\n        /********* DOM WRITE ********* */\n        let transform = this._plt.Css.transform;\n        if (toIndex >= lastToIndex) {\n            for (let i = lastToIndex; i <= toIndex; i++) {\n                if (i !== fromIndex) {\n                    children[i].style[transform] = (i > fromIndex)\n                        ? `translateY(${-itemHeight}px)` : '';\n                }\n            }\n        }\n        if (toIndex <= lastToIndex) {\n            for (let i = toIndex; i <= lastToIndex; i++) {\n                if (i !== fromIndex) {\n                    children[i].style[transform] = (i < fromIndex)\n                        ? `translateY(${itemHeight}px)` : '';\n                }\n            }\n        }\n    }\n    /**\n     * @hidden\n     */\n    setElementClass(classname, add) {\n        this._rendered.setElementClass(this._element, classname, add);\n    }\n    /**\n     * @hidden\n     */\n    getNativeElement() {\n        return this._element;\n    }\n}\nItemReorder.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-list[reorder],ion-item-group[reorder]',\n                host: {\n                    '[class.reorder-enabled]': '_enableReorder',\n                    '[class.reorder-visible]': '_visibleReorder',\n                    '[class.reorder-side-start]': '_isStart'\n                }\n            },] },\n];\n/** @nocollapse */\nItemReorder.ctorParameters = () => [\n    { type: Platform, },\n    { type: DomController, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: NgZone, },\n    { type: Content, decorators: [{ type: Optional },] },\n];\nItemReorder.propDecorators = {\n    'ionItemReorder': [{ type: Output },],\n    'side': [{ type: Input, args: ['side',] },],\n    'reorder': [{ type: Input },],\n};\n"]}