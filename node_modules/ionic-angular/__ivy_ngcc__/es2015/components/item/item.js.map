{"version":3,"file":"item.js","sources":["item.js"],"names":[],"mappingsuBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, ElementRef, Optional, Renderer, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Button } from '../button/button';\nimport { Config } from '../../config/config';\nimport { Form } from '../../util/form';\nimport { Icon } from '../icon/icon';\nimport { Ion } from '../ion';\nimport { Label } from '../label/label';\nimport { ItemReorder } from './item-reorder';\n/**\n * @name Item\n * @description\n * An item can contain text, images, and anything else. Generally it is placed in a list with other\n * items. It can easily be swiped, deleted, reordered, edited, and more. An item is only required to\n * be in a [List](../../list/List) if manipulating the item via gestures is required. It requires an\n * [ItemSliding](../ItemSliding) wrapper element in order to be swiped.\n *\n *\n * ## Common Usage\n * There are a few elements that are considered items, but not all of them are styled to look the same.\n * The basic item can be written as an `<ion-item>` element or it can be added to any element by adding\n * `ion-item` as an attribute. List headers and item dividers, although styled differently, are also items\n * and can be written as `<ion-list-header>` and `<ion-item-divider>`, respectively.\n *\n * ### As an Element\n * A basic item should be written as a `<ion-item>` element when it is not clickable.\n *\n * ```html\n * <ion-item>\n *   Item\n * </ion-item>\n * ```\n *\n * A list header should be written as `<ion-list-header>`.\n *\n * ```html\n * <ion-list-header>\n *   List Header\n * </ion-list-header>\n * ```\n *\n * An item divider should be written as `<ion-item-divider>`.\n *\n * ```html\n * <ion-item-divider>\n *   Item Divider\n * </ion-item-divider>\n * ```\n *\n * ### As an Attribute\n * The attribute `ion-item` should be added to a `<button>` when the item can be clicked or tapped. It\n * should be added to an `<a>` element when the item needs to contain a `href`. It can be added as an\n * attribute to any element to take on the item styling.\n *\n * ```html\n * <button ion-item (click)=\"buttonClick()\">\n *   Button Item\n * </button>\n *\n * <a ion-item href=\"https://www.ionicframework.com\">\n *   Anchor Item\n * </a>\n * ```\n *\n * Note: do not add `ion-item` as an attribute to an `<ion-list-header>` or `<ion-item-divider>` element\n * as they are already items and their styling will be changed to look like a basic item.\n *\n * ## Detail Arrows\n * By default, `<button>` and `<a>` elements with the `ion-item` attribute will display a right arrow icon\n * on `ios` mode. To hide the right arrow icon on either of these elements, add the `detail-none` attribute\n * to the item. To show the right arrow icon on an element that doesn't display it naturally, add the\n * `detail-push` attribute to the item.\n *\n * ```html\n * <ion-item detail-push>\n *   Item with Detail Arrow\n * </ion-item>\n *\n * <button ion-item (click)=\"buttonClick()\">\n *   Button Item with Detail Arrow\n * </button>\n *\n * <a ion-item detail-none href=\"https://www.ionicframework.com\">\n *   Anchor Item with no Detail Arrow\n * </a>\n * ```\n *\n * This feature is not enabled by default for `md` and `wp` modes, but it can be enabled by setting the\n * Sass variables `$item-md-detail-push-show` and `$item-wp-detail-push-show`, respectively, to `true`.\n * It can also be disabled for ios by setting `$item-ios-detail-push-show` to `false`. See the\n * [theming documentation](http://ionicframework.com/docs/theming/overriding-ionic-variables/) for\n * more information on overriding Sass variables.\n *\n *\n * ## Item Placement\n * Items rely heavily on content projection to position content. The item grabs content based on the\n * element or attribute and positions it that way. This logic makes it possible to write a complex\n * item with simple, understandable markup without having to worry about styling and positioning\n * the elements.\n *\n * The below chart details the attributes item looks for and where it will place the element with\n * that attribute inside of the item:\n *\n *  | Attribute      | Description                                                                                          |\n *  |----------------|----------------------------------------------------------------------------------------------------- |\n *  | `item-start`   | Placed to the left of all other elements, outside of the inner item.                                 |\n *  | `item-end`     | Placed to the right of all other elements, inside of the inner item, outside of the input wrapper.   |\n *  | `item-content` | Placed to the right of any `ion-label`, inside of the input wrapper.                                 |\n *\n * ### Checkboxes, Radios and Toggles\n * [Checkboxes](../../checkbox/Checkbox) are positioned in the same place as the `item-start` attribute.\n * [Radios](../../radio/RadioButton) and [Toggles](../../toggle/Toggle) are positioned in the same place\n * as the `item-end` attribute. All of these components can be positioned differently by adding the\n * `item-start` or `item-end` attribute.\n *\n * ### Content and Inputs\n * A [Label](../../label/Label) is placed inside of the item to the left of all content and inputs. The\n * following components are all placed in the same position as the `item-content` attribute: [Select](../../select/Select),\n * [Input](../../input/Input), [TextArea](../../input/TextArea), [DateTime](../../datetime/DateTime), and\n * [Range](../../range/Range).\n *\n * Any element directly placed inside of an `<ion-item>` that does not have one of the previously mentioned\n * attributes and isn't one of the above elements will be placed inside of a [Label](../../label/Label).\n *\n * ### Text Alignment\n * By default, Items will align text to the left and add an ellipsis when the text is wider than the item.\n * See the [Utility Attributes Documentation](../../../../theming/css-utilities/) for attributes that can\n * be added to `ion-item` to transform the text.\n *\n * @usage\n *\n * ```html\n * <ion-list>\n *\n *   <ion-list-header>\n *     Header\n *   </ion-list-header>\n *\n *   <ion-item>\n *     Item\n *   </ion-item>\n *\n *   <ion-item detail-push>\n *     Item with Detail Arrow\n *   </ion-item>\n *\n *   <button ion-item (click)=\"buttonClick()\">\n *     Button Item\n *   </button>\n *\n *   <ion-item-divider>\n *     Item Divider\n *   </ion-item-divider>\n *\n *   <button ion-item detail-none (click)=\"buttonClick()\">\n *     Button Item with no Detail Arrow\n *   </button>\n *\n *   <a ion-item href=\"https://www.ionicframework.com\">\n *     Anchor Item\n *   </a>\n *\n *   <ion-item no-lines>\n *     Item with no border\n *   </ion-item>\n *\n *   <ion-item text-wrap>\n *     Multiline text that should wrap when it is too long\n *     to fit on one line in the item.\n *   </ion-item>\n *\n * </ion-list>\n * ```\n *\n *\n * @advanced\n *\n * ```html\n * <ion-list>\n *\n *   <!-- List header with buttons on each side -->\n *   <ion-list-header>\n *     <button ion-button item-start (click)=\"buttonClick()\">Button</button>\n *     List Header\n *     <button ion-button outline item-end (click)=\"buttonClick()\">Outline</button>\n *   </ion-list-header>\n *\n *   <!-- Loops through and creates multiple items -->\n *   <ion-item *ngFor=\"let item of items\">\n *     Item {% raw %}{{item}}{% endraw %}\n *   </ion-item>\n *\n *   <!-- Button item with an icon on the left -->\n *   <button ion-item>\n *     <ion-icon name=\"star\" item-start></ion-icon>\n *     Button Item\n *   </button>\n *\n *   <!-- Item with a label and content -->\n *   <ion-item>\n *     <ion-label>\n *       Item Label\n *     </ion-label>\n *     <div item-content>\n *       Item Content next to the label\n *     </div>\n *   </ion-item>\n *\n *   <!-- Item with left and right buttons -->\n *   <ion-item>\n *     <button ion-button item-start (click)=\"buttonClick()\">Button</button>\n *     Item\n *     <button ion-button outline item-end (click)=\"buttonClick()\">Outline</button>\n *   </ion-item>\n *\n *   <!-- Item divider with a right button -->\n *   <ion-item-divider>\n *     Item Divider\n *     <button ion-button item-end>Button</button>\n *   </ion-item-divider>\n *\n *   <!-- Disabled button item with left and right buttons -->\n *   <button ion-item disabled>\n *     <button ion-button item-start (click)=\"buttonClick()\">\n *       <ion-icon name=\"home\"></ion-icon>\n *       Left Icon\n *     </button>\n *     Disabled Button Item\n *     <button ion-button outline item-end (click)=\"buttonClick()\">\n *       <ion-icon name=\"star\"></ion-icon>\n *       Left Icon\n *     </button>\n *   </button>\n *\n *   <!-- Item with an avatar on the left and button on the right -->\n *   <ion-item>\n *     <ion-avatar item-start>\n *       <img src=\"img/my-avatar.png\">\n *     </ion-avatar>\n *     Avatar Item\n *     <button ion-button outline item-end>View</button>\n *   </ion-item>\n *\n *   <!-- Item with a thumbnail on the right -->\n *   <ion-item>\n *     <h2>Item</h2>\n *     <p>Item Paragraph</p>\n *     <ion-thumbnail item-end>\n *       <img src=\"img/my-thumbnail.png\">\n *     </ion-thumbnail>\n *   </ion-item>\n *\n *   <!-- Sliding item -->\n *   <ion-item-sliding>\n *     <ion-item>\n *       Item\n *     </ion-item>\n *     <ion-item-options>\n *       <button ion-button color=\"primary\" (click)=\"archive()\">Archive</button>\n *     </ion-item-options>\n *   </ion-item-sliding>\n *\n * </ion-list>\n * ```\n *\n *\n * @demo /docs/demos/src/item/\n * @see {@link /docs/components#lists List Component Docs}\n * @see {@link ../../list/List List API Docs}\n * @see {@link ../ItemSliding ItemSliding API Docs}\n */\nexport class Item extends Ion {\n    constructor(form, config, elementRef, renderer, reorder) {\n        super(config, elementRef, renderer, 'item');\n        this._ids = -1;\n        this._inputs = [];\n        this._viewLabel = true;\n        this._name = 'item';\n        /**\n         * @hidden\n         */\n        this.labelId = null;\n        this._setName(elementRef);\n        this._hasReorder = !!reorder;\n        this.id = form.nextId().toString();\n        this.labelId = 'lbl-' + this.id;\n        // auto add \"tappable\" attribute to ion-item components that have a click listener\n        if (!renderer.orgListen) {\n            renderer.orgListen = renderer.listen;\n            renderer.listen = function (renderElement, name, callback) {\n                if (name === 'click' && renderElement.setAttribute) {\n                    renderElement.setAttribute('tappable', '');\n                }\n                return renderer.orgListen(renderElement, name, callback);\n            };\n        }\n    }\n    /**\n     * @hidden\n     */\n    registerInput(type) {\n        this._inputs.push(type);\n        return this.id + '-' + (++this._ids);\n    }\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        if (this._viewLabel && this._inputs.length) {\n            let labelText = this.getLabelText().trim();\n            this._viewLabel = (labelText.length > 0);\n        }\n        if (this._inputs.length > 1) {\n            this.setElementClass('item-multiple-inputs', true);\n        }\n    }\n    /**\n     * @hidden\n     */\n    _updateColor(newColor, componentName) {\n        componentName = componentName || 'item'; // item-radio\n        this._setColor(newColor, componentName);\n    }\n    /**\n     * @hidden\n     */\n    _setName(elementRef) {\n        let nodeName = elementRef.nativeElement.nodeName.replace('ION-', '');\n        if (nodeName === 'LIST-HEADER' || nodeName === 'ITEM-DIVIDER') {\n            this._name = nodeName;\n        }\n    }\n    /**\n     * @hidden\n     */\n    getLabelText() {\n        return this._label ? this._label.text : '';\n    }\n    /**\n     * @hidden\n     */\n    set contentLabel(label) {\n        if (label) {\n            this._label = label;\n            label.id = this.labelId;\n            if (label.type) {\n                this.setElementClass('item-label-' + label.type, true);\n            }\n            this._viewLabel = false;\n        }\n    }\n    /**\n     * @hidden\n     */\n    set viewLabel(label) {\n        if (!this._label) {\n            this._label = label;\n        }\n    }\n    /**\n     * @hidden\n     */\n    set _buttons(buttons) {\n        buttons.forEach(button => {\n            if (!button._size) {\n                button.setElementClass('item-button', true);\n            }\n        });\n    }\n    /**\n     * @hidden\n     */\n    set _icons(icons) {\n        icons.forEach(icon => {\n            icon.setElementClass('item-icon', true);\n        });\n    }\n}\nItem.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-list-header,ion-item,[ion-item],ion-item-divider',\n                template: '<ng-content select=\"[item-start],[item-left],ion-checkbox:not([item-end]):not([item-right])\"></ng-content>' +\n                    '<div class=\"item-inner\">' +\n                    '<div class=\"input-wrapper\">' +\n                    '<ng-content select=\"ion-label\"></ng-content>' +\n                    '<ion-label *ngIf=\"_viewLabel\">' +\n                    '<ng-content></ng-content>' +\n                    '</ion-label>' +\n                    '<ng-content select=\"ion-select,ion-input,ion-textarea,ion-datetime,ion-range,[item-content]\"></ng-content>' +\n                    '</div>' +\n                    '<ng-content select=\"[item-end],[item-right],ion-radio,ion-toggle\"></ng-content>' +\n                    '<ion-reorder *ngIf=\"_hasReorder\"></ion-reorder>' +\n                    '</div>' +\n                    '<div class=\"button-effect\"></div>',\n                host: {\n                    'class': 'item'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nItem.ctorParameters = () => [\n    { type: Form, },\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: ItemReorder, decorators: [{ type: Optional },] },\n];\nItem.propDecorators = {\n    'contentLabel': [{ type: ContentChild, args: [Label,] },],\n    'viewLabel': [{ type: ViewChild, args: [Label,] },],\n    '_buttons': [{ type: ContentChildren, args: [Button,] },],\n    '_icons': [{ type: ContentChildren, args: [Icon,] },],\n};\n"]}