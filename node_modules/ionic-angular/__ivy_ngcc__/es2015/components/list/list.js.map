{"version":3,"file":"list.js","sources":["list.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;6KAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;oBAAE;AACF","sourcesContent":["import { Directive, ElementRef, Input, Renderer } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { DomController } from '../../platform/dom-controller';\nimport { GestureController } from '../../gestures/gesture-controller';\nimport { Ion } from '../ion';\nimport { isTrueProperty } from '../../util/util';\nimport { ItemSlidingGesture } from '../item/item-sliding-gesture';\nimport { Platform } from '../../platform/platform';\n/**\n * The List is a widely used interface element in almost any mobile app,\n * and can include content ranging from basic text all the way to\n * buttons, toggles, icons, and thumbnails.\n *\n * Both the list, which contains items, and the list items themselves\n * can be any HTML element.\n *\n * Using the List and Item components make it easy to support various\n * interaction modes such as swipe to edit, drag to reorder, and\n * removing items.\n *\n * @demo /docs/demos/src/list/\n * @see {@link /docs/components#lists List Component Docs}\n * @advanced\n *\n * Enable the sliding items.\n *\n * ```ts\n * import { Component, ViewChild } from '@angular/core';\n * import { List } from 'ionic-angular';\n *\n * @Component({...})\n * export class MyClass {\n *   @ViewChild(List) list: List;\n *\n *   constructor() { }\n *\n *   stopSliding() {\n *     this.list.enableSlidingItems(false);\n *   }\n * }\n * ```\n *\n */\nexport class List extends Ion {\n    constructor(config, elementRef, renderer, _plt, _gestureCtrl, _domCtrl) {\n        super(config, elementRef, renderer, 'list');\n        this._plt = _plt;\n        this._gestureCtrl = _gestureCtrl;\n        this._domCtrl = _domCtrl;\n        this._enableSliding = true;\n        this._containsSlidingItems = false;\n    }\n    /**\n     * @input {boolean} If true, the sliding items will be enabled.\n     */\n    get sliding() {\n        return this._enableSliding;\n    }\n    set sliding(val) {\n        this._enableSliding = isTrueProperty(val);\n        this._updateSlidingState();\n    }\n    /**\n     * @hidden\n     */\n    containsSlidingItem(contains) {\n        this._containsSlidingItems = contains;\n        this._updateSlidingState();\n    }\n    _updateSlidingState() {\n        let shouldSlide = this._enableSliding && this._containsSlidingItems;\n        if (!shouldSlide) {\n            this._slidingGesture && this._slidingGesture.destroy();\n            this._slidingGesture = null;\n        }\n        else if (!this._slidingGesture) {\n            (void 0) /* console.debug */;\n            this._slidingGesture = new ItemSlidingGesture(this._plt, this, this._gestureCtrl, this._domCtrl);\n            this._slidingGesture.listen();\n        }\n    }\n    /**\n     * Close any sliding items that are open.\n     */\n    closeSlidingItems() {\n        this._slidingGesture && this._slidingGesture.closeOpened();\n    }\n    /**\n     * @hidden\n     */\n    destroy() {\n        this._slidingGesture && this._slidingGesture.destroy();\n    }\n}\nList.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-list',\n            },] },\n];\n/** @nocollapse */\nList.ctorParameters = () => [\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: Platform, },\n    { type: GestureController, },\n    { type: DomController, },\n];\nList.propDecorators = {\n    'sliding': [{ type: Input },],\n};\n"]}