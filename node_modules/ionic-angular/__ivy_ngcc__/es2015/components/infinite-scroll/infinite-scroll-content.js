import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Config } from '../../config/config';
import { InfiniteScroll } from './infinite-scroll';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './infinite-scroll';
import * as ɵngcc2 from '../../config/config';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../spinner/spinner';

function InfiniteScrollContent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "ion-spinner", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", ctx_r0.loadingSpinner);
} }
function InfiniteScrollContent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 5);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1.loadingText, ɵngcc0.ɵɵsanitizeHtml);
} }
export class InfiniteScrollContent {
    constructor(inf, _config) {
        this.inf = inf;
        this._config = _config;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (!this.loadingSpinner) {
            this.loadingSpinner = this._config.get('infiniteLoadingSpinner', this._config.get('spinner', 'ios'));
        }
    }
}
InfiniteScrollContent.ɵfac = function InfiniteScrollContent_Factory(t) { return new (t || InfiniteScrollContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InfiniteScroll), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Config)); };
InfiniteScrollContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: InfiniteScrollContent, selectors: [["ion-infinite-scroll-content"]], hostVars: 1, hostBindings: function InfiniteScrollContent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("state", ctx.inf.state);
    } }, inputs: { loadingSpinner: "loadingSpinner", loadingText: "loadingText" }, decls: 3, vars: 2, consts: [[1, "infinite-loading"], ["class", "infinite-loading-spinner", 4, "ngIf"], ["class", "infinite-loading-text", 3, "innerHTML", 4, "ngIf"], [1, "infinite-loading-spinner"], [3, "name"], [1, "infinite-loading-text", 3, "innerHTML"]], template: function InfiniteScrollContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, InfiniteScrollContent_div_1_Template, 2, 1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, InfiniteScrollContent_div_2_Template, 1, 1, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loadingSpinner);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loadingText);
    } }, dependencies: [ɵngcc3.NgIf, ɵngcc4.Spinner], encapsulation: 2 });
/** @nocollapse */
InfiniteScrollContent.ctorParameters = () => [
    { type: InfiniteScroll, },
    { type: Config, },
];
InfiniteScrollContent.propDecorators = {
    'loadingSpinner': [{ type: Input },],
    'loadingText': [{ type: Input },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InfiniteScrollContent, [{
        type: Component,
        args: [{
                selector: 'ion-infinite-scroll-content',
                template: '<div class="infinite-loading">' +
                    '<div class="infinite-loading-spinner" *ngIf="loadingSpinner">' +
                    '<ion-spinner [name]="loadingSpinner"></ion-spinner>' +
                    '</div>' +
                    '<div class="infinite-loading-text" [innerHTML]="loadingText" *ngIf="loadingText"></div>' +
                    '</div>',
                host: {
                    '[attr.state]': 'inf.state'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.InfiniteScroll }, { type: ɵngcc2.Config }]; }, { loadingSpinner: [{
            type: Input
        }], loadingText: [{
            type: Input
        }] }); })();

//# sourceMappingURL=infinite-scroll-content.js.map