{"version":3,"file":"refresher.js","sources":["refresher.js"],"names":[],"mappingsoBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Directive, EventEmitter, Host, Input, NgZone, Output } from '@angular/core';\nimport { Content } from '../content/content';\nimport { GESTURE_PRIORITY_REFRESHER, GESTURE_REFRESHER, GestureController } from '../../gestures/gesture-controller';\nimport { isTrueProperty } from '../../util/util';\nimport { Platform } from '../../platform/platform';\nimport { pointerCoord } from '../../util/dom';\nimport { UIEventManager } from '../../gestures/ui-event-manager';\n/**\n * @name Refresher\n * @description\n * The Refresher provides pull-to-refresh functionality on a content component.\n * Place the `ion-refresher` as the first child of your `ion-content` element.\n *\n * Pages can then listen to the refresher's various output events. The\n * `refresh` output event is fired when the user has pulled down far\n * enough to kick off the refreshing process. Once the async operation\n * has completed and the refreshing should end, call `complete()`.\n *\n * Note: Do not wrap the `ion-refresher` in a `*ngIf`. It will not render\n * properly this way. Please use the `enabled` property instead to\n * display or hide the refresher.\n *\n * @usage\n * ```html\n * <ion-content>\n *\n *   <ion-refresher (ionRefresh)=\"doRefresh($event)\">\n *     <ion-refresher-content></ion-refresher-content>\n *   </ion-refresher>\n *\n * </ion-content>\n * ```\n *\n * ```ts\n * @Component({...})\n * export class NewsFeedPage {\n *\n *   doRefresh(refresher) {\n *     console.log('Begin async operation', refresher);\n *\n *     setTimeout(() => {\n *       console.log('Async operation has ended');\n *       refresher.complete();\n *     }, 2000);\n *   }\n *\n * }\n * ```\n *\n *\n * ## Refresher Content\n *\n * By default, Ionic provides the pulling icon and refreshing spinner that\n * looks best for the platform the user is on. However, you can change the\n * default icon and spinner, along with adding text for each state by\n * adding properties to the child `ion-refresher-content` component.\n *\n *  ```html\n *  <ion-content>\n *\n *    <ion-refresher (ionRefresh)=\"doRefresh($event)\">\n *      <ion-refresher-content\n *        pullingIcon=\"arrow-dropdown\"\n *        pullingText=\"Pull to refresh\"\n *        refreshingSpinner=\"circles\"\n *        refreshingText=\"Refreshing...\">\n *      </ion-refresher-content>\n *    </ion-refresher>\n *\n *  </ion-content>\n *  ```\n *\n *\n * ## Further Customizing Refresher Content\n *\n * The `ion-refresher` component holds the refresh logic.\n * It requires a child component in order to display the content.\n * Ionic uses `ion-refresher-content` by default. This component\n * displays the refresher and changes the look depending\n * on the refresher's state. Separating these components\n * allows developers to create their own refresher content\n * components. You could replace our default content with\n * custom SVG or CSS animations.\n *\n * @demo /docs/demos/src/refresher/\n *\n */\nexport class Refresher {\n    constructor(_plt, _content, _zone, gestureCtrl) {\n        this._plt = _plt;\n        this._content = _content;\n        this._zone = _zone;\n        this._appliedStyles = false;\n        this._lastCheck = 0;\n        this._isEnabled = true;\n        this._top = '';\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the process of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = STATE_INACTIVE;\n        /**\n         * The Y coordinate of where the user started to the pull down the content.\n         */\n        this.startY = null;\n        /**\n         * The current touch or mouse event's Y coordinate.\n         */\n        this.currentY = null;\n        /**\n         * The distance between the start of the pull and the current touch or\n         * mouse event's Y coordinate.\n         */\n        this.deltaY = null;\n        /**\n         * A number representing how far down the user has pulled.\n         * The number `0` represents the user hasn't pulled down at all. The\n         * number `1`, and anything greater than `1`, represents that the user\n         * has pulled far enough down that when they let go then the refresh will\n         * happen. If they let go and the number is less than `1`, then the\n         * refresh will not happen, and the content will return to it's original\n         * position.\n         */\n        this.progress = 0;\n        /**\n         * @input {number} The min distance the user must pull down until the\n         * refresher can go into the `refreshing` state. Default is `60`.\n         */\n        this.pullMin = 60;\n        /**\n         * @input {number} The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state. By default, the pull\n         * maximum will be the result of `pullMin + 60`.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * @input {number} How many milliseconds it takes to close the refresher. Default is `280`.\n         */\n        this.closeDuration = 280;\n        /**\n         * @input {number} How many milliseconds it takes the refresher to to snap back to the `refreshing` state. Default is `280`.\n         */\n        this.snapbackDuration = 280;\n        /**\n         * @output {event} Emitted when the user lets go and has pulled down\n         * far enough, which would be farther than the `pullMin`, then your refresh hander if\n         * fired and the state is updated to `refreshing`. From within your refresh handler,\n         * you must call the `complete()` method when your async operation has completed.\n         */\n        this.ionRefresh = new EventEmitter();\n        /**\n         * @output {event} Emitted while the user is pulling down the content and exposing the refresher.\n         */\n        this.ionPull = new EventEmitter();\n        /**\n         * @output {event} Emitted when the user begins to start pulling down.\n         */\n        this.ionStart = new EventEmitter();\n        this._events = new UIEventManager(_plt);\n        _content._hasRefresher = true;\n        this._gesture = gestureCtrl.createGesture({\n            name: GESTURE_REFRESHER,\n            priority: GESTURE_PRIORITY_REFRESHER\n        });\n    }\n    /**\n     * @input {boolean} If the refresher is enabled or not. This should be used in place of an `ngIf`. Default is `true`.\n     */\n    get enabled() {\n        return this._isEnabled;\n    }\n    set enabled(val) {\n        this._isEnabled = isTrueProperty(val);\n        this._setListeners(this._isEnabled);\n    }\n    _onStart(ev) {\n        // if multitouch then get out immediately\n        if (ev.touches && ev.touches.length > 1) {\n            return false;\n        }\n        if (this.state !== STATE_INACTIVE) {\n            return false;\n        }\n        let scrollHostScrollTop = this._content.getContentDimensions().scrollTop;\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (scrollHostScrollTop > 0) {\n            return false;\n        }\n        if (!this._gesture.canStart()) {\n            return false;\n        }\n        let coord = pointerCoord(ev);\n        (void 0) /* console.debug */;\n        if (this._content.contentTop > 0) {\n            let newTop = this._content.contentTop + 'px';\n            if (this._top !== newTop) {\n                this._top = newTop;\n            }\n        }\n        this.startY = this.currentY = coord.y;\n        this.progress = 0;\n        this.state = STATE_INACTIVE;\n        return true;\n    }\n    _onMove(ev) {\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multitouch then get out immediately\n        if (ev.touches && ev.touches.length > 1) {\n            return 1;\n        }\n        if (!this._gesture.canStart()) {\n            return 0;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the process of closing\n        // or this was never a startY\n        if (this.startY === null || this.state === STATE_REFRESHING || this.state === STATE_CANCELLING || this.state === STATE_COMPLETING) {\n            return 2;\n        }\n        // if we just updated stuff less than 16ms ago\n        // then don't check again, just chillout plz\n        let now = Date.now();\n        if (this._lastCheck + 16 > now) {\n            return 3;\n        }\n        // remember the last time we checked all this\n        this._lastCheck = now;\n        // get the current pointer coordinates\n        let coord = pointerCoord(ev);\n        this.currentY = coord.y;\n        // it's now possible they could be pulling down the content\n        // how far have they pulled so far?\n        this.deltaY = (coord.y - this.startY);\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (this.deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            if (this.state !== STATE_INACTIVE) {\n                this._zone.run(() => {\n                    this.state = STATE_INACTIVE;\n                });\n            }\n            if (this._appliedStyles) {\n                // reset the styles only if they were applied\n                this._setCss(0, '', false, '');\n                return 5;\n            }\n            return 6;\n        }\n        if (this.state === STATE_INACTIVE) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            let scrollHostScrollTop = this._content.getContentDimensions().scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                this.startY = null;\n                return 7;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = STATE_PULLING;\n        }\n        // prevent native scroll events\n        ev.preventDefault();\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this._setCss(this.deltaY, '0ms', true, '');\n        if (!this.deltaY) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return 8;\n        }\n        // so far so good, let's run this all back within zone now\n        this._zone.run(() => {\n            this._onMoveInZone();\n        });\n    }\n    _onMoveInZone() {\n        // set pull progress\n        this.progress = (this.deltaY / this.pullMin);\n        // emit \"start\" if it hasn't started yet\n        if (!this._didStart) {\n            this._didStart = true;\n            this.ionStart.emit(this);\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit(this);\n        // do nothing if the delta is less than the pull threshold\n        if (this.deltaY < this.pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = STATE_PULLING;\n            return 2;\n        }\n        if (this.deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this._beginRefresh();\n            return 3;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = STATE_READY;\n        return 4;\n    }\n    _onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === STATE_READY) {\n            this._zone.run(() => {\n                // they pulled down far enough, so it's ready to refresh\n                this._beginRefresh();\n            });\n        }\n        else if (this.state === STATE_PULLING) {\n            this._zone.run(() => {\n                // they were pulling down, but didn't pull down far enough\n                // set the content back to it's original location\n                // and close the refresher\n                // set that the refresh is actively cancelling\n                this.cancel();\n            });\n        }\n        // reset on any touchend/mouseup\n        this.startY = null;\n    }\n    _beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = STATE_REFRESHING;\n        // place the content in a hangout position while it thinks\n        this._setCss(this.pullMin, (this.snapbackDuration + 'ms'), true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit(this);\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    complete() {\n        this._close(STATE_COMPLETING, '120ms');\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    cancel() {\n        this._close(STATE_CANCELLING, '');\n    }\n    _close(state, delay) {\n        var timer;\n        function close(ev) {\n            // closing is done, return to inactive state\n            if (ev) {\n                clearTimeout(timer);\n            }\n            this.state = STATE_INACTIVE;\n            this.progress = 0;\n            this._didStart = this.startY = this.currentY = this.deltaY = null;\n            this._setCss(0, '0ms', false, '');\n        }\n        // create fallback timer incase something goes wrong with transitionEnd event\n        timer = setTimeout(close.bind(this), 600);\n        // create transition end event on the content's scroll element\n        this._content.onScrollElementTransitionEnd(close.bind(this));\n        // reset set the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this._setCss(0, '', true, delay);\n        if (this._pointerEvents) {\n            this._pointerEvents.stop();\n        }\n    }\n    _setCss(y, duration, overflowVisible, delay) {\n        this._appliedStyles = (y > 0);\n        const content = this._content;\n        const Css = this._plt.Css;\n        content.setScrollElementStyle(Css.transform, ((y > 0) ? 'translateY(' + y + 'px) translateZ(0px)' : 'translateZ(0px)'));\n        content.setScrollElementStyle(Css.transitionDuration, duration);\n        content.setScrollElementStyle(Css.transitionDelay, delay);\n        content.setScrollElementStyle('overflow', (overflowVisible ? 'hidden' : ''));\n    }\n    _setListeners(shouldListen) {\n        this._events.unlistenAll();\n        this._pointerEvents = null;\n        if (shouldListen) {\n            this._pointerEvents = this._events.pointerEvents({\n                element: this._content.getScrollElement(),\n                pointerDown: this._onStart.bind(this),\n                pointerMove: this._onMove.bind(this),\n                pointerUp: this._onEnd.bind(this),\n                zone: false\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        // bind event listeners\n        // save the unregister listener functions to use onDestroy\n        this._setListeners(this._isEnabled);\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._setListeners(false);\n        this._events.destroy();\n        this._gesture.destroy();\n    }\n}\nRefresher.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-refresher',\n                host: {\n                    '[class.refresher-active]': 'state !== \"inactive\"',\n                    '[style.top]': '_top'\n                }\n            },] },\n];\n/** @nocollapse */\nRefresher.ctorParameters = () => [\n    { type: Platform, },\n    { type: Content, decorators: [{ type: Host },] },\n    { type: NgZone, },\n    { type: GestureController, },\n];\nRefresher.propDecorators = {\n    'pullMin': [{ type: Input },],\n    'pullMax': [{ type: Input },],\n    'closeDuration': [{ type: Input },],\n    'snapbackDuration': [{ type: Input },],\n    'enabled': [{ type: Input },],\n    'ionRefresh': [{ type: Output },],\n    'ionPull': [{ type: Output },],\n    'ionStart': [{ type: Output },],\n};\nconst STATE_INACTIVE = 'inactive';\nconst STATE_PULLING = 'pulling';\nconst STATE_READY = 'ready';\nconst STATE_REFRESHING = 'refreshing';\nconst STATE_CANCELLING = 'cancelling';\nconst STATE_COMPLETING = 'completing';\n"]}