import { Directive, ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
/**
  * @name Note
  * @module ionic
  * @description
  * A note is detailed item in an ion-item. It creates greyed out element that can be on the left or right side of an item.
  * @usage
  *
  * ```html
  * <ion-content>
  *   <ion-list>
  *     <ion-item>
  *       <ion-note item-start>
  *         Left Note
  *       </ion-note>
  *       My Item
  *       <ion-note item-end>
  *         Right Note
  *       </ion-note>
  *     </ion-item>
  *   </ion-list>
  * </ion-content>
  *```
 * {@link /docs/api/components/api/components/item/item ion-item}
  */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../config/config';
export class Note extends Ion {
    constructor(config, elementRef, renderer) {
        super(config, elementRef, renderer, 'note');
    }
}
Note.ɵfac = function Note_Factory(t) { return new (t || Note)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
Note.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: Note, selectors: [["ion-note"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
Note.ctorParameters = () => [
    { type: Config, },
    { type: ElementRef, },
    { type: Renderer, },
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Note, [{
        type: Directive,
        args: [{
                selector: 'ion-note'
            }]
    }], function () { return [{ type: ɵngcc1.Config }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, null); })();

//# sourceMappingURL=note.js.map