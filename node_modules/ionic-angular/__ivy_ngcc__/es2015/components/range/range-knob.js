import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_UP } from '../../platform/key';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["class", "range-knob-handle"];
function RangeKnob_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.val);
} }
export class RangeKnob {
    constructor() {
        this.ionIncrease = new EventEmitter();
        this.ionDecrease = new EventEmitter();
    }
    set ratio(r) {
        this._x = `${r * 100}%`;
    }
    _keyup(ev) {
        const keyCode = ev.keyCode;
        if (keyCode === KEY_LEFT || keyCode === KEY_DOWN) {
            (void 0) /* console.debug */;
            this.ionDecrease.emit();
            ev.preventDefault();
            ev.stopPropagation();
        }
        else if (keyCode === KEY_RIGHT || keyCode === KEY_UP) {
            (void 0) /* console.debug */;
            this.ionIncrease.emit();
            ev.preventDefault();
            ev.stopPropagation();
        }
    }
}
RangeKnob.ɵfac = function RangeKnob_Factory(t) { return new (t || RangeKnob)(); };
RangeKnob.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RangeKnob, selectors: [["", 8, "range-knob-handle"]], hostAttrs: ["role", "slider"], hostVars: 14, hostBindings: function RangeKnob_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function RangeKnob_keydown_HostBindingHandler($event) { return ctx._keyup($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("tabindex", ctx.disabled ? -1 : 0);
        ɵngcc0.ɵɵattribute("aria-valuenow", ctx.val)("aria-valuemin", ctx.min)("aria-valuemax", ctx.max)("aria-disabled", ctx.disabled)("aria-labelledby", ctx.labelId);
        ɵngcc0.ɵɵstyleProp("left", ctx._x);
        ɵngcc0.ɵɵclassProp("range-knob-pressed", ctx.pressed)("range-knob-min", ctx.val === ctx.min || ctx.val === undefined)("range-knob-max", ctx.val === ctx.max);
    } }, inputs: { ratio: "ratio", pressed: "pressed", pin: "pin", min: "min", max: "max", val: "val", disabled: "disabled", labelId: "labelId" }, outputs: { ionIncrease: "ionIncrease", ionDecrease: "ionDecrease" }, attrs: _c0, decls: 2, vars: 1, consts: [["class", "range-pin", "role", "presentation", 4, "ngIf"], ["role", "presentation", 1, "range-knob"], ["role", "presentation", 1, "range-pin"]], template: function RangeKnob_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, RangeKnob_div_0_Template, 2, 1, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.pin);
    } }, dependencies: [ɵngcc1.NgIf], encapsulation: 2 });
/** @nocollapse */
RangeKnob.ctorParameters = () => [];
RangeKnob.propDecorators = {
    'ratio': [{ type: Input },],
    'pressed': [{ type: Input },],
    'pin': [{ type: Input },],
    'min': [{ type: Input },],
    'max': [{ type: Input },],
    'val': [{ type: Input },],
    'disabled': [{ type: Input },],
    'labelId': [{ type: Input },],
    'ionIncrease': [{ type: Output },],
    'ionDecrease': [{ type: Output },],
    '_keyup': [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RangeKnob, [{
        type: Component,
        args: [{
                selector: '.range-knob-handle',
                template: '<div class="range-pin" *ngIf="pin" role="presentation">{{val}}</div>' +
                    '<div class="range-knob" role="presentation"></div>',
                host: {
                    '[class.range-knob-pressed]': 'pressed',
                    '[class.range-knob-min]': 'val===min||val===undefined',
                    '[class.range-knob-max]': 'val===max',
                    '[style.left]': '_x',
                    '[attr.aria-valuenow]': 'val',
                    '[attr.aria-valuemin]': 'min',
                    '[attr.aria-valuemax]': 'max',
                    '[attr.aria-disabled]': 'disabled',
                    '[attr.aria-labelledby]': 'labelId',
                    '[tabindex]': 'disabled?-1:0',
                    'role': 'slider'
                }
            }]
    }], function () { return []; }, { ionIncrease: [{
            type: Output
        }], ionDecrease: [{
            type: Output
        }], ratio: [{
            type: Input
        }], _keyup: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], pressed: [{
            type: Input
        }], pin: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], val: [{
            type: Input
        }], disabled: [{
            type: Input
        }], labelId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=range-knob.js.map