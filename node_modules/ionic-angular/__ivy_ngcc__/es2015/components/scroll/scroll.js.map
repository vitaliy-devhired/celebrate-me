{"version":3,"file":"scroll.js","sources":["scroll.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;iDAgBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { isTrueProperty } from '../../util/util';\n/**\n * @name Scroll\n * @description\n * Scroll is a non-flexboxed scroll area that can scroll horizontally or vertically. `ion-Scroll` Can be used in places where you may not need a full page scroller, but a highly customized one, such as image scubber or comment scroller.\n * @usage\n * ```html\n * <ion-scroll scrollX=\"true\">\n * </ion-scroll>\n *\n * <ion-scroll scrollY=\"true\">\n * </ion-scroll>\n *\n * <ion-scroll scrollX=\"true\" scrollY=\"true\">\n * </ion-scroll>\n * ```\n * @demo /docs/demos/src/scroll/\n */\nexport class Scroll {\n    constructor() {\n        this._scrollX = false;\n        this._scrollY = false;\n        this._zoom = false;\n        this._maxZoom = 1;\n        /**\n         * @hidden\n         */\n        this.maxScale = 3;\n        /**\n         * @hidden\n         */\n        this.zoomDuration = 250;\n    }\n    /**\n     * @input {boolean} If true, scrolling along the X axis is enabled.\n     */\n    get scrollX() {\n        return this._scrollX;\n    }\n    set scrollX(val) {\n        this._scrollX = isTrueProperty(val);\n    }\n    /**\n     * @input {boolean} If true, scrolling along the Y axis is enabled; requires the following CSS declaration: ion-scroll { white-space: nowrap; }\n     */\n    get scrollY() {\n        return this._scrollY;\n    }\n    set scrollY(val) {\n        this._scrollY = isTrueProperty(val);\n    }\n    /**\n     * @input {boolean} If true, zooming is enabled.\n     */\n    get zoom() {\n        return this._zoom;\n    }\n    set zoom(val) {\n        this._zoom = isTrueProperty(val);\n    }\n    /**\n     * @input {number} Set the max zoom amount.\n     */\n    get maxZoom() {\n        return this._maxZoom;\n    }\n    set maxZoom(val) {\n        this._maxZoom = val;\n    }\n    /**\n     * @hidden\n     * Add a scroll event handler to the scroll element if it exists.\n     * @param {Function} handler  The scroll handler to add to the scroll element.\n     * @returns {?Function} a function to remove the specified handler, otherwise\n     * undefined if the scroll element doesn't exist.\n     */\n    addScrollEventListener(handler) {\n        (void 0) /* assert */;\n        const ele = this._scrollContent.nativeElement;\n        ele.addEventListener('scroll', handler);\n        return () => {\n            ele.removeEventListener('scroll', handler);\n        };\n    }\n}\nScroll.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-scroll',\n                template: '<div class=\"scroll-content\" #scrollContent>' +\n                    '<div class=\"scroll-zoom-wrapper\">' +\n                    '<ng-content></ng-content>' +\n                    '</div>' +\n                    '</div>',\n                host: {\n                    '[class.scroll-x]': 'scrollX',\n                    '[class.scroll-y]': 'scrollY'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nScroll.ctorParameters = () => [];\nScroll.propDecorators = {\n    'scrollX': [{ type: Input },],\n    'scrollY': [{ type: Input },],\n    'zoom': [{ type: Input },],\n    'maxZoom': [{ type: Input },],\n    '_scrollContent': [{ type: ViewChild, args: ['scrollContent', { read: ElementRef },] },],\n};\n"]}