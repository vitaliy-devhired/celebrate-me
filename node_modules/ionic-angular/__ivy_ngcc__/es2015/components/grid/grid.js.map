{"version":3,"file":"grid.js","sources":["grid.js"],"names":[],"mappingssourcesContent":["import { Directive } from '@angular/core';\n/**\n  * @name Grid\n  * @module ionic\n  * @description\n  *\n  * The grid is a powerful mobile-first flexbox system for building custom layouts.\n  * It is heavily influenced by [Bootstrap's grid system](http://v4-alpha.getbootstrap.com/layout/grid/).\n  *\n  * The grid is composed of three units — a grid, row(s) and column(s). Columns will expand to fill their\n  * row, and will resize to fit additional columns. It is based on a 12 column layout with different\n  * breakpoints based on the screen size. The number of columns and breakpoints can be fully customized\n  * using Sass.\n  *\n  * - [How it works](#how-it-works)\n  * - [Grid size](#grid-size)\n  * - [Grid attributes](#grid-attributes)\n  * - [Default breakpoints](#default-breakpoints)\n  * - [Auto-layout columns](#auto-layout-columns)\n  *   - [Equal-width](#equal-width)\n  *   - [Setting one column width](#setting-one-column-width)\n  *   - [Variable-width](#variable-width)\n  * - [Responsive attributes](#responsive-attributes)\n  *   - [All breakpoints](#all-breakpoints)\n  *   - [Stacked to horizontal](#stacked-to-horizontal)\n  * - [Reordering](#reordering)\n  *   - [Offsetting columns](#offsetting-columns)\n  *   - [Push and pull](#push-and-pull)\n  * - [Alignment](#alignment)\n  *   - [Vertical Alignment](#vertical-alignment)\n  *   - [Horizontal Alignment](#horizontal-alignment)\n  * - [Customizing the grid](#customizing-the-grid)\n  *   - [Number of columns and padding](#number-of-columns-and-padding)\n  *   - [Grid tiers](#grid-tiers)\n  *\n  *\n  * ## How it works\n  *\n  * The grid is a mobile-first system made up of any number of rows and columns.\n  * It is built with flexbox making it extremely responsive. The components that\n  * make up the grid can be written as an element (e.g., `<ion-grid>`) or added as\n  * an attribute to any element (e.g., `<div ion-row>`).\n  *\n  * Here's how it works:\n  *\n  * - Grids act as a container for all rows and columns. Grids take up the full width of their container,\n  * but adding the `fixed` attribute will specify the width per screen size, see [grid size](#grid-size) below.\n  * - Rows are horizontal groups of columns that line the columns up properly.\n  * - Content should be placed within columns, and only columns may be immediate children of rows.\n  * - Grid columns without a specified width will automatically have equal widths.\n  * For example, four instances of `col-sm` will each automatically be 25% wide for small breakpoints.\n  * - Column attributes indicate the number of columns to use out of the default 12 per row.\n  * So, `col-4` can be added in order to have three equal-width columns.\n  * - Column widths are set as a percentage, so they’re always fluid and sized relative to their parent element.\n  * - Columns have padding between individual columns, however, the padding can be removed from the grid and\n  * columns by adding `no-padding` on the grid.\n  * - There are five grid tiers by default, one for each responsive breakpoint: all breakpoints (extra small),\n  * small, medium, large, and extra large.\n  * - Grid tiers are based on minimum widths, meaning they apply to their tier and all those larger than it\n  * (e.g., `col-sm-4` applies to small, medium, large, and extra large devices).\n  * - Grids can easily be customized via Sass variables. See [customizing the grid](#customizing-the-grid).\n  *\n  * There are some [known bugs with flexbox](https://github.com/philipwalton/flexbugs) that\n  * should be checked prior to creating issues with Ionic.\n  *\n  * ## Grid size\n  *\n  * By default, the grid will take up 100% width. To set a maximum width based on the screen\n  * size add the `fixed` attribute. The maximum width of the grid for each breakpoint is defined\n  * in the `$grid-max-widths` Sass variable. For more information, see\n  * [customizing the grid](#customizing-the-grid).\n  *\n  * | Name     | Value    | Description                                         |\n  * |----------|----------|-----------------------------------------------------|\n  * | xs       | auto     | Don't set the grid width for xs screens             |\n  * | sm       | 540px    | Set grid width to 540px when (min-width: 576px)     |\n  * | md       | 720px    | Set grid width to 720px when (min-width: 768px)     |\n  * | lg       | 960px    | Set grid width to 960px when (min-width: 992px)     |\n  * | xl       | 1140px   | Set grid width to 1140px when (min-width: 1200px)   |\n  *\n  *\n  * ## Grid attributes\n  *\n  * The grid takes up full width and has padding added to it based on the screen size. There are two\n  * attributes that can be used to adjust this behavior.\n  *\n  * | Property        | Description                                                                                                       |\n  * |-----------------|-------------------------------------------------------------------------------------------------------------------|\n  * | no-padding      | Removes padding from the grid and immediate children columns.                                                     |\n  * | fixed           | Set a max width based on the screen size.                                                                         |\n  *\n  *\n  * ## Default breakpoints\n  *\n  * The default breakpoints are defined by the `$grid-breakpoints` Sass variable. It can be\n  * customized to use different values for the breakpoint, rename and add/remove breakpoints.\n  * For more information, see [customizing the grid](#customizing-the-grid).\n  *\n  * | Name     | Value    | Width Prefix | Offset Prefix | Push Prefix  | Pull Prefix | Description                                       |\n  * |----------|----------|--------------|---------------|--------------|-------------|---------------------------------------------------|\n  * | xs       | 0        | `col-`       | `offset-`     | `push-`      | `pull-`     | Set columns when (min-width: 0)                   |\n  * | sm       | 576px    | `col-sm-`    | `offset-sm-`  | `push-sm-`   | `pull-sm-`  | Set columns when (min-width: 576px)               |\n  * | md       | 768px    | `col-md-`    | `offset-md-`  | `push-md-`   | `pull-md-`  | Set columns when (min-width: 768px)               |\n  * | lg       | 992px    | `col-lg-`    | `offset-lg-`  | `push-lg-`   | `pull-lg-`  | Set columns when (min-width: 992px)               |\n  * | xl       | 1200px   | `col-xl-`    | `offset-xl-`  | `push-xl-`   | `pull-xl-`  | Set columns when (min-width: 1200px)              |\n  *\n  * _Note: the first breakpoint must have the value set to 0 and all breakpoint values must be in\n  * ascending order._\n  *\n  * ## Auto-layout columns\n  *\n  * ### Equal-width\n  *\n  * By default, columns will take up equal width inside of a row for all devices and screen sizes.\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  *   <ion-row>\n  *     <ion-col>\n  *       1 of 3\n  *     </ion-col>\n  *     <ion-col>\n  *       2 of 3\n  *     </ion-col>\n  *     <ion-col>\n  *       3 of 3\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * ### Setting one column width\n  *\n  * Set the width of one column and the others will automatically resize around it.\n  * This can be done using our predefined grid attributes. In the example below,\n  * the other columns will resize no matter the width of the center column.\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col>\n  *       1 of 3\n  *     </ion-col>\n  *     <ion-col col-8>\n  *       2 of 3 (wider)\n  *     </ion-col>\n  *     <ion-col>\n  *       3 of 3\n  *     </ion-col>\n  *   </ion-row>\n  *   <ion-row>\n  *     <ion-col>\n  *       1 of 3\n  *     </ion-col>\n  *     <ion-col col-6>\n  *       2 of 3 (wider)\n  *     </ion-col>\n  *     <ion-col>\n  *       3 of 3\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * ### Variable-width\n  *\n  * Using the `col-{breakpoint}-auto` attributes, the column can size itself based on the\n  * natural width of its content. This is extremely useful for setting a column width\n  * using pixels. The columns next to the variable-width column will resize to fill the row.\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col>\n  *       1 of 3\n  *     </ion-col>\n  *     <ion-col col-auto>\n  *       Variable width content\n  *     </ion-col>\n  *     <ion-col>\n  *       3 of 3\n  *     </ion-col>\n  *   </ion-row>\n  *   <ion-row>\n  *     <ion-col>\n  *       1 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       2 of 4\n  *     </ion-col>\n  *     <ion-col col-auto>\n  *       <ion-input placeholder=\"Variable width input\"></ion-input>\n  *     </ion-col>\n  *     <ion-col>\n  *       4 of 4\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  *\n  * ## Responsive attributes\n  *\n  * ### All breakpoints\n  *\n  * To customize a column's width for all devices and screens, add the `col-*`\n  * attribute. These attributes tell the column to take up `*` columns out\n  * of the available columns.\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col col-4>\n  *       1 of 4\n  *     </ion-col>\n  *     <ion-col col-2>\n  *       2 of 4\n  *     </ion-col>\n  *     <ion-col col-2>\n  *       3 of 4\n  *     </ion-col>\n  *     <ion-col col-4>\n  *       4 of 4\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * ###  Stacked to horizontal\n  *\n  * Use a combination of width and breakpoint attributes to create a grid that starts out stacked\n  * on extra small screens before becoming horizontal on small screens.\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col col-12 col-sm>\n  *       1 of 4\n  *     </ion-col>\n  *     <ion-col col-12 col-sm>\n  *       2 of 4\n  *     </ion-col>\n  *     <ion-col col-12 col-sm>\n  *       3 of 4\n  *     </ion-col>\n  *     <ion-col col-12 col-sm>\n  *       4 of 4\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  *\n  * ## Reordering\n  *\n  * ### Offsetting columns\n  *\n  * Move columns to the right by adding the `offset-*` attributes. These attributes\n  * increase the margin start of the column by `*` columns. For example, in the following\n  * grid the last column will be offset by 3 columns and take up 3 columns:\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col col-3>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col col-3 offset-3>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * Offsets can also be added based on screen breakpoints. Here's an example of a\n  * grid where the last column will be offset by 3 columns for `md` screens and up:\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col col-md-3>\n  *       1 of 3\n  *     </ion-col>\n  *     <ion-col col-md-3>\n  *       2 of 3\n  *     </ion-col>\n  *     <ion-col col-md-3 offset-md-3>\n  *       3 of 3\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * ### Push and pull\n  *\n  * Reorder the columns by adding the `push-*` and `pull-*` attributes. These attributes\n  * adjust the `left` and `right` of the columns by `*` columns making it easy to reorder\n  * columns. For example, in the following grid the column with the `1st col` description\n  * will actually be the last column and the `2nd col` will be the first column.\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col col-9 push-3>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col col-3 pull-9>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * Push and pull can also be added based on screen breakpoints. In the following example,\n  * the column with the `3rd` column description will actually be the first column for\n  * `md` screens and up:\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col col-md-6 push-md-3>\n  *       1 of 3\n  *     </ion-col>\n  *     <ion-col col-md-3 push-md-3>\n  *       2 of 3\n  *     </ion-col>\n  *     <ion-col col-md-3 pull-md-9>\n  *       3 of 3\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  *\n  * ## Alignment\n  *\n  * ### Vertical alignment\n  *\n  * All columns can be vertically aligned inside of a row by adding different\n  * attributes to the row. For a list of available attributes, see\n  * [row attributes](../Row#row-attributes).\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row align-items-start>\n  *     <ion-col>\n  *       1 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       2 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       3 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       4 of 4 <br>#<br>#<br>#\n  *     </ion-col>\n  *   </ion-row>\n  *\n  *   <ion-row align-items-center>\n  *     <ion-col>\n  *       1 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       2 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       3 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       4 of 4 <br>#<br>#<br>#\n  *     </ion-col>\n  *   </ion-row>\n  *\n  *   <ion-row align-items-end>\n  *     <ion-col>\n  *       1 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       2 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       3 of 4\n  *     </ion-col>\n  *     <ion-col>\n  *       4 of 4 <br>#<br>#<br>#\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * Columns can also align themselves differently than other columns by\n  * adding the alignment attribute directly to the column. For a list of available\n  * attributes, see [column attributes](../Col#column-attributes).\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row>\n  *     <ion-col align-self-start>\n  *       <div>\n  *         1 of 4\n  *       </div>\n  *     </ion-col>\n  *     <ion-col align-self-center>\n  *       <div>\n  *         2 of 4\n  *       </div>\n  *     </ion-col>\n  *     <ion-col align-self-end>\n  *       <div>\n  *         3 of 4\n  *       </div>\n  *     </ion-col>\n  *     <ion-col>\n  *       <div>\n  *         4 of 4 <br>#<br>#<br>#\n  *       </div>\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  * ### Horizontal alignment\n  *\n  * All columns can be horizontally aligned inside of a row by adding different\n  * attributes to the row. For a list of available attributes, see\n  * [row attributes](../Row#row-attributes).\n  *\n  * ```\n  * <ion-grid>\n  *   <ion-row justify-content-start>\n  *     <ion-col col-3>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col col-3>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  *\n  *   <ion-row justify-content-center>\n  *     <ion-col col-3>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col col-3>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  *\n  *   <ion-row justify-content-end>\n  *     <ion-col col-3>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col col-3>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  *\n  *   <ion-row justify-content-around>\n  *     <ion-col col-3>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col col-3>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  *\n  *   <ion-row justify-content-between>\n  *     <ion-col col-3>\n  *       1 of 2\n  *     </ion-col>\n  *     <ion-col col-3>\n  *       2 of 2\n  *     </ion-col>\n  *   </ion-row>\n  * </ion-grid>\n  * ```\n  *\n  *\n  * ## Customizing the grid\n  *\n  * Using our built-in grid Sass variables and maps, it’s possible to completely customize\n  * the predefined grid attributes. Change the number of breakpoints, the media query values,\n  * the number of columns, and more.\n  *\n  * ### Number of columns and padding\n  *\n  * The number of grid columns and their padding can be modified via Sass variables.\n  * `$grid-columns` is used to generate the widths (in percent) of each individual column.\n  * `$grid-padding-width` is used for the padding on the grid, while `$grid-padding-widths`\n  * allows breakpoint-specific widths that are divided evenly across `padding-left` and\n  * `padding-right` as well as `padding-top` and `padding-bottom` of the grid and columns.\n  *\n  * ```\n  * $grid-columns:               12 !default;\n  *\n  * $grid-padding-width:         10px !default;\n  *\n  * $grid-padding-widths: (\n  *   xs: $grid-padding-width,\n  *   sm: $grid-padding-width,\n  *   md: $grid-padding-width,\n  *   lg: $grid-padding-width,\n  *   xl: $grid-padding-width\n  * ) !default;\n  * ```\n  *\n  * ### Grid tiers\n  *\n  * To customize the breakpoints and their values, override the values of\n  * `$grid-breakpoints` and `$grid-max-widths`. For example, to only use\n  * 3 breakpoints, the following could be written:\n  *\n  * ```\n  * $grid-breakpoints: (\n  *   sm: 0,\n  *   md: 768px,\n  *   lg: 1024px\n  * );\n  *\n  * $grid-max-widths: (\n  *   sm: 420px,\n  *   md: 720px,\n  *   lg: 960px\n  * );\n  * ```\n  *\n */\nexport class Grid {\n}\nGrid.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-grid, [ion-grid]',\n                host: {\n                    'class': 'grid'\n                }\n            },] },\n];\n/** @nocollapse */\nGrid.ctorParameters = () => [];\n"]}