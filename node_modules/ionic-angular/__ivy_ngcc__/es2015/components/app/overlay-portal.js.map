{"version":3,"file":"overlay-portal.js","sources":["overlay-portal.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;+OAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { ComponentFactoryResolver, Directive, ElementRef, ErrorHandler, Inject, Input, NgZone, Optional, Renderer, ViewContainerRef, forwardRef } from '@angular/core';\nimport { App } from './app';\nimport { Config } from '../../config/config';\nimport { DeepLinker } from '../../navigation/deep-linker';\nimport { DomController } from '../../platform/dom-controller';\nimport { GestureController } from '../../gestures/gesture-controller';\nimport { NavControllerBase } from '../../navigation/nav-controller-base';\nimport { Platform } from '../../platform/platform';\nimport { TransitionController } from '../../transitions/transition-controller';\n/**\n * @hidden\n */\nexport class OverlayPortal extends NavControllerBase {\n    constructor(app, config, plt, elementRef, zone, renderer, cfr, gestureCtrl, transCtrl, linker, viewPort, domCtrl, errHandler) {\n        super(null, app, config, plt, elementRef, zone, renderer, cfr, gestureCtrl, transCtrl, linker, domCtrl, errHandler);\n        this._isPortal = true;\n        this._init = true;\n        this.setViewport(viewPort);\n        // on every page change make sure the portal has\n        // dismissed any views that should be auto dismissed on page change\n        app.viewDidLeave.subscribe((view) => {\n            if (!view.isOverlay) {\n                this.dismissPageChangeViews();\n            }\n        });\n    }\n    set _overlayPortal(val) {\n        this._zIndexOffset = (val || 0);\n    }\n    ngOnDestroy() {\n        this.destroy();\n    }\n    /*\n     * @private\n     */\n    getType() {\n        return 'portal';\n    }\n    /*\n     * @private\n     */\n    getSecondaryIdentifier() {\n        return null;\n    }\n}\nOverlayPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[overlay-portal]',\n            },] },\n];\n/** @nocollapse */\nOverlayPortal.ctorParameters = () => [\n    { type: App, decorators: [{ type: Inject, args: [forwardRef(() => App),] },] },\n    { type: Config, },\n    { type: Platform, },\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: Renderer, },\n    { type: ComponentFactoryResolver, },\n    { type: GestureController, },\n    { type: TransitionController, },\n    { type: DeepLinker, decorators: [{ type: Optional },] },\n    { type: ViewContainerRef, },\n    { type: DomController, },\n    { type: ErrorHandler, },\n];\nOverlayPortal.propDecorators = {\n    '_overlayPortal': [{ type: Input, args: ['overlay-portal',] },],\n};\n"]}