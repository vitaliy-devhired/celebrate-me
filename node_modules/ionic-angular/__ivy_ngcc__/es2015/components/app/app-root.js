import { Component, ComponentFactoryResolver, ElementRef, Inject, InjectionToken, Renderer, ViewChild, ViewContainerRef } from '@angular/core';
import { App } from './app';
import { Config } from '../../config/config';
import { Ion } from '../ion';
import { OverlayPortal } from './overlay-portal';
import { Platform } from '../../platform/platform';
import * as Constants from './app-constants';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../config/config';
import * as ɵngcc2 from '../../platform/platform';
import * as ɵngcc3 from './app';
import * as ɵngcc4 from './click-block';
import * as ɵngcc5 from './overlay-portal';

const _c0 = ["viewport"];
const _c1 = ["modalPortal"];
const _c2 = ["overlayPortal"];
const _c3 = ["loadingPortal"];
const _c4 = ["toastPortal"];
export const AppRootToken = new InjectionToken('USERROOT');
/**
 * @hidden
 */
export class IonicApp extends Ion {
    constructor(_userCmp, _cfr, elementRef, renderer, config, _plt, app) {
        super(config, elementRef, renderer, 'app-root');
        this._userCmp = _userCmp;
        this._cfr = _cfr;
        this._plt = _plt;
        // register with App that this is Ionic's appRoot component. tada!
        app._appRoot = this;
        this._stopScrollPlugin = window['IonicStopScroll'];
    }
    ngOnInit() {
        // load the user root component
        // into Ionic's root component
        const factory = this._cfr.resolveComponentFactory(this._userCmp);
        const componentRef = this._viewport.createComponent(factory);
        this._renderer.setElementClass(componentRef.location.nativeElement, 'app-root', true);
        componentRef.changeDetectorRef.detectChanges();
        // set the mode class name
        // ios/md/wp
        this.setElementClass(this._config.get('mode'), true);
        const versions = this._plt.versions();
        this._plt.platforms().forEach(platformName => {
            // platform-ios
            let platformClass = 'platform-' + platformName;
            this.setElementClass(platformClass, true);
            let platformVersion = versions[platformName];
            if (platformVersion) {
                // platform-ios9
                platformClass += platformVersion.major;
                this.setElementClass(platformClass, true);
                // platform-ios9_3
                this.setElementClass(platformClass + '_' + platformVersion.minor, true);
            }
        });
        // touch devices should not use :hover CSS pseudo
        // enable :hover CSS when the "hoverCSS" setting is not false
        if (this._config.getBoolean('hoverCSS', true)) {
            this.setElementClass('enable-hover', true);
        }
        // sweet, the app root has loaded!
        // which means angular and ionic has fully loaded!
        // fire off the platform prepare ready, which could
        // have been switched out by any of the platform engines
        this._plt.prepareReady();
    }
    /**
     * @hidden
     */
    _getPortal(portal) {
        if (portal === Constants.PORTAL_LOADING) {
            return this._loadingPortal;
        }
        if (portal === Constants.PORTAL_TOAST) {
            return this._toastPortal;
        }
        // Modals need their own overlay becuase we don't want an ActionSheet
        // or Alert to trigger lifecycle events inside a modal
        if (portal === Constants.PORTAL_MODAL) {
            return this._modalPortal;
        }
        return this._overlayPortal;
    }
    _getActivePortal() {
        const defaultPortal = this._overlayPortal;
        const modalPortal = this._modalPortal;
        const hasModal = modalPortal.length() > 0;
        const hasDefault = defaultPortal.length() > 0;
        if (!hasModal && !hasDefault) {
            return null;
        }
        else if (hasModal && hasDefault) {
            var defaultIndex = defaultPortal.getActive().getZIndex();
            var modalIndex = modalPortal.getActive().getZIndex();
            if (defaultIndex > modalIndex) {
                return defaultPortal;
            }
            else {
                (void 0) /* assert */;
                return modalPortal;
            }
        }
        if (hasModal) {
            return modalPortal;
        }
        else if (hasDefault) {
            return defaultPortal;
        }
    }
    _disableScroll(shouldDisableScroll) {
        if (shouldDisableScroll) {
            this.stopScroll().then(() => {
                this._tmr = this._plt.timeout(() => {
                    (void 0) /* console.debug */;
                    this.setElementClass('disable-scroll', true);
                }, 32);
            });
        }
        else {
            let plugin = this._stopScrollPlugin;
            if (plugin && plugin.cancel) {
                plugin.cancel();
            }
            clearTimeout(this._tmr);
            (void 0) /* console.debug */;
            this.setElementClass('disable-scroll', false);
            /**
             * On iOS 12.2 there is a bug that
             * prevents pointer-events from being
             * re-enabled when removing the
             * disable-scroll class.
             */
            const plaform = this._plt;
            plaform.raf(() => {
                this.setElementStyle('z-index', '1');
                plaform.raf(() => {
                    this.setElementStyle('z-index', null);
                });
            });
        }
    }
    stopScroll() {
        if (this._stopScrollPlugin) {
            return new Promise((resolve) => {
                this._stopScrollPlugin.stop(() => resolve(true));
            });
        }
        else {
            return Promise.resolve(false);
        }
    }
}
IonicApp.ɵfac = function IonicApp_Factory(t) { return new (t || IonicApp)(ɵngcc0.ɵɵdirectiveInject(AppRootToken), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.App)); };
IonicApp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: IonicApp, selectors: [["ion-app"]], viewQuery: function IonicApp_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c1, 5, OverlayPortal);
        ɵngcc0.ɵɵviewQuery(_c2, 5, OverlayPortal);
        ɵngcc0.ɵɵviewQuery(_c3, 5, OverlayPortal);
        ɵngcc0.ɵɵviewQuery(_c4, 5, OverlayPortal);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._viewport = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._modalPortal = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayPortal = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._loadingPortal = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toastPortal = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 1, consts: [["app-viewport", ""], ["viewport", ""], ["overlay-portal", ""], ["modalPortal", ""], ["overlayPortal", ""], ["overlay-portal", "", 1, "loading-portal"], ["loadingPortal", ""], [1, "toast-portal", 3, "overlay-portal"], ["toastPortal", ""], [1, "click-block"]], template: function IonicApp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0, 1)(2, "div", 2, 3)(4, "div", 2, 4)(6, "div", 5, 6)(8, "div", 7, 8)(10, "div", 9);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("overlay-portal", 10000);
    } }, dependencies: [ɵngcc4.ClickBlock, ɵngcc5.OverlayPortal], encapsulation: 2 });
/** @nocollapse */
IonicApp.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AppRootToken,] },] },
    { type: ComponentFactoryResolver, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: Config, },
    { type: Platform, },
    { type: App, },
];
IonicApp.propDecorators = {
    '_viewport': [{ type: ViewChild, args: ['viewport', { read: ViewContainerRef },] },],
    '_modalPortal': [{ type: ViewChild, args: ['modalPortal', { read: OverlayPortal },] },],
    '_overlayPortal': [{ type: ViewChild, args: ['overlayPortal', { read: OverlayPortal },] },],
    '_loadingPortal': [{ type: ViewChild, args: ['loadingPortal', { read: OverlayPortal },] },],
    '_toastPortal': [{ type: ViewChild, args: ['toastPortal', { read: OverlayPortal },] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicApp, [{
        type: Component,
        args: [{
                selector: 'ion-app',
                template: '<div #viewport app-viewport></div>' +
                    '<div #modalPortal overlay-portal></div>' +
                    '<div #overlayPortal overlay-portal></div>' +
                    '<div #loadingPortal class="loading-portal" overlay-portal></div>' +
                    '<div #toastPortal class="toast-portal" [overlay-portal]="10000"></div>' +
                    '<div class="click-block"></div>'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [AppRootToken]
            }] }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ElementRef }, { type: Renderer }, { type: ɵngcc1.Config }, { type: ɵngcc2.Platform }, { type: ɵngcc3.App }]; }, { _viewport: [{
            type: ViewChild,
            args: ['viewport', { read: ViewContainerRef }]
        }], _modalPortal: [{
            type: ViewChild,
            args: ['modalPortal', { read: OverlayPortal }]
        }], _overlayPortal: [{
            type: ViewChild,
            args: ['overlayPortal', { read: OverlayPortal }]
        }], _loadingPortal: [{
            type: ViewChild,
            args: ['loadingPortal', { read: OverlayPortal }]
        }], _toastPortal: [{
            type: ViewChild,
            args: ['toastPortal', { read: OverlayPortal }]
        }] }); })();

//# sourceMappingURL=app-root.js.map