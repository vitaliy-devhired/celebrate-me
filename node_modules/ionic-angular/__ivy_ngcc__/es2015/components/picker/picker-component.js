import { Component, ElementRef, HostListener, Renderer, ViewChildren, ViewEncapsulation } from '@angular/core';
import { isNumber, isPresent, isString } from '../../util/util';
import { Config } from '../../config/config';
import { BLOCK_ALL, GestureController, } from '../../gestures/gesture-controller';
import { KEY_ENTER, KEY_ESCAPE } from '../../platform/key';
import { NavParams } from '../../navigation/nav-params';
import { ViewController } from '../../navigation/view-controller';
import { PickerColumnCmp } from './picker-column';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../navigation/view-controller';
import * as ɵngcc2 from '../../config/config';
import * as ɵngcc3 from '../../gestures/gesture-controller';
import * as ɵngcc4 from '../../navigation/nav-params';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '../backdrop/backdrop';
import * as ɵngcc7 from '../button/button';
import * as ɵngcc8 from './picker-column';

function PickerCmp_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8)(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function PickerCmp_div_3_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const b_r2 = restoredCtx.$implicit; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3.btnClick(b_r2)); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const b_r2 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", b_r2.cssRole);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", b_r2.cssClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", b_r2.text, " ");
} }
function PickerCmp_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵlistener("ionChange", function PickerCmp_div_6_Template_div_ionChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r6._colChange($event)); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const c_r5 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("col", c_r5);
} }
export class PickerCmp {
    constructor(_viewCtrl, _elementRef, config, gestureCtrl, params, renderer) {
        this._viewCtrl = _viewCtrl;
        this._elementRef = _elementRef;
        this._gestureBlocker = gestureCtrl.createBlocker(BLOCK_ALL);
        this.d = params.data;
        this.mode = this.d.mode || config.get('mode');
        renderer.setElementClass(_elementRef.nativeElement, `picker-${this.mode}`, true);
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(cssClass => {
                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = (++pickerIds);
        this.lastClick = 0;
    }
    ionViewWillLoad() {
        // normalize the data
        let data = this.d;
        data.buttons = data.buttons.map(button => {
            if (isString(button)) {
                return { text: button };
            }
            if (button.role) {
                button.cssRole = `picker-toolbar-${button.role}`;
            }
            return button;
        });
        // clean up dat data
        data.columns = data.columns.map(column => {
            if (!isPresent(column.options)) {
                column.options = [];
            }
            column.mode = this.mode;
            column.selectedIndex = column.selectedIndex || 0;
            column.options = column.options.map(inputOpt => {
                let opt = {
                    text: '',
                    value: '',
                    disabled: inputOpt.disabled
                };
                if (isPresent(inputOpt)) {
                    if (isString(inputOpt) || isNumber(inputOpt)) {
                        opt.text = inputOpt.toString();
                        opt.value = inputOpt;
                    }
                    else {
                        opt.text = isPresent(inputOpt.text) ? inputOpt.text : inputOpt.value;
                        opt.value = isPresent(inputOpt.value) ? inputOpt.value : inputOpt.text;
                    }
                }
                return opt;
            });
            return column;
        });
    }
    ionViewDidLoad() {
        this.refresh();
    }
    ionViewWillEnter() {
        this._gestureBlocker.block();
    }
    ionViewDidLeave() {
        this._gestureBlocker.unblock();
    }
    refresh() {
        this._cols.forEach(column => column.refresh());
    }
    _colChange() {
        // one of the columns has changed its selected index
        var picker = this._viewCtrl;
        picker.ionChange.emit(this.getSelected());
    }
    _keyUp(ev) {
        if (this.enabled && this._viewCtrl.isLast()) {
            if (ev.keyCode === KEY_ENTER) {
                if (this.lastClick + 1000 < Date.now()) {
                    // do not fire this click if there recently was already a click
                    // this can happen when the button has focus and used the enter
                    // key to click the button. However, both the click handler and
                    // this keyup event will fire, so only allow one of them to go.
                    (void 0) /* console.debug */;
                    let button = this.d.buttons[this.d.buttons.length - 1];
                    this.btnClick(button);
                }
            }
            else if (ev.keyCode === KEY_ESCAPE) {
                (void 0) /* console.debug */;
                this.bdClick();
            }
        }
    }
    ionViewDidEnter() {
        let focusableEle = this._elementRef.nativeElement.querySelector('button');
        if (focusableEle) {
            focusableEle.focus();
        }
        this.enabled = true;
    }
    btnClick(button) {
        if (!this.enabled) {
            return;
        }
        // keep the time of the most recent button click
        this.lastClick = Date.now();
        let shouldDismiss = true;
        if (button.handler) {
            // a handler has been provided, execute it
            // pass the handler the values from the inputs
            if (button.handler(this.getSelected()) === false) {
                // if the return value of the handler is false then do not dismiss
                shouldDismiss = false;
            }
        }
        if (shouldDismiss) {
            this.dismiss(button.role);
        }
    }
    bdClick() {
        if (this.enabled && this.d.enableBackdropDismiss) {
            let cancelBtn = this.d.buttons.find(b => b.role === 'cancel');
            if (cancelBtn) {
                this.btnClick(cancelBtn);
            }
            else {
                this.dismiss('backdrop');
            }
        }
    }
    dismiss(role) {
        return this._viewCtrl.dismiss(this.getSelected(), role);
    }
    getSelected() {
        let selected = {};
        this.d.columns.forEach((col, index) => {
            let selectedColumn = col.options[col.selectedIndex];
            selected[col.name] = {
                text: selectedColumn ? selectedColumn.text : null,
                value: selectedColumn ? selectedColumn.value : null,
                columnIndex: index,
            };
        });
        return selected;
    }
    ngOnDestroy() {
        (void 0) /* assert */;
        this._gestureBlocker.destroy();
    }
}
PickerCmp.ɵfac = function PickerCmp_Factory(t) { return new (t || PickerCmp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewController), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.GestureController), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NavParams), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
PickerCmp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PickerCmp, selectors: [["ion-picker-cmp"]], viewQuery: function PickerCmp_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(PickerColumnCmp, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._cols = _t);
    } }, hostAttrs: ["role", "dialog"], hostBindings: function PickerCmp_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function PickerCmp_keyup_HostBindingHandler($event) { return ctx._keyUp($event); }, false, ɵngcc0.ɵɵresolveBody);
    } }, decls: 8, vars: 2, consts: [[3, "click"], [1, "picker-wrapper"], [1, "picker-toolbar"], ["class", "picker-toolbar-button", 3, "ngClass", 4, "ngFor", "ngForOf"], [1, "picker-columns"], [1, "picker-above-highlight"], ["class", "picker-col", 3, "col", "ionChange", 4, "ngFor", "ngForOf"], [1, "picker-below-highlight"], [1, "picker-toolbar-button", 3, "ngClass"], ["ion-button", "", "clear", "", 1, "picker-button", 3, "ngClass", "click"], [1, "picker-col", 3, "col", "ionChange"]], template: function PickerCmp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ion-backdrop", 0);
        ɵngcc0.ɵɵlistener("click", function PickerCmp_Template_ion_backdrop_click_0_listener() { return ctx.bdClick(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, PickerCmp_div_3_Template, 3, 3, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelement(5, "div", 5);
        ɵngcc0.ɵɵtemplate(6, PickerCmp_div_6_Template, 1, 1, "div", 6);
        ɵngcc0.ɵɵelement(7, "div", 7);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.d.buttons);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.d.columns);
    } }, dependencies: [ɵngcc5.NgClass, ɵngcc5.NgForOf, ɵngcc6.Backdrop, ɵngcc7.Button, ɵngcc8.PickerColumnCmp], encapsulation: 2 });
/** @nocollapse */
PickerCmp.ctorParameters = () => [
    { type: ViewController, },
    { type: ElementRef, },
    { type: Config, },
    { type: GestureController, },
    { type: NavParams, },
    { type: Renderer, },
];
PickerCmp.propDecorators = {
    '_cols': [{ type: ViewChildren, args: [PickerColumnCmp,] },],
    '_keyUp': [{ type: HostListener, args: ['body:keyup', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PickerCmp, [{
        type: Component,
        args: [{
                selector: 'ion-picker-cmp',
                template: `
    <ion-backdrop (click)="bdClick()"></ion-backdrop>
    <div class="picker-wrapper">
      <div class="picker-toolbar">
        <div *ngFor="let b of d.buttons" class="picker-toolbar-button" [ngClass]="b.cssRole">
          <button ion-button (click)="btnClick(b)" [ngClass]="b.cssClass" class="picker-button" clear>
            {{b.text}}
          </button>
        </div>
      </div>
      <div class="picker-columns">
        <div class="picker-above-highlight"></div>
        <div *ngFor="let c of d.columns" [col]="c" class="picker-col" (ionChange)="_colChange($event)"></div>
        <div class="picker-below-highlight"></div>
      </div>
    </div>
  `,
                host: {
                    'role': 'dialog'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.ViewController }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.Config }, { type: ɵngcc3.GestureController }, { type: ɵngcc4.NavParams }, { type: Renderer }]; }, { _keyUp: [{
            type: HostListener,
            args: ['body:keyup', ['$event']]
        }], _cols: [{
            type: ViewChildren,
            args: [PickerColumnCmp]
        }] }); })();
let pickerIds = -1;

//# sourceMappingURL=picker-component.js.map