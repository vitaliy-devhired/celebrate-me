{"version":3,"file":"toolbar-title.js","sources":["toolbar-title.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;iFAUE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;kCAAE;AACF","sourcesContent":["import { ChangeDetectionStrategy, Component, ElementRef, Inject, Optional, Renderer, ViewEncapsulation, forwardRef, } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\nimport { Navbar } from './navbar';\nimport { Toolbar } from './toolbar';\n/**\n * @name Title\n * @description\n * `ion-title` is a component that sets the title of the `Toolbar` or `Navbar`\n *\n * @usage\n *\n * ```html\n * <ion-header>\n *\n *   <ion-navbar>\n *     <ion-title>Settings</ion-title>\n *   </ion-navbar>\n *\n * </ion-header>\n * ```\n *\n * Or to create a navbar with a toolbar as a subheader:\n *\n * ```html\n * <ion-header>\n *\n *   <ion-navbar>\n *     <ion-title>Main Header</ion-title>\n *   </ion-navbar>\n *\n *   <ion-toolbar>\n *     <ion-title>Subheader</ion-title>\n *   </ion-toolbar>\n *\n * </ion-header>\n * ```\n *\n * @demo /docs/demos/src/title/\n */\nexport class ToolbarTitle extends Ion {\n    constructor(config, elementRef, renderer, toolbar, navbar) {\n        super(config, elementRef, renderer, 'title');\n        toolbar && toolbar._setTitle(this);\n        navbar && navbar._setTitle(this);\n    }\n    /**\n     * @hidden\n     */\n    getTitleText() {\n        return this._elementRef.nativeElement.textContent;\n    }\n}\nToolbarTitle.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-title',\n                template: '<div class=\"toolbar-title\" [ngClass]=\"\\'toolbar-title-\\' + _mode\">' +\n                    '<ng-content></ng-content>' +\n                    '</div>',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nToolbarTitle.ctorParameters = () => [\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: Toolbar, decorators: [{ type: Optional },] },\n    { type: Navbar, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => Navbar),] },] },\n];\n"]}