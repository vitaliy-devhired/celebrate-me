{"version":3,"file":"toolbar-item.js","sources":["toolbar-item.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;0DAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { ContentChildren, Directive, ElementRef, Inject, Optional, Renderer, forwardRef } from '@angular/core';\nimport { Button } from '../button/button';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\nimport { Navbar } from './navbar';\nimport { Toolbar } from './toolbar';\n/**\n * @hidden\n */\nexport class ToolbarItem extends Ion {\n    constructor(config, elementRef, renderer, toolbar, navbar) {\n        super(config, elementRef, renderer, 'bar-buttons');\n        this.inToolbar = !!(toolbar || navbar);\n    }\n    set _buttons(buttons) {\n        if (this.inToolbar) {\n            buttons.forEach((button) => {\n                button.setRole('bar-button');\n            });\n        }\n    }\n}\nToolbarItem.decorators = [\n    { type: Directive, args: [{\n                selector: 'ion-buttons,[menuToggle]'\n            },] },\n];\n/** @nocollapse */\nToolbarItem.ctorParameters = () => [\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: Toolbar, decorators: [{ type: Optional },] },\n    { type: Navbar, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => Navbar),] },] },\n];\nToolbarItem.propDecorators = {\n    '_buttons': [{ type: ContentChildren, args: [Button,] },],\n};\n"]}