import { ChangeDetectionStrategy, Component, ElementRef, Inject, Optional, Renderer, ViewEncapsulation, forwardRef, } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
import { Navbar } from './navbar';
import { Toolbar } from './toolbar';
/**
 * @name Title
 * @description
 * `ion-title` is a component that sets the title of the `Toolbar` or `Navbar`
 *
 * @usage
 *
 * ```html
 * <ion-header>
 *
 *   <ion-navbar>
 *     <ion-title>Settings</ion-title>
 *   </ion-navbar>
 *
 * </ion-header>
 * ```
 *
 * Or to create a navbar with a toolbar as a subheader:
 *
 * ```html
 * <ion-header>
 *
 *   <ion-navbar>
 *     <ion-title>Main Header</ion-title>
 *   </ion-navbar>
 *
 *   <ion-toolbar>
 *     <ion-title>Subheader</ion-title>
 *   </ion-toolbar>
 *
 * </ion-header>
 * ```
 *
 * @demo /docs/demos/src/title/
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../config/config';
import * as ɵngcc2 from './toolbar';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from './navbar';

const _c0 = ["*"];
export class ToolbarTitle extends Ion {
    constructor(config, elementRef, renderer, toolbar, navbar) {
        super(config, elementRef, renderer, 'title');
        toolbar && toolbar._setTitle(this);
        navbar && navbar._setTitle(this);
    }
    /**
     * @hidden
     */
    getTitleText() {
        return this._elementRef.nativeElement.textContent;
    }
}
ToolbarTitle.ɵfac = function ToolbarTitle_Factory(t) { return new (t || ToolbarTitle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Toolbar, 8), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => Navbar), 8)); };
ToolbarTitle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ToolbarTitle, selectors: [["ion-title"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 1, consts: [[1, "toolbar-title", 3, "ngClass"]], template: function ToolbarTitle_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", "toolbar-title-" + ctx._mode);
    } }, dependencies: [ɵngcc3.NgClass], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
ToolbarTitle.ctorParameters = () => [
    { type: Config, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: Toolbar, decorators: [{ type: Optional },] },
    { type: Navbar, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => Navbar),] },] },
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToolbarTitle, [{
        type: Component,
        args: [{
                selector: 'ion-title',
                template: '<div class="toolbar-title" [ngClass]="\'toolbar-title-\' + _mode">' +
                    '<ng-content></ng-content>' +
                    '</div>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.Config }, { type: ɵngcc0.ElementRef }, { type: Renderer }, { type: ɵngcc2.Toolbar, decorators: [{
                type: Optional
            }] }, { type: ɵngcc4.Navbar, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [forwardRef(() => Navbar)]
            }] }]; }, null); })();

//# sourceMappingURL=toolbar-title.js.map