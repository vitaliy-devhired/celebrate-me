{"version":3,"file":"checkbox.js","sources":["checkbox.js"],"names":[],"mappingssBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Component, ElementRef, HostListener, Input, Optional, Renderer, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Config } from '../../config/config';\nimport { isTrueProperty } from '../../util/util';\nimport { Form } from '../../util/form';\nimport { BaseInput } from '../../util/base-input';\nimport { Item } from '../item/item';\n/**\n * @name Checkbox\n * @module ionic\n *\n * @description\n * The Checkbox is a simple component styled based on the mode. It can be\n * placed in an `ion-item` or used as a stand-alone checkbox.\n *\n * See the [Angular Docs](https://angular.io/docs/ts/latest/guide/forms.html)\n * for more info on forms and inputs.\n *\n *\n * @usage\n * ```html\n *\n *  <ion-list>\n *\n *    <ion-item>\n *      <ion-label>Pepperoni</ion-label>\n *      <ion-checkbox [(ngModel)]=\"pepperoni\"></ion-checkbox>\n *    </ion-item>\n *\n *    <ion-item>\n *      <ion-label>Sausage</ion-label>\n *      <ion-checkbox [(ngModel)]=\"sausage\" disabled=\"true\"></ion-checkbox>\n *    </ion-item>\n *\n *    <ion-item>\n *      <ion-label>Mushrooms</ion-label>\n *      <ion-checkbox [(ngModel)]=\"mushrooms\"></ion-checkbox>\n *    </ion-item>\n *\n *  </ion-list>\n * ```\n *\n * @advanced\n *\n * ```html\n *\n * <!-- Call function when state changes -->\n *  <ion-list>\n *\n *    <ion-item>\n *      <ion-label>Cucumber</ion-label>\n *      <ion-checkbox [(ngModel)]=\"cucumber\" (ionChange)=\"updateCucumber()\"></ion-checkbox>\n *    </ion-item>\n *\n *  </ion-list>\n * ```\n *\n * ```ts\n * @Component({\n *   templateUrl: 'main.html'\n * })\n * class SaladPage {\n *   cucumber: boolean;\n *\n *   updateCucumber() {\n *     console.log('Cucumbers new state:' + this.cucumber);\n *   }\n * }\n * ```\n *\n * @demo /docs/demos/src/checkbox/\n * @see {@link /docs/components#checkbox Checkbox Component Docs}\n */\nexport class Checkbox extends BaseInput {\n    constructor(config, form, item, elementRef, renderer) {\n        super(config, elementRef, renderer, 'checkbox', false, form, item, null);\n    }\n    /**\n     * @input {boolean} If true, the element is selected.\n     */\n    get checked() {\n        return this.value;\n    }\n    set checked(val) {\n        this.value = val;\n    }\n    /**\n     * @hidden\n     */\n    _click(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.value = !this.value;\n        this._fireTouched();\n    }\n    /**\n     * @hidden\n     */\n    _inputNormalize(val) {\n        return isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     */\n    _inputUpdated() {\n        this._item && this._item.setElementClass('item-checkbox-checked', this._value);\n    }\n}\nCheckbox.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-checkbox',\n                template: '<div class=\"checkbox-icon\" [class.checkbox-checked]=\"_value\">' +\n                    '<div class=\"checkbox-inner\"></div>' +\n                    '</div>' +\n                    '<button role=\"checkbox\" ' +\n                    'type=\"button\" ' +\n                    'ion-button=\"item-cover\" ' +\n                    '[id]=\"id\" ' +\n                    '[attr.aria-checked]=\"_value\" ' +\n                    '[attr.aria-labelledby]=\"_labelId\" ' +\n                    '[attr.aria-disabled]=\"_disabled\" ' +\n                    'class=\"item-cover\"> ' +\n                    '</button>',\n                host: {\n                    '[class.checkbox-disabled]': '_disabled'\n                },\n                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: Checkbox, multi: true }],\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nCheckbox.ctorParameters = () => [\n    { type: Config, },\n    { type: Form, },\n    { type: Item, decorators: [{ type: Optional },] },\n    { type: ElementRef, },\n    { type: Renderer, },\n];\nCheckbox.propDecorators = {\n    'checked': [{ type: Input },],\n    '_click': [{ type: HostListener, args: ['click', ['$event'],] },],\n};\n"]}