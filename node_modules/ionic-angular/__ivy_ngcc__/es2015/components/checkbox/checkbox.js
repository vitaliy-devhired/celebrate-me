import { Component, ElementRef, HostListener, Input, Optional, Renderer, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Config } from '../../config/config';
import { isTrueProperty } from '../../util/util';
import { Form } from '../../util/form';
import { BaseInput } from '../../util/base-input';
import { Item } from '../item/item';
/**
 * @name Checkbox
 * @module ionic
 *
 * @description
 * The Checkbox is a simple component styled based on the mode. It can be
 * placed in an `ion-item` or used as a stand-alone checkbox.
 *
 * See the [Angular Docs](https://angular.io/docs/ts/latest/guide/forms.html)
 * for more info on forms and inputs.
 *
 *
 * @usage
 * ```html
 *
 *  <ion-list>
 *
 *    <ion-item>
 *      <ion-label>Pepperoni</ion-label>
 *      <ion-checkbox [(ngModel)]="pepperoni"></ion-checkbox>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Sausage</ion-label>
 *      <ion-checkbox [(ngModel)]="sausage" disabled="true"></ion-checkbox>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Mushrooms</ion-label>
 *      <ion-checkbox [(ngModel)]="mushrooms"></ion-checkbox>
 *    </ion-item>
 *
 *  </ion-list>
 * ```
 *
 * @advanced
 *
 * ```html
 *
 * <!-- Call function when state changes -->
 *  <ion-list>
 *
 *    <ion-item>
 *      <ion-label>Cucumber</ion-label>
 *      <ion-checkbox [(ngModel)]="cucumber" (ionChange)="updateCucumber()"></ion-checkbox>
 *    </ion-item>
 *
 *  </ion-list>
 * ```
 *
 * ```ts
 * @Component({
 *   templateUrl: 'main.html'
 * })
 * class SaladPage {
 *   cucumber: boolean;
 *
 *   updateCucumber() {
 *     console.log('Cucumbers new state:' + this.cucumber);
 *   }
 * }
 * ```
 *
 * @demo /docs/demos/src/checkbox/
 * @see {@link /docs/components#checkbox Checkbox Component Docs}
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../config/config';
import * as ɵngcc2 from '../../util/form';
import * as ɵngcc3 from '../item/item';
import * as ɵngcc4 from '../button/button';
export class Checkbox extends BaseInput {
    constructor(config, form, item, elementRef, renderer) {
        super(config, elementRef, renderer, 'checkbox', false, form, item, null);
    }
    /**
     * @input {boolean} If true, the element is selected.
     */
    get checked() {
        return this.value;
    }
    set checked(val) {
        this.value = val;
    }
    /**
     * @hidden
     */
    _click(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        this.value = !this.value;
        this._fireTouched();
    }
    /**
     * @hidden
     */
    _inputNormalize(val) {
        return isTrueProperty(val);
    }
    /**
     * @hidden
     */
    _inputUpdated() {
        this._item && this._item.setElementClass('item-checkbox-checked', this._value);
    }
}
Checkbox.ɵfac = function Checkbox_Factory(t) { return new (t || Checkbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Form), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Item, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
Checkbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: Checkbox, selectors: [["ion-checkbox"]], hostVars: 2, hostBindings: function Checkbox_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function Checkbox_click_HostBindingHandler($event) { return ctx._click($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("checkbox-disabled", ctx._disabled);
    } }, inputs: { checked: "checked" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: Checkbox, multi: true }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[1, "checkbox-icon"], [1, "checkbox-inner"], ["role", "checkbox", "type", "button", "ion-button", "item-cover", 1, "item-cover", 3, "id"]], template: function Checkbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "button", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("checkbox-checked", ctx._value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.id);
        ɵngcc0.ɵɵattribute("aria-checked", ctx._value)("aria-labelledby", ctx._labelId)("aria-disabled", ctx._disabled);
    } }, dependencies: [ɵngcc4.Button], encapsulation: 2 });
/** @nocollapse */
Checkbox.ctorParameters = () => [
    { type: Config, },
    { type: Form, },
    { type: Item, decorators: [{ type: Optional },] },
    { type: ElementRef, },
    { type: Renderer, },
];
Checkbox.propDecorators = {
    'checked': [{ type: Input },],
    '_click': [{ type: HostListener, args: ['click', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Checkbox, [{
        type: Component,
        args: [{
                selector: 'ion-checkbox',
                template: '<div class="checkbox-icon" [class.checkbox-checked]="_value">' +
                    '<div class="checkbox-inner"></div>' +
                    '</div>' +
                    '<button role="checkbox" ' +
                    'type="button" ' +
                    'ion-button="item-cover" ' +
                    '[id]="id" ' +
                    '[attr.aria-checked]="_value" ' +
                    '[attr.aria-labelledby]="_labelId" ' +
                    '[attr.aria-disabled]="_disabled" ' +
                    'class="item-cover"> ' +
                    '</button>',
                host: {
                    '[class.checkbox-disabled]': '_disabled'
                },
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: Checkbox, multi: true }],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.Config }, { type: ɵngcc2.Form }, { type: ɵngcc3.Item, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { checked: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    _click: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

//# sourceMappingURL=checkbox.js.map