{"version":3,"file":"spinner.js","sources":["spinner.js"],"names":[],"mappingsiGAgBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ChangeDetectionStrategy, Component, ElementRef, Input, Renderer, ViewEncapsulation } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\nimport { isTrueProperty } from '../../util/util';\n/**\n * @name Spinner\n * @description\n * The `ion-spinner` component provides a variety of animated SVG spinners.\n * Spinners enables you to give users feedback that the app is actively\n * processing/thinking/waiting/chillin’ out, or whatever you’d like it to indicate.\n * By default, the `ion-refresher` feature uses this spinner component while it's\n * the refresher is in the `refreshing` state.\n *\n * Ionic offers a handful of spinners out of the box, and by default, it will use\n * the appropriate spinner for the platform on which it’s running.\n *\n * <table class=\"table spinner-table\">\n *  <tr>\n *    <th>\n *      <code>ios</code>\n *    </th>\n *    <td>\n *      <ion-spinner name=\"ios\"></ion-spinner>\n *    </td>\n *  </tr>\n *  <tr>\n *    <th>\n *      <code>ios-small</code>\n *    </th>\n *    <td>\n *      <ion-spinner name=\"ios-small\"></ion-spinner>\n *    </td>\n *  </tr>\n *  <tr>\n *    <th>\n *      <code>bubbles</code>\n *    </th>\n *    <td>\n *      <ion-spinner name=\"bubbles\"></ion-spinner>\n *    </td>\n *  </tr>\n *  <tr>\n *    <th>\n *      <code>circles</code>\n *    </th>\n *    <td>\n *      <ion-spinner name=\"circles\"></ion-spinner>\n *    </td>\n *  </tr>\n *  <tr>\n *    <th>\n *      <code>crescent</code>\n *    </th>\n *    <td>\n *      <ion-spinner name=\"crescent\"></ion-spinner>\n *    </td>\n *  </tr>\n *  <tr>\n *    <th>\n *      <code>dots</code>\n *    </th>\n *    <td>\n *      <ion-spinner name=\"dots\"></ion-spinner>\n *    </td>\n *  </tr>\n * </table>\n *\n * @usage\n * The following code would use the default spinner for the platform it's\n * running from. If it's neither iOS or Android, it'll default to use `ios`.\n *\n * ```html\n * <ion-spinner></ion-spinner>\n * ```\n *\n * By setting the `name` property, you can specify which predefined spinner to\n * use, no matter what the platform is.\n *\n * ```html\n * <ion-spinner name=\"bubbles\"></ion-spinner>\n * ```\n *\n * ## Styling SVG with CSS\n * One cool thing about SVG is its ability to be styled with CSS! One thing to note\n * is that some of the CSS properties on an SVG element have different names. For\n * example, SVG uses the term `stroke` instead of `border`, and `fill` instead\n * of `background-color`.\n *\n * ```css\n * ion-spinner * {\n *   width: 28px;\n *   height: 28px;\n *   stroke: #444;\n *   fill: #222;\n * }\n * ```\n */\nexport class Spinner extends Ion {\n    constructor(config, elementRef, renderer) {\n        super(config, elementRef, renderer, 'spinner');\n        this._dur = null;\n        this._paused = false;\n    }\n    /**\n     * @input {string} SVG spinner name.\n     */\n    get name() {\n        return this._name;\n    }\n    set name(val) {\n        this._name = val;\n        this.load();\n    }\n    /**\n     * @input {string} How long it takes it to do one loop.\n     */\n    get duration() {\n        return this._dur;\n    }\n    set duration(val) {\n        this._dur = val;\n        this.load();\n    }\n    /**\n     * @input {boolean} If true, pause the animation.\n     */\n    get paused() {\n        return this._paused;\n    }\n    set paused(val) {\n        this._paused = isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._init = true;\n        this.load();\n    }\n    /**\n     * @hidden\n     */\n    load() {\n        if (this._init) {\n            this._l = [];\n            this._c = [];\n            var name = this._name || this._config.get('spinner', 'ios');\n            const spinner = SPINNERS[name];\n            if (spinner) {\n                if (spinner.lines) {\n                    for (let i = 0, l = spinner.lines; i < l; i++) {\n                        this._l.push(this._loadEle(spinner, i, l));\n                    }\n                }\n                else if (spinner.circles) {\n                    for (let i = 0, l = spinner.circles; i < l; i++) {\n                        this._c.push(this._loadEle(spinner, i, l));\n                    }\n                }\n                this.setElementClass(`spinner-${name}`, true);\n                this.setElementClass(`spinner-${this._mode}-${name}`, true);\n            }\n        }\n    }\n    _loadEle(spinner, index, total) {\n        let duration = this._dur || spinner.dur;\n        let data = spinner.fn(duration, index, total);\n        data.style.animationDuration = duration + 'ms';\n        return data;\n    }\n}\nSpinner.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-spinner',\n                template: '<svg viewBox=\"0 0 64 64\" *ngFor=\"let i of _c\" [ngStyle]=\"i.style\">' +\n                    '<circle [attr.r]=\"i.r\" transform=\"translate(32,32)\"></circle>' +\n                    '</svg>' +\n                    '<svg viewBox=\"0 0 64 64\" *ngFor=\"let i of _l\" [ngStyle]=\"i.style\">' +\n                    '<line [attr.y1]=\"i.y1\" [attr.y2]=\"i.y2\" transform=\"translate(32,32)\"></line>' +\n                    '</svg>',\n                host: {\n                    '[class.spinner-paused]': '_paused'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nSpinner.ctorParameters = () => [\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n];\nSpinner.propDecorators = {\n    'name': [{ type: Input },],\n    'duration': [{ type: Input },],\n    'paused': [{ type: Input },],\n};\nconst SPINNERS = {\n    ios: {\n        dur: 1000,\n        lines: 12,\n        fn: function (dur, index, total) {\n            const transform = 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)';\n            const animationDelay = -(dur - ((dur / total) * index)) + 'ms';\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    transform: transform,\n                    webkitTransform: transform,\n                    animationDelay: animationDelay,\n                    webkitAnimationDelay: animationDelay\n                }\n            };\n        }\n    },\n    'ios-small': {\n        dur: 1000,\n        lines: 12,\n        fn: function (dur, index, total) {\n            const transform = 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)';\n            const animationDelay = -(dur - ((dur / total) * index)) + 'ms';\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    transform: transform,\n                    webkitTransform: transform,\n                    animationDelay: animationDelay,\n                    webkitAnimationDelay: animationDelay\n                }\n            };\n        }\n    },\n    bubbles: {\n        dur: 1000,\n        circles: 9,\n        fn: function (dur, index, total) {\n            const animationDelay = -(dur - ((dur / total) * index)) + 'ms';\n            return {\n                r: 5,\n                style: {\n                    top: (9 * Math.sin(2 * Math.PI * index / total)) + 'px',\n                    left: (9 * Math.cos(2 * Math.PI * index / total)) + 'px',\n                    animationDelay: animationDelay,\n                    webkitAnimationDelay: animationDelay\n                }\n            };\n        }\n    },\n    circles: {\n        dur: 1000,\n        circles: 8,\n        fn: function (dur, index, total) {\n            const animationDelay = -(dur - ((dur / total) * index)) + 'ms';\n            return {\n                r: 5,\n                style: {\n                    top: (9 * Math.sin(2 * Math.PI * index / total)) + 'px',\n                    left: (9 * Math.cos(2 * Math.PI * index / total)) + 'px',\n                    animationDelay: animationDelay,\n                    webkitAnimationDelay: animationDelay\n                }\n            };\n        }\n    },\n    crescent: {\n        dur: 750,\n        circles: 1,\n        fn: function () {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    dots: {\n        dur: 750,\n        circles: 3,\n        fn: function (_dur, index) {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    left: (9 - (9 * index)) + 'px',\n                    animationDelay: animationDelay,\n                    webkitAnimationDelay: animationDelay\n                }\n            };\n        }\n    }\n};\n"]}