{"version":3,"file":"button.js","sources":["button.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;iDAWE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF","sourcesContent":["import { Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, Renderer, ViewEncapsulation } from '@angular/core';\nimport { Config } from '../../config/config';\nimport { Ion } from '../ion';\nimport { isTrueProperty } from '../../util/util';\n/**\n  * @name Button\n  * @module ionic\n  * @description\n  * Buttons are simple components in Ionic. They can consist of text and icons\n  * and be enhanced by a wide range of attributes.\n  *\n  * @usage\n  *\n  * ```html\n  *\n  *  <!-- Colors -->\n  *  <button ion-button>Default</button>\n  *\n  *  <button ion-button color=\"secondary\">Secondary</button>\n  *\n  *  <button ion-button color=\"danger\">Danger</button>\n  *\n  *  <button ion-button color=\"light\">Light</button>\n  *\n  *  <button ion-button color=\"dark\">Dark</button>\n  *\n  *  <!-- Shapes -->\n  *  <button ion-button full>Full Button</button>\n  *\n  *  <button ion-button block>Block Button</button>\n  *\n  *  <button ion-button round>Round Button</button>\n  *\n  *  <!-- Outline -->\n  *  <button ion-button full outline>Outline + Full</button>\n  *\n  *  <button ion-button block outline>Outline + Block</button>\n  *\n  *  <button ion-button round outline>Outline + Round</button>\n  *\n  *  <!-- Icons -->\n  *  <button ion-button icon-start>\n  *    <ion-icon name=\"star\"></ion-icon>\n  *    Left Icon\n  *  </button>\n  *\n  *  <button ion-button icon-end>\n  *    Right Icon\n  *    <ion-icon name=\"star\"></ion-icon>\n  *  </button>\n  *\n  *  <button ion-button icon-only>\n  *    <ion-icon name=\"star\"></ion-icon>\n  *  </button>\n  *\n  *  <!-- Sizes -->\n  *  <button ion-button large>Large</button>\n  *\n  *  <button ion-button>Default</button>\n  *\n  *  <button ion-button small>Small</button>\n  * ```\n  *\n  * @advanced\n  *\n  * ```html\n  *\n  * <!-- Bind the color and outline inputs to an expression -->\n  * <button ion-button [color]=\"isDanger ? 'danger' : 'primary'\" [outline]=\"isOutline\">\n  *   Danger (Solid)\n  * </button>\n  *\n  * <!-- Bind the color and round inputs to an expression -->\n  * <button ion-button [color]=\"myColor\" [round]=\"isRound\">\n  *   Secondary (Round)\n  * </button>\n  *\n  * <!-- Bind the color and clear inputs to an expression -->\n  * <button ion-button [color]=\"isSecondary ? 'secondary' : 'primary'\"  [clear]=\"isClear\">\n  *   Primary (Clear)\n  * </button>\n  *\n  * <!-- Bind the color, outline and round inputs to an expression -->\n  * <button ion-button [color]=\"myColor2\" [outline]=\"isOutline\" [round]=\"isRound\">\n  *   Dark (Solid + Round)\n  * </button>\n  *\n  * <!-- Bind the click event to a method -->\n  * <button ion-button (click)=\"logEvent($event)\">\n  *   Click me!\n  * </button>\n  * ```\n  *\n  * ```ts\n  * @Component({\n  *   templateUrl: 'main.html'\n  * })\n  * class E2EPage {\n  *   isDanger: boolean = true;\n  *   isSecondary: boolean = false;\n  *   isRound: boolean = true;\n  *   isOutline: boolean = false;\n  *   isClear: boolean = true;\n  *   myColor: string = 'secondary';\n  *   myColor2: string = 'dark';\n  *\n  *   logEvent(event) {\n  *     console.log(event)\n  *   }\n  * }\n  *\n  * ```\n  *\n  * @demo /docs/demos/src/button/\n  * @see {@link /docs/components#buttons Button Component Docs}\n  * @see {@link /docs/components#fabs FabButton Docs}\n  * @see {@link ../../fab/FabButton FabButton API Docs}\n  * @see {@link ../../fab/FabContainer FabContainer API Docs}\n */\nexport class Button extends Ion {\n    constructor(ionButton, config, elementRef, renderer) {\n        super(config, elementRef, renderer);\n        /** @hidden */\n        this._role = 'button'; // bar-button\n        /** @hidden */\n        this._style = 'default'; // outline/clear/solid\n        this._mode = config.get('mode');\n        if (config.get('hoverCSS') === false) {\n            this.setElementClass('disable-hover', true);\n        }\n        if (ionButton.trim().length > 0) {\n            this.setRole(ionButton);\n        }\n    }\n    /**\n     * @input {boolean} If true, activates the large button size.\n     */\n    set large(val) {\n        this._attr('_size', 'large', val);\n    }\n    /**\n     * @input {boolean} If true, activates the small button size.\n     */\n    set small(val) {\n        this._attr('_size', 'small', val);\n    }\n    /**\n     * @input {boolean} If true, activates the default button size. Normally the default, useful for buttons in an item.\n     */\n    set default(val) {\n        this._attr('_size', 'default', val);\n    }\n    /**\n     * @input {boolean} If true, activates a transparent button style with a border.\n     */\n    set outline(val) {\n        this._attr('_style', 'outline', val);\n    }\n    /**\n     * @input {boolean} If true, activates a transparent button style without a border.\n     */\n    set clear(val) {\n        this._attr('_style', 'clear', val);\n    }\n    /**\n     * @input {boolean} If true, activates a solid button style. Normally the default, useful for buttons in a toolbar.\n     */\n    set solid(val) {\n        this._attr('_style', 'solid', val);\n    }\n    /**\n     * @input {boolean} If true, activates a button with rounded corners.\n     */\n    set round(val) {\n        this._attr('_shape', 'round', val);\n    }\n    /**\n     * @input {boolean} If true, activates a button style that fills the available width.\n     */\n    set block(val) {\n        this._attr('_display', 'block', val);\n    }\n    /**\n     * @input {boolean} If true, activates a button style that fills the available width without\n     * a left and right border.\n     */\n    set full(val) {\n        this._attr('_display', 'full', val);\n    }\n    /**\n     * @input {boolean} If true, activates a button with a heavier font weight.\n     */\n    set strong(val) {\n        this._attr('_decorator', 'strong', val);\n    }\n    /**\n     * @input {string} The mode determines which platform styles to use.\n     * Possible values are: `\"ios\"`, `\"md\"`, or `\"wp\"`.\n     * For more information, see [Platform Styles](/docs/theming/platform-specific-styles).\n     */\n    set mode(val) {\n        this._assignCss(false);\n        this._mode = val;\n        this._assignCss(true);\n    }\n    /** @hidden */\n    _attr(type, attrName, attrValue) {\n        if (type === '_style') {\n            this._updateColor(this._color, false);\n        }\n        this._setClass(this[type], false);\n        if (isTrueProperty(attrValue)) {\n            this[type] = attrName;\n            this._setClass(attrName, true);\n        }\n        else {\n            // Special handling for '_style' which defaults to 'default'.\n            this[type] = (type === '_style' ? 'default' : null);\n            this._setClass(this[type], true);\n        }\n        if (type === '_style') {\n            this._updateColor(this._color, true);\n        }\n    }\n    /**\n     * @input {string} The color to use from your Sass `$colors` map.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"danger\"`, `\"light\"`, and `\"dark\"`.\n     * For more information, see [Theming your App](/docs/theming/theming-your-app).\n     */\n    set color(val) {\n        this._updateColor(this._color, false);\n        this._updateColor(val, true);\n        this._color = val;\n    }\n    /** @hidden */\n    ngAfterContentInit() {\n        this._init = true;\n        this._assignCss(true);\n    }\n    /**\n     * @hidden\n     */\n    setRole(val) {\n        this._assignCss(false);\n        this._role = val;\n        this._assignCss(true);\n    }\n    /**\n     * @hidden\n     */\n    _assignCss(assignCssClass) {\n        let role = this._role;\n        if (role) {\n            this.setElementClass(role, assignCssClass); // button\n            this.setElementClass(`${role}-${this._mode}`, assignCssClass); // button\n            this._setClass(this._style, assignCssClass); // button-clear\n            this._setClass(this._shape, assignCssClass); // button-round\n            this._setClass(this._display, assignCssClass); // button-full\n            this._setClass(this._size, assignCssClass); // button-small\n            this._setClass(this._decorator, assignCssClass); // button-strong\n            this._updateColor(this._color, assignCssClass); // button-secondary, bar-button-secondary\n        }\n    }\n    /**\n     * @hidden\n     */\n    _setClass(type, assignCssClass) {\n        if (type && this._init) {\n            type = type.toLocaleLowerCase();\n            this.setElementClass(`${this._role}-${type}`, assignCssClass);\n            this.setElementClass(`${this._role}-${type}-${this._mode}`, assignCssClass);\n        }\n    }\n    /**\n     * @hidden\n     */\n    _updateColor(color, isAdd) {\n        if (color && this._init) {\n            // The class should begin with the button role\n            // button, bar-button\n            let className = this._role;\n            // If the role is not a bar-button, don't apply the solid style\n            let style = this._style;\n            style = (this._role !== 'bar-button' && style === 'solid' ? 'default' : style);\n            className += (style !== null && style !== '' && style !== 'default' ? '-' + style.toLowerCase() : '');\n            if (color !== null && color !== '') {\n                this.setElementClass(`${className}-${this._mode}-${color}`, isAdd);\n            }\n        }\n    }\n}\nButton.decorators = [\n    { type: Component, args: [{\n                selector: '[ion-button]',\n                template: '<span class=\"button-inner\">' +\n                    '<ng-content></ng-content>' +\n                    '</span>' +\n                    '<div class=\"button-effect\"></div>',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nButton.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Attribute, args: ['ion-button',] },] },\n    { type: Config, },\n    { type: ElementRef, },\n    { type: Renderer, },\n];\nButton.propDecorators = {\n    'large': [{ type: Input },],\n    'small': [{ type: Input },],\n    'default': [{ type: Input },],\n    'outline': [{ type: Input },],\n    'clear': [{ type: Input },],\n    'solid': [{ type: Input },],\n    'round': [{ type: Input },],\n    'block': [{ type: Input },],\n    'full': [{ type: Input },],\n    'strong': [{ type: Input },],\n    'mode': [{ type: Input },],\n    'color': [{ type: Input },],\n};\n"]}