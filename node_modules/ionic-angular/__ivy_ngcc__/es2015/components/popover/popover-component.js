import { Component, ComponentFactoryResolver, ElementRef, HostListener, Renderer, ViewChild, ViewContainerRef } from '@angular/core';
import { Config } from '../../config/config';
import { KEY_ESCAPE } from '../../platform/key';
import { NavParams } from '../../navigation/nav-params';
import { ViewController } from '../../navigation/view-controller';
import { BLOCK_ALL, GestureController } from '../../gestures/gesture-controller';
import { ModuleLoader } from '../../util/module-loader';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../config/config';
import * as ɵngcc2 from '../../navigation/nav-params';
import * as ɵngcc3 from '../../navigation/view-controller';
import * as ɵngcc4 from '../../gestures/gesture-controller';
import * as ɵngcc5 from '../../util/module-loader';
import * as ɵngcc6 from '../backdrop/backdrop';

const _c0 = ["viewport"];
export class PopoverCmp {
    constructor(_cfr, _elementRef, _renderer, _config, _navParams, _viewCtrl, gestureCtrl, moduleLoader) {
        this._cfr = _cfr;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._config = _config;
        this._navParams = _navParams;
        this._viewCtrl = _viewCtrl;
        this.moduleLoader = moduleLoader;
        this._gestureBlocker = gestureCtrl.createBlocker(BLOCK_ALL);
        this.d = _navParams.data.opts;
        _renderer.setElementClass(_elementRef.nativeElement, `popover-${_config.get('mode')}`, true);
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(cssClass => {
                // Make sure the class isn't whitespace, otherwise it throws exceptions
                if (cssClass.trim() !== '')
                    _renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = (++popoverIds);
    }
    ionViewPreLoad() {
        this._load(this._navParams.data.component);
    }
    _load(component) {
        if (component) {
            let cfr = this.moduleLoader.getComponentFactoryResolver(component);
            if (!cfr) {
                cfr = this._cfr;
            }
            const componentFactory = cfr.resolveComponentFactory(component);
            // ******** DOM WRITE ****************
            const componentRef = this._viewport.createComponent(componentFactory, this._viewport.length, this._viewport.parentInjector, []);
            this._viewCtrl._setInstance(componentRef.instance);
            this._enabled = true;
            // Subscribe to events in order to block gestures
            // TODO, should we unsubscribe? memory leak?
            this._viewCtrl.willEnter.subscribe(this._viewWillEnter.bind(this));
            this._viewCtrl.didLeave.subscribe(this._viewDidLeave.bind(this));
        }
    }
    _viewWillEnter() {
        this._gestureBlocker.block();
    }
    _viewDidLeave() {
        this._gestureBlocker.unblock();
    }
    _setCssClass(componentRef, className) {
        this._renderer.setElementClass(componentRef.location.nativeElement, className, true);
    }
    _bdClick() {
        if (this._enabled && this.d.enableBackdropDismiss) {
            return this._viewCtrl.dismiss(null, 'backdrop');
        }
    }
    _keyUp(ev) {
        if (this._enabled && ev.keyCode === KEY_ESCAPE && this._viewCtrl.isLast()) {
            this._bdClick();
        }
    }
    ngOnDestroy() {
        (void 0) /* assert */;
        this._gestureBlocker.destroy();
    }
}
PopoverCmp.ɵfac = function PopoverCmp_Factory(t) { return new (t || PopoverCmp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NavParams), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewController), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.GestureController), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ModuleLoader)); };
PopoverCmp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PopoverCmp, selectors: [["ion-popover"]], viewQuery: function PopoverCmp_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._viewport = _t.first);
    } }, hostBindings: function PopoverCmp_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function PopoverCmp_keyup_HostBindingHandler($event) { return ctx._keyUp($event); }, false, ɵngcc0.ɵɵresolveBody);
    } }, decls: 7, vars: 1, consts: [[3, "hidden", "click"], [1, "popover-wrapper"], [1, "popover-arrow"], [1, "popover-content"], [1, "popover-viewport"], ["nav-viewport", ""], ["viewport", ""]], template: function PopoverCmp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ion-backdrop", 0);
        ɵngcc0.ɵɵlistener("click", function PopoverCmp_Template_ion_backdrop_click_0_listener() { return ctx._bdClick(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3)(4, "div", 4);
        ɵngcc0.ɵɵelement(5, "div", 5, 6);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hidden", !ctx.d.showBackdrop);
    } }, dependencies: [ɵngcc6.Backdrop], encapsulation: 2 });
/** @nocollapse */
PopoverCmp.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: Config, },
    { type: NavParams, },
    { type: ViewController, },
    { type: GestureController, },
    { type: ModuleLoader, },
];
PopoverCmp.propDecorators = {
    '_viewport': [{ type: ViewChild, args: ['viewport', { read: ViewContainerRef },] },],
    '_keyUp': [{ type: HostListener, args: ['body:keyup', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PopoverCmp, [{
        type: Component,
        args: [{
                selector: 'ion-popover',
                template: '<ion-backdrop (click)="_bdClick()" [hidden]="!d.showBackdrop"></ion-backdrop>' +
                    '<div class="popover-wrapper">' +
                    '<div class="popover-arrow"></div>' +
                    '<div class="popover-content">' +
                    '<div class="popover-viewport">' +
                    '<div #viewport nav-viewport></div>' +
                    '</div>' +
                    '</div>' +
                    '</div>'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ElementRef }, { type: Renderer }, { type: ɵngcc1.Config }, { type: ɵngcc2.NavParams }, { type: ɵngcc3.ViewController }, { type: ɵngcc4.GestureController }, { type: ɵngcc5.ModuleLoader }]; }, { _keyUp: [{
            type: HostListener,
            args: ['body:keyup', ['$event']]
        }], _viewport: [{
            type: ViewChild,
            args: ['viewport', { read: ViewContainerRef }]
        }] }); })();
let popoverIds = -1;

//# sourceMappingURL=popover-component.js.map